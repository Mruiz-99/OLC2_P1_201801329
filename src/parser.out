Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ESTRUCTURA
    LLAVDER
    LLAVIZQ
    MUTABLE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> imprimir_instr
Rule 5     instruccion -> definicion_instr
Rule 6     instruccion -> asignacion_instr
Rule 7     instruccion -> mientras_instr
Rule 8     instruccion -> if_instr
Rule 9     instruccion -> if_else_instr
Rule 10    instruccion -> if_elseif_instr
Rule 11    instruccion -> funcion_instr
Rule 12    instruccion -> llamada_funcion_instr PTCOMA
Rule 13    instruccion -> retorno_inst
Rule 14    instruccion -> break_inst
Rule 15    instruccion -> continue_inst
Rule 16    instruccion -> for_instr
Rule 17    imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA
Rule 18    imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
Rule 19    imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA
Rule 20    imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
Rule 21    retorno_inst -> RETORNO expresion PTCOMA
Rule 22    retorno_inst -> RETORNO PTCOMA
Rule 23    break_inst -> BREAK PTCOMA
Rule 24    continue_inst -> CONTINUE PTCOMA
Rule 25    definicion_instr -> LOCAL asignacion_instr
Rule 26    definicion_instr -> GLOBAL asignacion_instr
Rule 27    asignacion_instr -> ID IGUAL expresion PTCOMA
Rule 28    asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA
Rule 29    asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
Rule 30    asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
Rule 31    tipo_var -> ENTERO64
Rule 32    tipo_var -> DECIMAL64
Rule 33    tipo_var -> BOOLEANO
Rule 34    tipo_var -> CHAR
Rule 35    tipo_var -> STRING
Rule 36    mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA
Rule 37    for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
Rule 38    for_instr -> FOR ID IN expresion instrucciones END PTCOMA
Rule 39    if_instr -> IF expresion_logica instrucciones END PTCOMA
Rule 40    if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
Rule 41    if_elseif_instr -> lista_elif
Rule 42    lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
Rule 43    lista_elif -> IF expresion_logica instrucciones
Rule 44    lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
Rule 45    lista_elif -> lista_elif ELSEIF expresion_logica instrucciones
Rule 46    l_exp -> l_exp COMA expresion
Rule 47    l_exp -> expresion
Rule 48    funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA
Rule 49    funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
Rule 50    llamada_funcion_instr -> ID PARIZQ PARDER
Rule 51    llamada_funcion_instr -> ID PARIZQ l_exp PARDER
Rule 52    parametros -> parametros COMA ID
Rule 53    parametros -> ID
Rule 54    expresion_numerica -> expresion_numerica MAS expresion_numerica
Rule 55    expresion_numerica -> expresion_numerica MENOS expresion_numerica
Rule 56    expresion_numerica -> expresion_numerica POR expresion_numerica
Rule 57    expresion_numerica -> expresion_numerica POR expresion
Rule 58    expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica
Rule 59    expresion_numerica -> len_inst MAS expresion_numerica
Rule 60    expresion_numerica -> len_inst MENOS expresion_numerica
Rule 61    expresion_numerica -> len_inst POR expresion_numerica
Rule 62    expresion_numerica -> len_inst POR expresion
Rule 63    expresion_numerica -> len_inst DIVIDIDO expresion_numerica
Rule 64    expresion_numerica -> expresion_numerica MOD expresion_numerica
Rule 65    expresion_numerica -> expresion_numerica POTENCIA expresion_numerica
Rule 66    expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER
Rule 67    expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
Rule 68    expresion_numerica -> SEN PARIZQ expresion_numerica PARDER
Rule 69    expresion_numerica -> COS PARIZQ expresion_numerica PARDER
Rule 70    expresion_numerica -> TAN PARIZQ expresion_numerica PARDER
Rule 71    expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER
Rule 72    expresion_numerica -> MENOS expresion_numerica
Rule 73    expresion_numerica -> PARIZQ expresion_numerica PARDER
Rule 74    expresion -> PARIZQ expresion PARDER
Rule 75    expresion_numerica -> ENTERO
Rule 76    expresion_numerica -> DECIMAL
Rule 77    expresion_numerica -> ID
Rule 78    expresion_numerica -> ID CORIZQ expresion CORDER
Rule 79    expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER
Rule 80    expresion -> CADENA
Rule 81    expresion -> CORIZQ l_exp CORDER
Rule 82    expresion -> CORIZQ l_array_bidimencional CORDER
Rule 83    l_array_bidimencional -> l_array_bidimencional COMA expresion
Rule 84    l_array_bidimencional -> expresion
Rule 85    len_inst -> LEN PARIZQ expresion PARDER
Rule 86    expresion -> UPPER PARIZQ expresion PARDER
Rule 87    expresion -> LOWER PARIZQ expresion PARDER
Rule 88    expresion -> LEN PARIZQ expresion PARDER
Rule 89    expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER
Rule 90    expresion -> TRUNC PARIZQ expresion PARDER
Rule 91    expresion -> R_DECIMAL PARIZQ expresion PARDER
Rule 92    expresion -> STRING PARIZQ expresion PARDER
Rule 93    expresion -> TYPE PARIZQ expresion PARDER
Rule 94    expresion -> PUSH PARIZQ expresion PARDER
Rule 95    expresion -> POP PARIZQ expresion PARDER
Rule 96    expresion -> llamada_funcion_instr
Rule 97    expresion -> CADENA POTENCIA ENTERO
Rule 98    expresion -> CARACTER
Rule 99    expresion -> NULO
Rule 100   expresion -> expresion_numerica
Rule 101   expresion -> expresion_logica
Rule 102   expresion_bool -> FALSO
Rule 103   expresion_bool -> VERDADERO
Rule 104   expresion_numerica -> expresion_bool
Rule 105   expresion_logica -> expresion_logica AND expresion_logica
Rule 106   expresion_logica -> expresion_logica OR expresion_logica
Rule 107   expresion_logica -> NOT expresion_logica
Rule 108   expresion_logica -> expresion_bool AND expresion_bool
Rule 109   expresion_logica -> expresion_bool OR expresion_bool
Rule 110   expresion_logica -> NOT expresion_bool
Rule 111   expresion_logica -> expresion_logica AND expresion_bool
Rule 112   expresion_logica -> expresion_logica OR expresion_bool
Rule 113   expresion_logica -> expresion_bool AND expresion_logica
Rule 114   expresion_logica -> expresion_bool OR expresion_logica
Rule 115   expresion_logica -> PARIZQ expresion_logica PARDER
Rule 116   expresion_logica -> expresion MAYQUE expresion
Rule 117   expresion_logica -> expresion MENQUE expresion
Rule 118   expresion_logica -> expresion IGUALQUE expresion
Rule 119   expresion_logica -> expresion NIGUALQUE expresion
Rule 120   expresion_logica -> expresion MENIGQUE expresion
Rule 121   expresion_logica -> expresion MAYIGQUE expresion
Rule 122   expresion -> expresion POR expresion

Terminals, with rules where they appear

AND                  : 105 108 111 113
BOOLEANO             : 33
BREAK                : 23
CADENA               : 80 97
CARACTER             : 98
CHAR                 : 34
COMA                 : 46 52 67 83 89
CONTINUE             : 24
CORDER               : 29 30 30 78 79 79 81 82
CORIZQ               : 29 30 30 78 79 79 81 82
COS                  : 69
DECIMAL              : 76
DECIMAL64            : 32
DIVIDIDO             : 58 63
DOSPT                : 28
ELSE                 : 40 42
ELSEIF               : 42 44 45
END                  : 36 37 38 39 40 42 44 48 49
ENTERO               : 75 97
ENTERO64             : 31
ESTRUCTURA           : 
FALSO                : 102
FOR                  : 37 38
FUNC                 : 48 49
GLOBAL               : 26
ID                   : 27 28 29 30 37 38 48 49 50 51 52 53 77 78 79
IF                   : 39 40 43
IGUAL                : 27 28 29 30
IGUALQUE             : 118
IMPRIMIR             : 17 19
IMPRIMIRSALTO        : 18 20
IN                   : 37 38
LEN                  : 85 88
LLAVDER              : 
LLAVIZQ              : 
LOCAL                : 25
LOG                  : 67
LOG10                : 66
LOWER                : 87
MAS                  : 54 59
MAYIGQUE             : 121
MAYQUE               : 116
MENIGQUE             : 120
MENOS                : 55 60 72
MENQUE               : 117
MIENTRAS             : 36
MOD                  : 64
MUTABLE              : 
NIGUALQUE            : 119
NOT                  : 107 110
NULO                 : 99
OR                   : 106 109 112 114
PARDER               : 17 18 19 20 48 49 50 51 66 67 68 69 70 71 73 74 85 86 87 88 89 90 91 92 93 94 95 115
PARIZQ               : 17 18 19 20 48 49 50 51 66 67 68 69 70 71 73 74 85 86 87 88 89 90 91 92 93 94 95 115
PARSE                : 89
POP                  : 95
POR                  : 56 57 61 62 122
POTENCIA             : 65 97
PTCOMA               : 12 17 18 19 20 21 22 23 24 27 28 29 30 36 37 38 39 40 42 44 48 49
PUNTOS               : 37
PUSH                 : 94
RETORNO              : 21 22
R_DECIMAL            : 91
SEN                  : 68
SQRT                 : 71
STRING               : 35 92
TAN                  : 70
TRUNC                : 90
TYPE                 : 93
UPPER                : 86
VERDADERO            : 103
error                : 

Nonterminals, with rules where they appear

asignacion_instr     : 6 25 26
break_inst           : 14
continue_inst        : 15
definicion_instr     : 5
expresion            : 17 18 21 27 28 29 29 30 30 30 37 37 38 46 47 57 62 74 78 79 79 83 84 85 86 87 88 89 90 91 92 93 94 95 116 116 117 117 118 118 119 119 120 120 121 121 122 122
expresion_bool       : 104 108 108 109 109 110 111 112 113 114
expresion_logica     : 36 39 40 42 43 44 45 101 105 105 106 106 107 111 112 113 114 115
expresion_numerica   : 54 54 55 55 56 56 57 58 58 59 60 61 63 64 64 65 65 66 67 67 68 69 70 71 72 73 100
for_instr            : 16
funcion_instr        : 11
if_else_instr        : 9
if_elseif_instr      : 10
if_instr             : 8
imprimir_instr       : 4
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 36 37 38 39 40 40 42 42 43 44 45 48 49
l_array_bidimencional : 82 83
l_exp                : 19 20 46 51 81
len_inst             : 59 60 61 62 63
lista_elif           : 41 42 44 45
llamada_funcion_instr : 12 96
mientras_instr       : 7
parametros           : 49 52
retorno_inst         : 13
tipo_var             : 28 89

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    $end            reduce using rule 1 (init -> instrucciones .)
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 3

    (3) instrucciones -> instruccion .

    IMPRIMIR        reduce using rule 3 (instrucciones -> instruccion .)
    IMPRIMIRSALTO   reduce using rule 3 (instrucciones -> instruccion .)
    LOCAL           reduce using rule 3 (instrucciones -> instruccion .)
    GLOBAL          reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    MIENTRAS        reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    FUNC            reduce using rule 3 (instrucciones -> instruccion .)
    RETORNO         reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    END             reduce using rule 3 (instrucciones -> instruccion .)
    ELSE            reduce using rule 3 (instrucciones -> instruccion .)
    ELSEIF          reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> imprimir_instr .

    IMPRIMIR        reduce using rule 4 (instruccion -> imprimir_instr .)
    IMPRIMIRSALTO   reduce using rule 4 (instruccion -> imprimir_instr .)
    LOCAL           reduce using rule 4 (instruccion -> imprimir_instr .)
    GLOBAL          reduce using rule 4 (instruccion -> imprimir_instr .)
    ID              reduce using rule 4 (instruccion -> imprimir_instr .)
    MIENTRAS        reduce using rule 4 (instruccion -> imprimir_instr .)
    IF              reduce using rule 4 (instruccion -> imprimir_instr .)
    FUNC            reduce using rule 4 (instruccion -> imprimir_instr .)
    RETORNO         reduce using rule 4 (instruccion -> imprimir_instr .)
    BREAK           reduce using rule 4 (instruccion -> imprimir_instr .)
    CONTINUE        reduce using rule 4 (instruccion -> imprimir_instr .)
    FOR             reduce using rule 4 (instruccion -> imprimir_instr .)
    $end            reduce using rule 4 (instruccion -> imprimir_instr .)
    END             reduce using rule 4 (instruccion -> imprimir_instr .)
    ELSE            reduce using rule 4 (instruccion -> imprimir_instr .)
    ELSEIF          reduce using rule 4 (instruccion -> imprimir_instr .)


state 5

    (5) instruccion -> definicion_instr .

    IMPRIMIR        reduce using rule 5 (instruccion -> definicion_instr .)
    IMPRIMIRSALTO   reduce using rule 5 (instruccion -> definicion_instr .)
    LOCAL           reduce using rule 5 (instruccion -> definicion_instr .)
    GLOBAL          reduce using rule 5 (instruccion -> definicion_instr .)
    ID              reduce using rule 5 (instruccion -> definicion_instr .)
    MIENTRAS        reduce using rule 5 (instruccion -> definicion_instr .)
    IF              reduce using rule 5 (instruccion -> definicion_instr .)
    FUNC            reduce using rule 5 (instruccion -> definicion_instr .)
    RETORNO         reduce using rule 5 (instruccion -> definicion_instr .)
    BREAK           reduce using rule 5 (instruccion -> definicion_instr .)
    CONTINUE        reduce using rule 5 (instruccion -> definicion_instr .)
    FOR             reduce using rule 5 (instruccion -> definicion_instr .)
    $end            reduce using rule 5 (instruccion -> definicion_instr .)
    END             reduce using rule 5 (instruccion -> definicion_instr .)
    ELSE            reduce using rule 5 (instruccion -> definicion_instr .)
    ELSEIF          reduce using rule 5 (instruccion -> definicion_instr .)


state 6

    (6) instruccion -> asignacion_instr .

    IMPRIMIR        reduce using rule 6 (instruccion -> asignacion_instr .)
    IMPRIMIRSALTO   reduce using rule 6 (instruccion -> asignacion_instr .)
    LOCAL           reduce using rule 6 (instruccion -> asignacion_instr .)
    GLOBAL          reduce using rule 6 (instruccion -> asignacion_instr .)
    ID              reduce using rule 6 (instruccion -> asignacion_instr .)
    MIENTRAS        reduce using rule 6 (instruccion -> asignacion_instr .)
    IF              reduce using rule 6 (instruccion -> asignacion_instr .)
    FUNC            reduce using rule 6 (instruccion -> asignacion_instr .)
    RETORNO         reduce using rule 6 (instruccion -> asignacion_instr .)
    BREAK           reduce using rule 6 (instruccion -> asignacion_instr .)
    CONTINUE        reduce using rule 6 (instruccion -> asignacion_instr .)
    FOR             reduce using rule 6 (instruccion -> asignacion_instr .)
    $end            reduce using rule 6 (instruccion -> asignacion_instr .)
    END             reduce using rule 6 (instruccion -> asignacion_instr .)
    ELSE            reduce using rule 6 (instruccion -> asignacion_instr .)
    ELSEIF          reduce using rule 6 (instruccion -> asignacion_instr .)


state 7

    (7) instruccion -> mientras_instr .

    IMPRIMIR        reduce using rule 7 (instruccion -> mientras_instr .)
    IMPRIMIRSALTO   reduce using rule 7 (instruccion -> mientras_instr .)
    LOCAL           reduce using rule 7 (instruccion -> mientras_instr .)
    GLOBAL          reduce using rule 7 (instruccion -> mientras_instr .)
    ID              reduce using rule 7 (instruccion -> mientras_instr .)
    MIENTRAS        reduce using rule 7 (instruccion -> mientras_instr .)
    IF              reduce using rule 7 (instruccion -> mientras_instr .)
    FUNC            reduce using rule 7 (instruccion -> mientras_instr .)
    RETORNO         reduce using rule 7 (instruccion -> mientras_instr .)
    BREAK           reduce using rule 7 (instruccion -> mientras_instr .)
    CONTINUE        reduce using rule 7 (instruccion -> mientras_instr .)
    FOR             reduce using rule 7 (instruccion -> mientras_instr .)
    $end            reduce using rule 7 (instruccion -> mientras_instr .)
    END             reduce using rule 7 (instruccion -> mientras_instr .)
    ELSE            reduce using rule 7 (instruccion -> mientras_instr .)
    ELSEIF          reduce using rule 7 (instruccion -> mientras_instr .)


state 8

    (8) instruccion -> if_instr .

    IMPRIMIR        reduce using rule 8 (instruccion -> if_instr .)
    IMPRIMIRSALTO   reduce using rule 8 (instruccion -> if_instr .)
    LOCAL           reduce using rule 8 (instruccion -> if_instr .)
    GLOBAL          reduce using rule 8 (instruccion -> if_instr .)
    ID              reduce using rule 8 (instruccion -> if_instr .)
    MIENTRAS        reduce using rule 8 (instruccion -> if_instr .)
    IF              reduce using rule 8 (instruccion -> if_instr .)
    FUNC            reduce using rule 8 (instruccion -> if_instr .)
    RETORNO         reduce using rule 8 (instruccion -> if_instr .)
    BREAK           reduce using rule 8 (instruccion -> if_instr .)
    CONTINUE        reduce using rule 8 (instruccion -> if_instr .)
    FOR             reduce using rule 8 (instruccion -> if_instr .)
    $end            reduce using rule 8 (instruccion -> if_instr .)
    END             reduce using rule 8 (instruccion -> if_instr .)
    ELSE            reduce using rule 8 (instruccion -> if_instr .)
    ELSEIF          reduce using rule 8 (instruccion -> if_instr .)


state 9

    (9) instruccion -> if_else_instr .

    IMPRIMIR        reduce using rule 9 (instruccion -> if_else_instr .)
    IMPRIMIRSALTO   reduce using rule 9 (instruccion -> if_else_instr .)
    LOCAL           reduce using rule 9 (instruccion -> if_else_instr .)
    GLOBAL          reduce using rule 9 (instruccion -> if_else_instr .)
    ID              reduce using rule 9 (instruccion -> if_else_instr .)
    MIENTRAS        reduce using rule 9 (instruccion -> if_else_instr .)
    IF              reduce using rule 9 (instruccion -> if_else_instr .)
    FUNC            reduce using rule 9 (instruccion -> if_else_instr .)
    RETORNO         reduce using rule 9 (instruccion -> if_else_instr .)
    BREAK           reduce using rule 9 (instruccion -> if_else_instr .)
    CONTINUE        reduce using rule 9 (instruccion -> if_else_instr .)
    FOR             reduce using rule 9 (instruccion -> if_else_instr .)
    $end            reduce using rule 9 (instruccion -> if_else_instr .)
    END             reduce using rule 9 (instruccion -> if_else_instr .)
    ELSE            reduce using rule 9 (instruccion -> if_else_instr .)
    ELSEIF          reduce using rule 9 (instruccion -> if_else_instr .)


state 10

    (10) instruccion -> if_elseif_instr .

    IMPRIMIR        reduce using rule 10 (instruccion -> if_elseif_instr .)
    IMPRIMIRSALTO   reduce using rule 10 (instruccion -> if_elseif_instr .)
    LOCAL           reduce using rule 10 (instruccion -> if_elseif_instr .)
    GLOBAL          reduce using rule 10 (instruccion -> if_elseif_instr .)
    ID              reduce using rule 10 (instruccion -> if_elseif_instr .)
    MIENTRAS        reduce using rule 10 (instruccion -> if_elseif_instr .)
    IF              reduce using rule 10 (instruccion -> if_elseif_instr .)
    FUNC            reduce using rule 10 (instruccion -> if_elseif_instr .)
    RETORNO         reduce using rule 10 (instruccion -> if_elseif_instr .)
    BREAK           reduce using rule 10 (instruccion -> if_elseif_instr .)
    CONTINUE        reduce using rule 10 (instruccion -> if_elseif_instr .)
    FOR             reduce using rule 10 (instruccion -> if_elseif_instr .)
    $end            reduce using rule 10 (instruccion -> if_elseif_instr .)
    END             reduce using rule 10 (instruccion -> if_elseif_instr .)
    ELSE            reduce using rule 10 (instruccion -> if_elseif_instr .)
    ELSEIF          reduce using rule 10 (instruccion -> if_elseif_instr .)


state 11

    (11) instruccion -> funcion_instr .

    IMPRIMIR        reduce using rule 11 (instruccion -> funcion_instr .)
    IMPRIMIRSALTO   reduce using rule 11 (instruccion -> funcion_instr .)
    LOCAL           reduce using rule 11 (instruccion -> funcion_instr .)
    GLOBAL          reduce using rule 11 (instruccion -> funcion_instr .)
    ID              reduce using rule 11 (instruccion -> funcion_instr .)
    MIENTRAS        reduce using rule 11 (instruccion -> funcion_instr .)
    IF              reduce using rule 11 (instruccion -> funcion_instr .)
    FUNC            reduce using rule 11 (instruccion -> funcion_instr .)
    RETORNO         reduce using rule 11 (instruccion -> funcion_instr .)
    BREAK           reduce using rule 11 (instruccion -> funcion_instr .)
    CONTINUE        reduce using rule 11 (instruccion -> funcion_instr .)
    FOR             reduce using rule 11 (instruccion -> funcion_instr .)
    $end            reduce using rule 11 (instruccion -> funcion_instr .)
    END             reduce using rule 11 (instruccion -> funcion_instr .)
    ELSE            reduce using rule 11 (instruccion -> funcion_instr .)
    ELSEIF          reduce using rule 11 (instruccion -> funcion_instr .)


state 12

    (12) instruccion -> llamada_funcion_instr . PTCOMA

    PTCOMA          shift and go to state 31


state 13

    (13) instruccion -> retorno_inst .

    IMPRIMIR        reduce using rule 13 (instruccion -> retorno_inst .)
    IMPRIMIRSALTO   reduce using rule 13 (instruccion -> retorno_inst .)
    LOCAL           reduce using rule 13 (instruccion -> retorno_inst .)
    GLOBAL          reduce using rule 13 (instruccion -> retorno_inst .)
    ID              reduce using rule 13 (instruccion -> retorno_inst .)
    MIENTRAS        reduce using rule 13 (instruccion -> retorno_inst .)
    IF              reduce using rule 13 (instruccion -> retorno_inst .)
    FUNC            reduce using rule 13 (instruccion -> retorno_inst .)
    RETORNO         reduce using rule 13 (instruccion -> retorno_inst .)
    BREAK           reduce using rule 13 (instruccion -> retorno_inst .)
    CONTINUE        reduce using rule 13 (instruccion -> retorno_inst .)
    FOR             reduce using rule 13 (instruccion -> retorno_inst .)
    $end            reduce using rule 13 (instruccion -> retorno_inst .)
    END             reduce using rule 13 (instruccion -> retorno_inst .)
    ELSE            reduce using rule 13 (instruccion -> retorno_inst .)
    ELSEIF          reduce using rule 13 (instruccion -> retorno_inst .)


state 14

    (14) instruccion -> break_inst .

    IMPRIMIR        reduce using rule 14 (instruccion -> break_inst .)
    IMPRIMIRSALTO   reduce using rule 14 (instruccion -> break_inst .)
    LOCAL           reduce using rule 14 (instruccion -> break_inst .)
    GLOBAL          reduce using rule 14 (instruccion -> break_inst .)
    ID              reduce using rule 14 (instruccion -> break_inst .)
    MIENTRAS        reduce using rule 14 (instruccion -> break_inst .)
    IF              reduce using rule 14 (instruccion -> break_inst .)
    FUNC            reduce using rule 14 (instruccion -> break_inst .)
    RETORNO         reduce using rule 14 (instruccion -> break_inst .)
    BREAK           reduce using rule 14 (instruccion -> break_inst .)
    CONTINUE        reduce using rule 14 (instruccion -> break_inst .)
    FOR             reduce using rule 14 (instruccion -> break_inst .)
    $end            reduce using rule 14 (instruccion -> break_inst .)
    END             reduce using rule 14 (instruccion -> break_inst .)
    ELSE            reduce using rule 14 (instruccion -> break_inst .)
    ELSEIF          reduce using rule 14 (instruccion -> break_inst .)


state 15

    (15) instruccion -> continue_inst .

    IMPRIMIR        reduce using rule 15 (instruccion -> continue_inst .)
    IMPRIMIRSALTO   reduce using rule 15 (instruccion -> continue_inst .)
    LOCAL           reduce using rule 15 (instruccion -> continue_inst .)
    GLOBAL          reduce using rule 15 (instruccion -> continue_inst .)
    ID              reduce using rule 15 (instruccion -> continue_inst .)
    MIENTRAS        reduce using rule 15 (instruccion -> continue_inst .)
    IF              reduce using rule 15 (instruccion -> continue_inst .)
    FUNC            reduce using rule 15 (instruccion -> continue_inst .)
    RETORNO         reduce using rule 15 (instruccion -> continue_inst .)
    BREAK           reduce using rule 15 (instruccion -> continue_inst .)
    CONTINUE        reduce using rule 15 (instruccion -> continue_inst .)
    FOR             reduce using rule 15 (instruccion -> continue_inst .)
    $end            reduce using rule 15 (instruccion -> continue_inst .)
    END             reduce using rule 15 (instruccion -> continue_inst .)
    ELSE            reduce using rule 15 (instruccion -> continue_inst .)
    ELSEIF          reduce using rule 15 (instruccion -> continue_inst .)


state 16

    (16) instruccion -> for_instr .

    IMPRIMIR        reduce using rule 16 (instruccion -> for_instr .)
    IMPRIMIRSALTO   reduce using rule 16 (instruccion -> for_instr .)
    LOCAL           reduce using rule 16 (instruccion -> for_instr .)
    GLOBAL          reduce using rule 16 (instruccion -> for_instr .)
    ID              reduce using rule 16 (instruccion -> for_instr .)
    MIENTRAS        reduce using rule 16 (instruccion -> for_instr .)
    IF              reduce using rule 16 (instruccion -> for_instr .)
    FUNC            reduce using rule 16 (instruccion -> for_instr .)
    RETORNO         reduce using rule 16 (instruccion -> for_instr .)
    BREAK           reduce using rule 16 (instruccion -> for_instr .)
    CONTINUE        reduce using rule 16 (instruccion -> for_instr .)
    FOR             reduce using rule 16 (instruccion -> for_instr .)
    $end            reduce using rule 16 (instruccion -> for_instr .)
    END             reduce using rule 16 (instruccion -> for_instr .)
    ELSE            reduce using rule 16 (instruccion -> for_instr .)
    ELSEIF          reduce using rule 16 (instruccion -> for_instr .)


state 17

    (17) imprimir_instr -> IMPRIMIR . PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> IMPRIMIR . PARIZQ l_exp PARDER PTCOMA

    PARIZQ          shift and go to state 32


state 18

    (18) imprimir_instr -> IMPRIMIRSALTO . PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> IMPRIMIRSALTO . PARIZQ l_exp PARDER PTCOMA

    PARIZQ          shift and go to state 33


state 19

    (25) definicion_instr -> LOCAL . asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA

    ID              shift and go to state 35

    asignacion_instr               shift and go to state 34

state 20

    (26) definicion_instr -> GLOBAL . asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA

    ID              shift and go to state 35

    asignacion_instr               shift and go to state 36

state 21

    (27) asignacion_instr -> ID . IGUAL expresion PTCOMA
    (28) asignacion_instr -> ID . IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> ID . CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> ID . CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (50) llamada_funcion_instr -> ID . PARIZQ PARDER
    (51) llamada_funcion_instr -> ID . PARIZQ l_exp PARDER

    IGUAL           shift and go to state 37
    CORIZQ          shift and go to state 38
    PARIZQ          shift and go to state 39


state 22

    (36) mientras_instr -> MIENTRAS . expresion_logica instrucciones END PTCOMA
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER

    NOT             shift and go to state 41
    PARIZQ          shift and go to state 43
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73

    expresion_logica               shift and go to state 40
    expresion_bool                 shift and go to state 42
    expresion                      shift and go to state 44
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    len_inst                       shift and go to state 66

state 23

    (39) if_instr -> IF . expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> IF . expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> IF . expresion_logica instrucciones
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER

    NOT             shift and go to state 41
    PARIZQ          shift and go to state 43
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73

    expresion_logica               shift and go to state 74
    expresion_bool                 shift and go to state 42
    expresion                      shift and go to state 44
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    len_inst                       shift and go to state 66

state 24

    (41) if_elseif_instr -> lista_elif .
    (42) lista_elif -> lista_elif . ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (44) lista_elif -> lista_elif . ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> lista_elif . ELSEIF expresion_logica instrucciones

  ! shift/reduce conflict for ELSEIF resolved as shift
    IMPRIMIR        reduce using rule 41 (if_elseif_instr -> lista_elif .)
    IMPRIMIRSALTO   reduce using rule 41 (if_elseif_instr -> lista_elif .)
    LOCAL           reduce using rule 41 (if_elseif_instr -> lista_elif .)
    GLOBAL          reduce using rule 41 (if_elseif_instr -> lista_elif .)
    ID              reduce using rule 41 (if_elseif_instr -> lista_elif .)
    MIENTRAS        reduce using rule 41 (if_elseif_instr -> lista_elif .)
    IF              reduce using rule 41 (if_elseif_instr -> lista_elif .)
    FUNC            reduce using rule 41 (if_elseif_instr -> lista_elif .)
    RETORNO         reduce using rule 41 (if_elseif_instr -> lista_elif .)
    BREAK           reduce using rule 41 (if_elseif_instr -> lista_elif .)
    CONTINUE        reduce using rule 41 (if_elseif_instr -> lista_elif .)
    FOR             reduce using rule 41 (if_elseif_instr -> lista_elif .)
    $end            reduce using rule 41 (if_elseif_instr -> lista_elif .)
    END             reduce using rule 41 (if_elseif_instr -> lista_elif .)
    ELSE            reduce using rule 41 (if_elseif_instr -> lista_elif .)
    ELSEIF          shift and go to state 75

  ! ELSEIF          [ reduce using rule 41 (if_elseif_instr -> lista_elif .) ]


state 25

    (48) funcion_instr -> FUNC . ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> FUNC . ID PARIZQ parametros PARDER instrucciones END PTCOMA

    ID              shift and go to state 76


state 26

    (21) retorno_inst -> RETORNO . expresion PTCOMA
    (22) retorno_inst -> RETORNO . PTCOMA
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PTCOMA          shift and go to state 78
    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 77
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 27

    (23) break_inst -> BREAK . PTCOMA

    PTCOMA          shift and go to state 82


state 28

    (24) continue_inst -> CONTINUE . PTCOMA

    PTCOMA          shift and go to state 83


state 29

    (37) for_instr -> FOR . ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> FOR . ID IN expresion instrucciones END PTCOMA

    ID              shift and go to state 84


state 30

    (2) instrucciones -> instrucciones instruccion .

    IMPRIMIR        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IMPRIMIRSALTO   reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOCAL           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    GLOBAL          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MIENTRAS        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNC            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETORNO         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    END             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSEIF          reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 31

    (12) instruccion -> llamada_funcion_instr PTCOMA .

    IMPRIMIR        reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    LOCAL           reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    GLOBAL          reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    ID              reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    MIENTRAS        reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    IF              reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    FUNC            reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    RETORNO         reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    BREAK           reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    CONTINUE        reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    FOR             reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    $end            reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    END             reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    ELSE            reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)
    ELSEIF          reduce using rule 12 (instruccion -> llamada_funcion_instr PTCOMA .)


state 32

    (17) imprimir_instr -> IMPRIMIR PARIZQ . expresion PARDER PTCOMA
    (19) imprimir_instr -> IMPRIMIR PARIZQ . l_exp PARDER PTCOMA
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (46) l_exp -> . l_exp COMA expresion
    (47) l_exp -> . expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 85
    l_exp                          shift and go to state 86
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 33

    (18) imprimir_instr -> IMPRIMIRSALTO PARIZQ . expresion PARDER PTCOMA
    (20) imprimir_instr -> IMPRIMIRSALTO PARIZQ . l_exp PARDER PTCOMA
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (46) l_exp -> . l_exp COMA expresion
    (47) l_exp -> . expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 87
    l_exp                          shift and go to state 88
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 34

    (25) definicion_instr -> LOCAL asignacion_instr .

    IMPRIMIR        reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    IMPRIMIRSALTO   reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    LOCAL           reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    GLOBAL          reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    ID              reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    MIENTRAS        reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    IF              reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    FUNC            reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    RETORNO         reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    BREAK           reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    CONTINUE        reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    FOR             reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    $end            reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    END             reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    ELSE            reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)
    ELSEIF          reduce using rule 25 (definicion_instr -> LOCAL asignacion_instr .)


state 35

    (27) asignacion_instr -> ID . IGUAL expresion PTCOMA
    (28) asignacion_instr -> ID . IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> ID . CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> ID . CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA

    IGUAL           shift and go to state 37
    CORIZQ          shift and go to state 38


state 36

    (26) definicion_instr -> GLOBAL asignacion_instr .

    IMPRIMIR        reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    IMPRIMIRSALTO   reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    LOCAL           reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    GLOBAL          reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    ID              reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    MIENTRAS        reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    IF              reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    FUNC            reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    RETORNO         reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    BREAK           reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    CONTINUE        reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    FOR             reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    $end            reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    END             reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    ELSE            reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)
    ELSEIF          reduce using rule 26 (definicion_instr -> GLOBAL asignacion_instr .)


state 37

    (27) asignacion_instr -> ID IGUAL . expresion PTCOMA
    (28) asignacion_instr -> ID IGUAL . expresion DOSPT tipo_var PTCOMA
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 89
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 38

    (29) asignacion_instr -> ID CORIZQ . expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> ID CORIZQ . expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 90
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 39

    (50) llamada_funcion_instr -> ID PARIZQ . PARDER
    (51) llamada_funcion_instr -> ID PARIZQ . l_exp PARDER
    (46) l_exp -> . l_exp COMA expresion
    (47) l_exp -> . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARDER          shift and go to state 91
    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    l_exp                          shift and go to state 92
    expresion                      shift and go to state 93
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 40

    (36) mientras_instr -> MIENTRAS expresion_logica . instrucciones END PTCOMA
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool
    (101) expresion -> expresion_logica .
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    AND             shift and go to state 95
    OR              shift and go to state 96
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    POR             reduce using rule 101 (expresion -> expresion_logica .)
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instrucciones                  shift and go to state 94
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 41

    (107) expresion_logica -> NOT . expresion_logica
    (110) expresion_logica -> NOT . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER

    NOT             shift and go to state 41
    PARIZQ          shift and go to state 43
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73

    expresion_logica               shift and go to state 97
    expresion_bool                 shift and go to state 98
    expresion                      shift and go to state 44
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    len_inst                       shift and go to state 66

state 42

    (108) expresion_logica -> expresion_bool . AND expresion_bool
    (109) expresion_logica -> expresion_bool . OR expresion_bool
    (113) expresion_logica -> expresion_bool . AND expresion_logica
    (114) expresion_logica -> expresion_bool . OR expresion_logica
    (104) expresion_numerica -> expresion_bool .

    AND             shift and go to state 99
    OR              shift and go to state 100
    MAS             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENOS           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POR             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    DIVIDIDO        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MOD             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POTENCIA        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IGUALQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    NIGUALQUE       reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    PARDER          reduce using rule 104 (expresion_numerica -> expresion_bool .)


state 43

    (115) expresion_logica -> PARIZQ . expresion_logica PARDER
    (74) expresion -> PARIZQ . expresion PARDER
    (73) expresion_numerica -> PARIZQ . expresion_numerica PARDER
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (85) len_inst -> . LEN PARIZQ expresion PARDER

    NOT             shift and go to state 41
    PARIZQ          shift and go to state 43
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 104
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_logica               shift and go to state 101
    expresion                      shift and go to state 102
    expresion_numerica             shift and go to state 103
    expresion_bool                 shift and go to state 42
    llamada_funcion_instr          shift and go to state 59
    len_inst                       shift and go to state 66

state 44

    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion
    (122) expresion -> expresion . POR expresion

    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110
    POR             shift and go to state 111


state 45

    (102) expresion_bool -> FALSO .

    AND             reduce using rule 102 (expresion_bool -> FALSO .)
    OR              reduce using rule 102 (expresion_bool -> FALSO .)
    MAS             reduce using rule 102 (expresion_bool -> FALSO .)
    MENOS           reduce using rule 102 (expresion_bool -> FALSO .)
    POR             reduce using rule 102 (expresion_bool -> FALSO .)
    DIVIDIDO        reduce using rule 102 (expresion_bool -> FALSO .)
    MOD             reduce using rule 102 (expresion_bool -> FALSO .)
    POTENCIA        reduce using rule 102 (expresion_bool -> FALSO .)
    MAYQUE          reduce using rule 102 (expresion_bool -> FALSO .)
    MENQUE          reduce using rule 102 (expresion_bool -> FALSO .)
    IGUALQUE        reduce using rule 102 (expresion_bool -> FALSO .)
    NIGUALQUE       reduce using rule 102 (expresion_bool -> FALSO .)
    MENIGQUE        reduce using rule 102 (expresion_bool -> FALSO .)
    MAYIGQUE        reduce using rule 102 (expresion_bool -> FALSO .)
    PTCOMA          reduce using rule 102 (expresion_bool -> FALSO .)
    PARDER          reduce using rule 102 (expresion_bool -> FALSO .)
    COMA            reduce using rule 102 (expresion_bool -> FALSO .)
    DOSPT           reduce using rule 102 (expresion_bool -> FALSO .)
    CORDER          reduce using rule 102 (expresion_bool -> FALSO .)
    IMPRIMIR        reduce using rule 102 (expresion_bool -> FALSO .)
    IMPRIMIRSALTO   reduce using rule 102 (expresion_bool -> FALSO .)
    LOCAL           reduce using rule 102 (expresion_bool -> FALSO .)
    GLOBAL          reduce using rule 102 (expresion_bool -> FALSO .)
    ID              reduce using rule 102 (expresion_bool -> FALSO .)
    MIENTRAS        reduce using rule 102 (expresion_bool -> FALSO .)
    IF              reduce using rule 102 (expresion_bool -> FALSO .)
    FUNC            reduce using rule 102 (expresion_bool -> FALSO .)
    RETORNO         reduce using rule 102 (expresion_bool -> FALSO .)
    BREAK           reduce using rule 102 (expresion_bool -> FALSO .)
    CONTINUE        reduce using rule 102 (expresion_bool -> FALSO .)
    FOR             reduce using rule 102 (expresion_bool -> FALSO .)
    PUNTOS          reduce using rule 102 (expresion_bool -> FALSO .)


state 46

    (103) expresion_bool -> VERDADERO .

    AND             reduce using rule 103 (expresion_bool -> VERDADERO .)
    OR              reduce using rule 103 (expresion_bool -> VERDADERO .)
    MAS             reduce using rule 103 (expresion_bool -> VERDADERO .)
    MENOS           reduce using rule 103 (expresion_bool -> VERDADERO .)
    POR             reduce using rule 103 (expresion_bool -> VERDADERO .)
    DIVIDIDO        reduce using rule 103 (expresion_bool -> VERDADERO .)
    MOD             reduce using rule 103 (expresion_bool -> VERDADERO .)
    POTENCIA        reduce using rule 103 (expresion_bool -> VERDADERO .)
    MAYQUE          reduce using rule 103 (expresion_bool -> VERDADERO .)
    MENQUE          reduce using rule 103 (expresion_bool -> VERDADERO .)
    IGUALQUE        reduce using rule 103 (expresion_bool -> VERDADERO .)
    NIGUALQUE       reduce using rule 103 (expresion_bool -> VERDADERO .)
    MENIGQUE        reduce using rule 103 (expresion_bool -> VERDADERO .)
    MAYIGQUE        reduce using rule 103 (expresion_bool -> VERDADERO .)
    PTCOMA          reduce using rule 103 (expresion_bool -> VERDADERO .)
    PARDER          reduce using rule 103 (expresion_bool -> VERDADERO .)
    COMA            reduce using rule 103 (expresion_bool -> VERDADERO .)
    DOSPT           reduce using rule 103 (expresion_bool -> VERDADERO .)
    CORDER          reduce using rule 103 (expresion_bool -> VERDADERO .)
    IMPRIMIR        reduce using rule 103 (expresion_bool -> VERDADERO .)
    IMPRIMIRSALTO   reduce using rule 103 (expresion_bool -> VERDADERO .)
    LOCAL           reduce using rule 103 (expresion_bool -> VERDADERO .)
    GLOBAL          reduce using rule 103 (expresion_bool -> VERDADERO .)
    ID              reduce using rule 103 (expresion_bool -> VERDADERO .)
    MIENTRAS        reduce using rule 103 (expresion_bool -> VERDADERO .)
    IF              reduce using rule 103 (expresion_bool -> VERDADERO .)
    FUNC            reduce using rule 103 (expresion_bool -> VERDADERO .)
    RETORNO         reduce using rule 103 (expresion_bool -> VERDADERO .)
    BREAK           reduce using rule 103 (expresion_bool -> VERDADERO .)
    CONTINUE        reduce using rule 103 (expresion_bool -> VERDADERO .)
    FOR             reduce using rule 103 (expresion_bool -> VERDADERO .)
    PUNTOS          reduce using rule 103 (expresion_bool -> VERDADERO .)


state 47

    (80) expresion -> CADENA .
    (97) expresion -> CADENA . POTENCIA ENTERO

  ! shift/reduce conflict for POTENCIA resolved as shift
    MAYQUE          reduce using rule 80 (expresion -> CADENA .)
    MENQUE          reduce using rule 80 (expresion -> CADENA .)
    IGUALQUE        reduce using rule 80 (expresion -> CADENA .)
    NIGUALQUE       reduce using rule 80 (expresion -> CADENA .)
    MENIGQUE        reduce using rule 80 (expresion -> CADENA .)
    MAYIGQUE        reduce using rule 80 (expresion -> CADENA .)
    POR             reduce using rule 80 (expresion -> CADENA .)
    PTCOMA          reduce using rule 80 (expresion -> CADENA .)
    PARDER          reduce using rule 80 (expresion -> CADENA .)
    COMA            reduce using rule 80 (expresion -> CADENA .)
    DOSPT           reduce using rule 80 (expresion -> CADENA .)
    CORDER          reduce using rule 80 (expresion -> CADENA .)
    AND             reduce using rule 80 (expresion -> CADENA .)
    OR              reduce using rule 80 (expresion -> CADENA .)
    IMPRIMIR        reduce using rule 80 (expresion -> CADENA .)
    IMPRIMIRSALTO   reduce using rule 80 (expresion -> CADENA .)
    LOCAL           reduce using rule 80 (expresion -> CADENA .)
    GLOBAL          reduce using rule 80 (expresion -> CADENA .)
    ID              reduce using rule 80 (expresion -> CADENA .)
    MIENTRAS        reduce using rule 80 (expresion -> CADENA .)
    IF              reduce using rule 80 (expresion -> CADENA .)
    FUNC            reduce using rule 80 (expresion -> CADENA .)
    RETORNO         reduce using rule 80 (expresion -> CADENA .)
    BREAK           reduce using rule 80 (expresion -> CADENA .)
    CONTINUE        reduce using rule 80 (expresion -> CADENA .)
    FOR             reduce using rule 80 (expresion -> CADENA .)
    MAS             reduce using rule 80 (expresion -> CADENA .)
    MENOS           reduce using rule 80 (expresion -> CADENA .)
    DIVIDIDO        reduce using rule 80 (expresion -> CADENA .)
    MOD             reduce using rule 80 (expresion -> CADENA .)
    PUNTOS          reduce using rule 80 (expresion -> CADENA .)
    POTENCIA        shift and go to state 112

  ! POTENCIA        [ reduce using rule 80 (expresion -> CADENA .) ]


state 48

    (81) expresion -> CORIZQ . l_exp CORDER
    (82) expresion -> CORIZQ . l_array_bidimencional CORDER
    (46) l_exp -> . l_exp COMA expresion
    (47) l_exp -> . expresion
    (83) l_array_bidimencional -> . l_array_bidimencional COMA expresion
    (84) l_array_bidimencional -> . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    l_exp                          shift and go to state 113
    l_array_bidimencional          shift and go to state 114
    expresion                      shift and go to state 115
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 49

    (86) expresion -> UPPER . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 116


state 50

    (87) expresion -> LOWER . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 117


state 51

    (88) expresion -> LEN . PARIZQ expresion PARDER
    (85) len_inst -> LEN . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 118


state 52

    (89) expresion -> PARSE . PARIZQ tipo_var COMA expresion PARDER

    PARIZQ          shift and go to state 119


state 53

    (90) expresion -> TRUNC . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 120


state 54

    (91) expresion -> R_DECIMAL . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 121


state 55

    (92) expresion -> STRING . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 122


state 56

    (93) expresion -> TYPE . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 123


state 57

    (94) expresion -> PUSH . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 124


state 58

    (95) expresion -> POP . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 125


state 59

    (96) expresion -> llamada_funcion_instr .

    MAYQUE          reduce using rule 96 (expresion -> llamada_funcion_instr .)
    MENQUE          reduce using rule 96 (expresion -> llamada_funcion_instr .)
    IGUALQUE        reduce using rule 96 (expresion -> llamada_funcion_instr .)
    NIGUALQUE       reduce using rule 96 (expresion -> llamada_funcion_instr .)
    MENIGQUE        reduce using rule 96 (expresion -> llamada_funcion_instr .)
    MAYIGQUE        reduce using rule 96 (expresion -> llamada_funcion_instr .)
    POR             reduce using rule 96 (expresion -> llamada_funcion_instr .)
    PTCOMA          reduce using rule 96 (expresion -> llamada_funcion_instr .)
    PARDER          reduce using rule 96 (expresion -> llamada_funcion_instr .)
    COMA            reduce using rule 96 (expresion -> llamada_funcion_instr .)
    DOSPT           reduce using rule 96 (expresion -> llamada_funcion_instr .)
    CORDER          reduce using rule 96 (expresion -> llamada_funcion_instr .)
    AND             reduce using rule 96 (expresion -> llamada_funcion_instr .)
    OR              reduce using rule 96 (expresion -> llamada_funcion_instr .)
    IMPRIMIR        reduce using rule 96 (expresion -> llamada_funcion_instr .)
    IMPRIMIRSALTO   reduce using rule 96 (expresion -> llamada_funcion_instr .)
    LOCAL           reduce using rule 96 (expresion -> llamada_funcion_instr .)
    GLOBAL          reduce using rule 96 (expresion -> llamada_funcion_instr .)
    ID              reduce using rule 96 (expresion -> llamada_funcion_instr .)
    MIENTRAS        reduce using rule 96 (expresion -> llamada_funcion_instr .)
    IF              reduce using rule 96 (expresion -> llamada_funcion_instr .)
    FUNC            reduce using rule 96 (expresion -> llamada_funcion_instr .)
    RETORNO         reduce using rule 96 (expresion -> llamada_funcion_instr .)
    BREAK           reduce using rule 96 (expresion -> llamada_funcion_instr .)
    CONTINUE        reduce using rule 96 (expresion -> llamada_funcion_instr .)
    FOR             reduce using rule 96 (expresion -> llamada_funcion_instr .)
    MAS             reduce using rule 96 (expresion -> llamada_funcion_instr .)
    MENOS           reduce using rule 96 (expresion -> llamada_funcion_instr .)
    DIVIDIDO        reduce using rule 96 (expresion -> llamada_funcion_instr .)
    MOD             reduce using rule 96 (expresion -> llamada_funcion_instr .)
    POTENCIA        reduce using rule 96 (expresion -> llamada_funcion_instr .)
    PUNTOS          reduce using rule 96 (expresion -> llamada_funcion_instr .)


state 60

    (75) expresion_numerica -> ENTERO .

    MAS             reduce using rule 75 (expresion_numerica -> ENTERO .)
    MENOS           reduce using rule 75 (expresion_numerica -> ENTERO .)
    POR             reduce using rule 75 (expresion_numerica -> ENTERO .)
    DIVIDIDO        reduce using rule 75 (expresion_numerica -> ENTERO .)
    MOD             reduce using rule 75 (expresion_numerica -> ENTERO .)
    POTENCIA        reduce using rule 75 (expresion_numerica -> ENTERO .)
    MAYQUE          reduce using rule 75 (expresion_numerica -> ENTERO .)
    MENQUE          reduce using rule 75 (expresion_numerica -> ENTERO .)
    IGUALQUE        reduce using rule 75 (expresion_numerica -> ENTERO .)
    NIGUALQUE       reduce using rule 75 (expresion_numerica -> ENTERO .)
    MENIGQUE        reduce using rule 75 (expresion_numerica -> ENTERO .)
    MAYIGQUE        reduce using rule 75 (expresion_numerica -> ENTERO .)
    PTCOMA          reduce using rule 75 (expresion_numerica -> ENTERO .)
    PARDER          reduce using rule 75 (expresion_numerica -> ENTERO .)
    COMA            reduce using rule 75 (expresion_numerica -> ENTERO .)
    DOSPT           reduce using rule 75 (expresion_numerica -> ENTERO .)
    CORDER          reduce using rule 75 (expresion_numerica -> ENTERO .)
    AND             reduce using rule 75 (expresion_numerica -> ENTERO .)
    OR              reduce using rule 75 (expresion_numerica -> ENTERO .)
    IMPRIMIR        reduce using rule 75 (expresion_numerica -> ENTERO .)
    IMPRIMIRSALTO   reduce using rule 75 (expresion_numerica -> ENTERO .)
    LOCAL           reduce using rule 75 (expresion_numerica -> ENTERO .)
    GLOBAL          reduce using rule 75 (expresion_numerica -> ENTERO .)
    ID              reduce using rule 75 (expresion_numerica -> ENTERO .)
    MIENTRAS        reduce using rule 75 (expresion_numerica -> ENTERO .)
    IF              reduce using rule 75 (expresion_numerica -> ENTERO .)
    FUNC            reduce using rule 75 (expresion_numerica -> ENTERO .)
    RETORNO         reduce using rule 75 (expresion_numerica -> ENTERO .)
    BREAK           reduce using rule 75 (expresion_numerica -> ENTERO .)
    CONTINUE        reduce using rule 75 (expresion_numerica -> ENTERO .)
    FOR             reduce using rule 75 (expresion_numerica -> ENTERO .)
    PUNTOS          reduce using rule 75 (expresion_numerica -> ENTERO .)


state 61

    (98) expresion -> CARACTER .

    MAYQUE          reduce using rule 98 (expresion -> CARACTER .)
    MENQUE          reduce using rule 98 (expresion -> CARACTER .)
    IGUALQUE        reduce using rule 98 (expresion -> CARACTER .)
    NIGUALQUE       reduce using rule 98 (expresion -> CARACTER .)
    MENIGQUE        reduce using rule 98 (expresion -> CARACTER .)
    MAYIGQUE        reduce using rule 98 (expresion -> CARACTER .)
    POR             reduce using rule 98 (expresion -> CARACTER .)
    PTCOMA          reduce using rule 98 (expresion -> CARACTER .)
    PARDER          reduce using rule 98 (expresion -> CARACTER .)
    COMA            reduce using rule 98 (expresion -> CARACTER .)
    DOSPT           reduce using rule 98 (expresion -> CARACTER .)
    CORDER          reduce using rule 98 (expresion -> CARACTER .)
    AND             reduce using rule 98 (expresion -> CARACTER .)
    OR              reduce using rule 98 (expresion -> CARACTER .)
    IMPRIMIR        reduce using rule 98 (expresion -> CARACTER .)
    IMPRIMIRSALTO   reduce using rule 98 (expresion -> CARACTER .)
    LOCAL           reduce using rule 98 (expresion -> CARACTER .)
    GLOBAL          reduce using rule 98 (expresion -> CARACTER .)
    ID              reduce using rule 98 (expresion -> CARACTER .)
    MIENTRAS        reduce using rule 98 (expresion -> CARACTER .)
    IF              reduce using rule 98 (expresion -> CARACTER .)
    FUNC            reduce using rule 98 (expresion -> CARACTER .)
    RETORNO         reduce using rule 98 (expresion -> CARACTER .)
    BREAK           reduce using rule 98 (expresion -> CARACTER .)
    CONTINUE        reduce using rule 98 (expresion -> CARACTER .)
    FOR             reduce using rule 98 (expresion -> CARACTER .)
    MAS             reduce using rule 98 (expresion -> CARACTER .)
    MENOS           reduce using rule 98 (expresion -> CARACTER .)
    DIVIDIDO        reduce using rule 98 (expresion -> CARACTER .)
    MOD             reduce using rule 98 (expresion -> CARACTER .)
    POTENCIA        reduce using rule 98 (expresion -> CARACTER .)
    PUNTOS          reduce using rule 98 (expresion -> CARACTER .)


state 62

    (99) expresion -> NULO .

    MAYQUE          reduce using rule 99 (expresion -> NULO .)
    MENQUE          reduce using rule 99 (expresion -> NULO .)
    IGUALQUE        reduce using rule 99 (expresion -> NULO .)
    NIGUALQUE       reduce using rule 99 (expresion -> NULO .)
    MENIGQUE        reduce using rule 99 (expresion -> NULO .)
    MAYIGQUE        reduce using rule 99 (expresion -> NULO .)
    POR             reduce using rule 99 (expresion -> NULO .)
    PTCOMA          reduce using rule 99 (expresion -> NULO .)
    PARDER          reduce using rule 99 (expresion -> NULO .)
    COMA            reduce using rule 99 (expresion -> NULO .)
    DOSPT           reduce using rule 99 (expresion -> NULO .)
    CORDER          reduce using rule 99 (expresion -> NULO .)
    AND             reduce using rule 99 (expresion -> NULO .)
    OR              reduce using rule 99 (expresion -> NULO .)
    IMPRIMIR        reduce using rule 99 (expresion -> NULO .)
    IMPRIMIRSALTO   reduce using rule 99 (expresion -> NULO .)
    LOCAL           reduce using rule 99 (expresion -> NULO .)
    GLOBAL          reduce using rule 99 (expresion -> NULO .)
    ID              reduce using rule 99 (expresion -> NULO .)
    MIENTRAS        reduce using rule 99 (expresion -> NULO .)
    IF              reduce using rule 99 (expresion -> NULO .)
    FUNC            reduce using rule 99 (expresion -> NULO .)
    RETORNO         reduce using rule 99 (expresion -> NULO .)
    BREAK           reduce using rule 99 (expresion -> NULO .)
    CONTINUE        reduce using rule 99 (expresion -> NULO .)
    FOR             reduce using rule 99 (expresion -> NULO .)
    MAS             reduce using rule 99 (expresion -> NULO .)
    MENOS           reduce using rule 99 (expresion -> NULO .)
    DIVIDIDO        reduce using rule 99 (expresion -> NULO .)
    MOD             reduce using rule 99 (expresion -> NULO .)
    POTENCIA        reduce using rule 99 (expresion -> NULO .)
    PUNTOS          reduce using rule 99 (expresion -> NULO .)


state 63

    (100) expresion -> expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POTENCIA resolved as shift
    MAYQUE          reduce using rule 100 (expresion -> expresion_numerica .)
    MENQUE          reduce using rule 100 (expresion -> expresion_numerica .)
    IGUALQUE        reduce using rule 100 (expresion -> expresion_numerica .)
    NIGUALQUE       reduce using rule 100 (expresion -> expresion_numerica .)
    MENIGQUE        reduce using rule 100 (expresion -> expresion_numerica .)
    MAYIGQUE        reduce using rule 100 (expresion -> expresion_numerica .)
    PTCOMA          reduce using rule 100 (expresion -> expresion_numerica .)
    PARDER          reduce using rule 100 (expresion -> expresion_numerica .)
    COMA            reduce using rule 100 (expresion -> expresion_numerica .)
    DOSPT           reduce using rule 100 (expresion -> expresion_numerica .)
    CORDER          reduce using rule 100 (expresion -> expresion_numerica .)
    AND             reduce using rule 100 (expresion -> expresion_numerica .)
    OR              reduce using rule 100 (expresion -> expresion_numerica .)
    IMPRIMIR        reduce using rule 100 (expresion -> expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 100 (expresion -> expresion_numerica .)
    LOCAL           reduce using rule 100 (expresion -> expresion_numerica .)
    GLOBAL          reduce using rule 100 (expresion -> expresion_numerica .)
    ID              reduce using rule 100 (expresion -> expresion_numerica .)
    MIENTRAS        reduce using rule 100 (expresion -> expresion_numerica .)
    IF              reduce using rule 100 (expresion -> expresion_numerica .)
    FUNC            reduce using rule 100 (expresion -> expresion_numerica .)
    RETORNO         reduce using rule 100 (expresion -> expresion_numerica .)
    BREAK           reduce using rule 100 (expresion -> expresion_numerica .)
    CONTINUE        reduce using rule 100 (expresion -> expresion_numerica .)
    FOR             reduce using rule 100 (expresion -> expresion_numerica .)
    PUNTOS          reduce using rule 100 (expresion -> expresion_numerica .)
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131

  ! POR             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MAS             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MENOS           [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MOD             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! POTENCIA        [ reduce using rule 100 (expresion -> expresion_numerica .) ]


state 64

    (50) llamada_funcion_instr -> ID . PARIZQ PARDER
    (51) llamada_funcion_instr -> ID . PARIZQ l_exp PARDER
    (77) expresion_numerica -> ID .
    (78) expresion_numerica -> ID . CORIZQ expresion CORDER
    (79) expresion_numerica -> ID . CORIZQ expresion CORDER CORIZQ expresion CORDER

    PARIZQ          shift and go to state 39
    MAS             reduce using rule 77 (expresion_numerica -> ID .)
    MENOS           reduce using rule 77 (expresion_numerica -> ID .)
    POR             reduce using rule 77 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 77 (expresion_numerica -> ID .)
    MOD             reduce using rule 77 (expresion_numerica -> ID .)
    POTENCIA        reduce using rule 77 (expresion_numerica -> ID .)
    MAYQUE          reduce using rule 77 (expresion_numerica -> ID .)
    MENQUE          reduce using rule 77 (expresion_numerica -> ID .)
    IGUALQUE        reduce using rule 77 (expresion_numerica -> ID .)
    NIGUALQUE       reduce using rule 77 (expresion_numerica -> ID .)
    MENIGQUE        reduce using rule 77 (expresion_numerica -> ID .)
    MAYIGQUE        reduce using rule 77 (expresion_numerica -> ID .)
    PTCOMA          reduce using rule 77 (expresion_numerica -> ID .)
    PARDER          reduce using rule 77 (expresion_numerica -> ID .)
    COMA            reduce using rule 77 (expresion_numerica -> ID .)
    DOSPT           reduce using rule 77 (expresion_numerica -> ID .)
    CORDER          reduce using rule 77 (expresion_numerica -> ID .)
    AND             reduce using rule 77 (expresion_numerica -> ID .)
    OR              reduce using rule 77 (expresion_numerica -> ID .)
    IMPRIMIR        reduce using rule 77 (expresion_numerica -> ID .)
    IMPRIMIRSALTO   reduce using rule 77 (expresion_numerica -> ID .)
    LOCAL           reduce using rule 77 (expresion_numerica -> ID .)
    GLOBAL          reduce using rule 77 (expresion_numerica -> ID .)
    ID              reduce using rule 77 (expresion_numerica -> ID .)
    MIENTRAS        reduce using rule 77 (expresion_numerica -> ID .)
    IF              reduce using rule 77 (expresion_numerica -> ID .)
    FUNC            reduce using rule 77 (expresion_numerica -> ID .)
    RETORNO         reduce using rule 77 (expresion_numerica -> ID .)
    BREAK           reduce using rule 77 (expresion_numerica -> ID .)
    CONTINUE        reduce using rule 77 (expresion_numerica -> ID .)
    FOR             reduce using rule 77 (expresion_numerica -> ID .)
    PUNTOS          reduce using rule 77 (expresion_numerica -> ID .)
    CORIZQ          shift and go to state 132


state 65

    (72) expresion_numerica -> MENOS . expresion_numerica
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 133
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 66

    (59) expresion_numerica -> len_inst . MAS expresion_numerica
    (60) expresion_numerica -> len_inst . MENOS expresion_numerica
    (61) expresion_numerica -> len_inst . POR expresion_numerica
    (62) expresion_numerica -> len_inst . POR expresion
    (63) expresion_numerica -> len_inst . DIVIDIDO expresion_numerica

    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    POR             shift and go to state 140
    DIVIDIDO        shift and go to state 141


state 67

    (66) expresion_numerica -> LOG10 . PARIZQ expresion_numerica PARDER

    PARIZQ          shift and go to state 142


state 68

    (67) expresion_numerica -> LOG . PARIZQ expresion_numerica COMA expresion_numerica PARDER

    PARIZQ          shift and go to state 143


state 69

    (68) expresion_numerica -> SEN . PARIZQ expresion_numerica PARDER

    PARIZQ          shift and go to state 144


state 70

    (69) expresion_numerica -> COS . PARIZQ expresion_numerica PARDER

    PARIZQ          shift and go to state 145


state 71

    (70) expresion_numerica -> TAN . PARIZQ expresion_numerica PARDER

    PARIZQ          shift and go to state 146


state 72

    (71) expresion_numerica -> SQRT . PARIZQ expresion_numerica PARDER

    PARIZQ          shift and go to state 147


state 73

    (76) expresion_numerica -> DECIMAL .

    MAS             reduce using rule 76 (expresion_numerica -> DECIMAL .)
    MENOS           reduce using rule 76 (expresion_numerica -> DECIMAL .)
    POR             reduce using rule 76 (expresion_numerica -> DECIMAL .)
    DIVIDIDO        reduce using rule 76 (expresion_numerica -> DECIMAL .)
    MOD             reduce using rule 76 (expresion_numerica -> DECIMAL .)
    POTENCIA        reduce using rule 76 (expresion_numerica -> DECIMAL .)
    MAYQUE          reduce using rule 76 (expresion_numerica -> DECIMAL .)
    MENQUE          reduce using rule 76 (expresion_numerica -> DECIMAL .)
    IGUALQUE        reduce using rule 76 (expresion_numerica -> DECIMAL .)
    NIGUALQUE       reduce using rule 76 (expresion_numerica -> DECIMAL .)
    MENIGQUE        reduce using rule 76 (expresion_numerica -> DECIMAL .)
    MAYIGQUE        reduce using rule 76 (expresion_numerica -> DECIMAL .)
    PTCOMA          reduce using rule 76 (expresion_numerica -> DECIMAL .)
    PARDER          reduce using rule 76 (expresion_numerica -> DECIMAL .)
    COMA            reduce using rule 76 (expresion_numerica -> DECIMAL .)
    DOSPT           reduce using rule 76 (expresion_numerica -> DECIMAL .)
    CORDER          reduce using rule 76 (expresion_numerica -> DECIMAL .)
    AND             reduce using rule 76 (expresion_numerica -> DECIMAL .)
    OR              reduce using rule 76 (expresion_numerica -> DECIMAL .)
    IMPRIMIR        reduce using rule 76 (expresion_numerica -> DECIMAL .)
    IMPRIMIRSALTO   reduce using rule 76 (expresion_numerica -> DECIMAL .)
    LOCAL           reduce using rule 76 (expresion_numerica -> DECIMAL .)
    GLOBAL          reduce using rule 76 (expresion_numerica -> DECIMAL .)
    ID              reduce using rule 76 (expresion_numerica -> DECIMAL .)
    MIENTRAS        reduce using rule 76 (expresion_numerica -> DECIMAL .)
    IF              reduce using rule 76 (expresion_numerica -> DECIMAL .)
    FUNC            reduce using rule 76 (expresion_numerica -> DECIMAL .)
    RETORNO         reduce using rule 76 (expresion_numerica -> DECIMAL .)
    BREAK           reduce using rule 76 (expresion_numerica -> DECIMAL .)
    CONTINUE        reduce using rule 76 (expresion_numerica -> DECIMAL .)
    FOR             reduce using rule 76 (expresion_numerica -> DECIMAL .)
    PUNTOS          reduce using rule 76 (expresion_numerica -> DECIMAL .)


state 74

    (39) if_instr -> IF expresion_logica . instrucciones END PTCOMA
    (40) if_else_instr -> IF expresion_logica . instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> IF expresion_logica . instrucciones
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool
    (101) expresion -> expresion_logica .
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    AND             shift and go to state 95
    OR              shift and go to state 96
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    POR             reduce using rule 101 (expresion -> expresion_logica .)
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instrucciones                  shift and go to state 148
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 75

    (42) lista_elif -> lista_elif ELSEIF . expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (44) lista_elif -> lista_elif ELSEIF . expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> lista_elif ELSEIF . expresion_logica instrucciones
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER

    NOT             shift and go to state 41
    PARIZQ          shift and go to state 43
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73

    expresion_logica               shift and go to state 149
    expresion_bool                 shift and go to state 42
    expresion                      shift and go to state 44
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    len_inst                       shift and go to state 66

state 76

    (48) funcion_instr -> FUNC ID . PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> FUNC ID . PARIZQ parametros PARDER instrucciones END PTCOMA

    PARIZQ          shift and go to state 150


state 77

    (21) retorno_inst -> RETORNO expresion . PTCOMA
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PTCOMA          shift and go to state 151
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 78

    (22) retorno_inst -> RETORNO PTCOMA .

    IMPRIMIR        reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    LOCAL           reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    GLOBAL          reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    ID              reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    MIENTRAS        reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    IF              reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    FUNC            reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    RETORNO         reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    BREAK           reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    CONTINUE        reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    FOR             reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    $end            reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    END             reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    ELSE            reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)
    ELSEIF          reduce using rule 22 (retorno_inst -> RETORNO PTCOMA .)


state 79

    (74) expresion -> PARIZQ . expresion PARDER
    (73) expresion_numerica -> PARIZQ . expresion_numerica PARDER
    (115) expresion_logica -> PARIZQ . expresion_logica PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 104
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 152
    expresion_numerica             shift and go to state 103
    expresion_logica               shift and go to state 153
    llamada_funcion_instr          shift and go to state 59
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 80

    (101) expresion -> expresion_logica .
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PTCOMA          reduce using rule 101 (expresion -> expresion_logica .)
    POR             reduce using rule 101 (expresion -> expresion_logica .)
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    PARDER          reduce using rule 101 (expresion -> expresion_logica .)
    COMA            reduce using rule 101 (expresion -> expresion_logica .)
    DOSPT           reduce using rule 101 (expresion -> expresion_logica .)
    CORDER          reduce using rule 101 (expresion -> expresion_logica .)
    IMPRIMIR        reduce using rule 101 (expresion -> expresion_logica .)
    IMPRIMIRSALTO   reduce using rule 101 (expresion -> expresion_logica .)
    LOCAL           reduce using rule 101 (expresion -> expresion_logica .)
    GLOBAL          reduce using rule 101 (expresion -> expresion_logica .)
    ID              reduce using rule 101 (expresion -> expresion_logica .)
    MIENTRAS        reduce using rule 101 (expresion -> expresion_logica .)
    IF              reduce using rule 101 (expresion -> expresion_logica .)
    FUNC            reduce using rule 101 (expresion -> expresion_logica .)
    RETORNO         reduce using rule 101 (expresion -> expresion_logica .)
    BREAK           reduce using rule 101 (expresion -> expresion_logica .)
    CONTINUE        reduce using rule 101 (expresion -> expresion_logica .)
    FOR             reduce using rule 101 (expresion -> expresion_logica .)
    MAS             reduce using rule 101 (expresion -> expresion_logica .)
    MENOS           reduce using rule 101 (expresion -> expresion_logica .)
    DIVIDIDO        reduce using rule 101 (expresion -> expresion_logica .)
    MOD             reduce using rule 101 (expresion -> expresion_logica .)
    POTENCIA        reduce using rule 101 (expresion -> expresion_logica .)
    PUNTOS          reduce using rule 101 (expresion -> expresion_logica .)
    AND             shift and go to state 95
    OR              shift and go to state 96

  ! AND             [ reduce using rule 101 (expresion -> expresion_logica .) ]
  ! OR              [ reduce using rule 101 (expresion -> expresion_logica .) ]


state 81

    (104) expresion_numerica -> expresion_bool .
    (108) expresion_logica -> expresion_bool . AND expresion_bool
    (109) expresion_logica -> expresion_bool . OR expresion_bool
    (113) expresion_logica -> expresion_bool . AND expresion_logica
    (114) expresion_logica -> expresion_bool . OR expresion_logica

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MAS             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENOS           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POR             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    DIVIDIDO        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MOD             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POTENCIA        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    PTCOMA          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IGUALQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    NIGUALQUE       reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    PARDER          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    COMA            reduce using rule 104 (expresion_numerica -> expresion_bool .)
    DOSPT           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    CORDER          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IMPRIMIR        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IMPRIMIRSALTO   reduce using rule 104 (expresion_numerica -> expresion_bool .)
    LOCAL           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    GLOBAL          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    ID              reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MIENTRAS        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IF              reduce using rule 104 (expresion_numerica -> expresion_bool .)
    FUNC            reduce using rule 104 (expresion_numerica -> expresion_bool .)
    RETORNO         reduce using rule 104 (expresion_numerica -> expresion_bool .)
    BREAK           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    CONTINUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    FOR             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    PUNTOS          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    AND             shift and go to state 99
    OR              shift and go to state 100

  ! AND             [ reduce using rule 104 (expresion_numerica -> expresion_bool .) ]
  ! OR              [ reduce using rule 104 (expresion_numerica -> expresion_bool .) ]


state 82

    (23) break_inst -> BREAK PTCOMA .

    IMPRIMIR        reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    LOCAL           reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    GLOBAL          reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    ID              reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    MIENTRAS        reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    IF              reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    FUNC            reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    RETORNO         reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    BREAK           reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    CONTINUE        reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    FOR             reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    $end            reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    END             reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    ELSE            reduce using rule 23 (break_inst -> BREAK PTCOMA .)
    ELSEIF          reduce using rule 23 (break_inst -> BREAK PTCOMA .)


state 83

    (24) continue_inst -> CONTINUE PTCOMA .

    IMPRIMIR        reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    LOCAL           reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    GLOBAL          reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    ID              reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    MIENTRAS        reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    IF              reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    FUNC            reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    RETORNO         reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    BREAK           reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    CONTINUE        reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    FOR             reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    $end            reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    END             reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    ELSE            reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)
    ELSEIF          reduce using rule 24 (continue_inst -> CONTINUE PTCOMA .)


state 84

    (37) for_instr -> FOR ID . IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> FOR ID . IN expresion instrucciones END PTCOMA

    IN              shift and go to state 154


state 85

    (17) imprimir_instr -> IMPRIMIR PARIZQ expresion . PARDER PTCOMA
    (122) expresion -> expresion . POR expresion
    (47) l_exp -> expresion .
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

  ! shift/reduce conflict for PARDER resolved as shift
    PARDER          shift and go to state 155
    POR             shift and go to state 111
    COMA            reduce using rule 47 (l_exp -> expresion .)
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110

  ! PARDER          [ reduce using rule 47 (l_exp -> expresion .) ]


state 86

    (19) imprimir_instr -> IMPRIMIR PARIZQ l_exp . PARDER PTCOMA
    (46) l_exp -> l_exp . COMA expresion

    PARDER          shift and go to state 156
    COMA            shift and go to state 157


state 87

    (18) imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion . PARDER PTCOMA
    (122) expresion -> expresion . POR expresion
    (47) l_exp -> expresion .
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

  ! shift/reduce conflict for PARDER resolved as shift
    PARDER          shift and go to state 158
    POR             shift and go to state 111
    COMA            reduce using rule 47 (l_exp -> expresion .)
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110

  ! PARDER          [ reduce using rule 47 (l_exp -> expresion .) ]


state 88

    (20) imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp . PARDER PTCOMA
    (46) l_exp -> l_exp . COMA expresion

    PARDER          shift and go to state 159
    COMA            shift and go to state 157


state 89

    (27) asignacion_instr -> ID IGUAL expresion . PTCOMA
    (28) asignacion_instr -> ID IGUAL expresion . DOSPT tipo_var PTCOMA
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PTCOMA          shift and go to state 160
    DOSPT           shift and go to state 161
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 90

    (29) asignacion_instr -> ID CORIZQ expresion . CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> ID CORIZQ expresion . CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    CORDER          shift and go to state 162
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 91

    (50) llamada_funcion_instr -> ID PARIZQ PARDER .

    PTCOMA          reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MAYQUE          reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MENQUE          reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    IGUALQUE        reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    NIGUALQUE       reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MENIGQUE        reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MAYIGQUE        reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    POR             reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    PARDER          reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    COMA            reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    DOSPT           reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    CORDER          reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    AND             reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    OR              reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    IMPRIMIR        reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    IMPRIMIRSALTO   reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    LOCAL           reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    GLOBAL          reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    ID              reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MIENTRAS        reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    IF              reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    FUNC            reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    RETORNO         reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    BREAK           reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    CONTINUE        reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    FOR             reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MAS             reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MENOS           reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MOD             reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    POTENCIA        reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    PUNTOS          reduce using rule 50 (llamada_funcion_instr -> ID PARIZQ PARDER .)


state 92

    (51) llamada_funcion_instr -> ID PARIZQ l_exp . PARDER
    (46) l_exp -> l_exp . COMA expresion

    PARDER          shift and go to state 163
    COMA            shift and go to state 157


state 93

    (47) l_exp -> expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          reduce using rule 47 (l_exp -> expresion .)
    COMA            reduce using rule 47 (l_exp -> expresion .)
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 94

    (36) mientras_instr -> MIENTRAS expresion_logica instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    END             shift and go to state 164
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 95

    (105) expresion_logica -> expresion_logica AND . expresion_logica
    (111) expresion_logica -> expresion_logica AND . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER

    NOT             shift and go to state 41
    PARIZQ          shift and go to state 43
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73

    expresion_logica               shift and go to state 165
    expresion_bool                 shift and go to state 166
    expresion                      shift and go to state 44
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    len_inst                       shift and go to state 66

state 96

    (106) expresion_logica -> expresion_logica OR . expresion_logica
    (112) expresion_logica -> expresion_logica OR . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER

    NOT             shift and go to state 41
    PARIZQ          shift and go to state 43
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73

    expresion_logica               shift and go to state 167
    expresion_bool                 shift and go to state 168
    expresion                      shift and go to state 44
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    len_inst                       shift and go to state 66

state 97

    (107) expresion_logica -> NOT expresion_logica .
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool
    (101) expresion -> expresion_logica .

  ! reduce/reduce conflict for MAYQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MENQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for POR resolved using rule 101 (expresion -> expresion_logica .)
    AND             reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    OR              reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    IMPRIMIR        reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    IMPRIMIRSALTO   reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    LOCAL           reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    GLOBAL          reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    ID              reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    MIENTRAS        reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    IF              reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    FUNC            reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    RETORNO         reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    BREAK           reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    CONTINUE        reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    FOR             reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    PTCOMA          reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    PARDER          reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    COMA            reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    DOSPT           reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    CORDER          reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    MAS             reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    MENOS           reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    DIVIDIDO        reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    MOD             reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    POTENCIA        reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    PUNTOS          reduce using rule 107 (expresion_logica -> NOT expresion_logica .)
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    POR             reduce using rule 101 (expresion -> expresion_logica .)

  ! MAYQUE          [ reduce using rule 107 (expresion_logica -> NOT expresion_logica .) ]
  ! MENQUE          [ reduce using rule 107 (expresion_logica -> NOT expresion_logica .) ]
  ! IGUALQUE        [ reduce using rule 107 (expresion_logica -> NOT expresion_logica .) ]
  ! NIGUALQUE       [ reduce using rule 107 (expresion_logica -> NOT expresion_logica .) ]
  ! MENIGQUE        [ reduce using rule 107 (expresion_logica -> NOT expresion_logica .) ]
  ! MAYIGQUE        [ reduce using rule 107 (expresion_logica -> NOT expresion_logica .) ]
  ! POR             [ reduce using rule 107 (expresion_logica -> NOT expresion_logica .) ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 98

    (110) expresion_logica -> NOT expresion_bool .
    (108) expresion_logica -> expresion_bool . AND expresion_bool
    (109) expresion_logica -> expresion_bool . OR expresion_bool
    (113) expresion_logica -> expresion_bool . AND expresion_logica
    (114) expresion_logica -> expresion_bool . OR expresion_logica
    (104) expresion_numerica -> expresion_bool .

  ! reduce/reduce conflict for MAS resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENOS resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for POR resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for DIVIDIDO resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MOD resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MAYQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
    AND             reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    OR              reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    IMPRIMIR        reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    IMPRIMIRSALTO   reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    LOCAL           reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    GLOBAL          reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    ID              reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    MIENTRAS        reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    IF              reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    FUNC            reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    RETORNO         reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    BREAK           reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    CONTINUE        reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    FOR             reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    PTCOMA          reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    PARDER          reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    COMA            reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    DOSPT           reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    CORDER          reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    PUNTOS          reduce using rule 110 (expresion_logica -> NOT expresion_bool .)
    MAS             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENOS           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POR             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    DIVIDIDO        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MOD             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POTENCIA        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IGUALQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    NIGUALQUE       reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)

  ! MAYQUE          [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! MENQUE          [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! IGUALQUE        [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! NIGUALQUE       [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! MENIGQUE        [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! MAYIGQUE        [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! POR             [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! MAS             [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! MENOS           [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! DIVIDIDO        [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! MOD             [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! POTENCIA        [ reduce using rule 110 (expresion_logica -> NOT expresion_bool .) ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]


state 99

    (108) expresion_logica -> expresion_bool AND . expresion_bool
    (113) expresion_logica -> expresion_bool AND . expresion_logica
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER

    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46
    NOT             shift and go to state 41
    PARIZQ          shift and go to state 43
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73

    expresion_bool                 shift and go to state 169
    expresion_logica               shift and go to state 170
    expresion                      shift and go to state 44
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    len_inst                       shift and go to state 66

state 100

    (109) expresion_logica -> expresion_bool OR . expresion_bool
    (114) expresion_logica -> expresion_bool OR . expresion_logica
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER

    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46
    NOT             shift and go to state 41
    PARIZQ          shift and go to state 43
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73

    expresion_bool                 shift and go to state 171
    expresion_logica               shift and go to state 172
    expresion                      shift and go to state 44
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    len_inst                       shift and go to state 66

state 101

    (115) expresion_logica -> PARIZQ expresion_logica . PARDER
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool
    (101) expresion -> expresion_logica .

  ! shift/reduce conflict for PARDER resolved as shift
    PARDER          shift and go to state 173
    AND             shift and go to state 95
    OR              shift and go to state 96
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    POR             reduce using rule 101 (expresion -> expresion_logica .)

  ! PARDER          [ reduce using rule 101 (expresion -> expresion_logica .) ]


state 102

    (74) expresion -> PARIZQ expresion . PARDER
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion
    (122) expresion -> expresion . POR expresion

    PARDER          shift and go to state 174
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110
    POR             shift and go to state 111


state 103

    (73) expresion_numerica -> PARIZQ expresion_numerica . PARDER
    (100) expresion -> expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

  ! shift/reduce conflict for PARDER resolved as shift
  ! shift/reduce conflict for POR resolved as shift
    PARDER          shift and go to state 175
    MAYQUE          reduce using rule 100 (expresion -> expresion_numerica .)
    MENQUE          reduce using rule 100 (expresion -> expresion_numerica .)
    IGUALQUE        reduce using rule 100 (expresion -> expresion_numerica .)
    NIGUALQUE       reduce using rule 100 (expresion -> expresion_numerica .)
    MENIGQUE        reduce using rule 100 (expresion -> expresion_numerica .)
    MAYIGQUE        reduce using rule 100 (expresion -> expresion_numerica .)
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131

  ! PARDER          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! POR             [ reduce using rule 100 (expresion -> expresion_numerica .) ]


state 104

    (77) expresion_numerica -> ID .
    (78) expresion_numerica -> ID . CORIZQ expresion CORDER
    (79) expresion_numerica -> ID . CORIZQ expresion CORDER CORIZQ expresion CORDER
    (50) llamada_funcion_instr -> ID . PARIZQ PARDER
    (51) llamada_funcion_instr -> ID . PARIZQ l_exp PARDER

    PARDER          reduce using rule 77 (expresion_numerica -> ID .)
    MAS             reduce using rule 77 (expresion_numerica -> ID .)
    MENOS           reduce using rule 77 (expresion_numerica -> ID .)
    POR             reduce using rule 77 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 77 (expresion_numerica -> ID .)
    MOD             reduce using rule 77 (expresion_numerica -> ID .)
    POTENCIA        reduce using rule 77 (expresion_numerica -> ID .)
    MAYQUE          reduce using rule 77 (expresion_numerica -> ID .)
    MENQUE          reduce using rule 77 (expresion_numerica -> ID .)
    IGUALQUE        reduce using rule 77 (expresion_numerica -> ID .)
    NIGUALQUE       reduce using rule 77 (expresion_numerica -> ID .)
    MENIGQUE        reduce using rule 77 (expresion_numerica -> ID .)
    MAYIGQUE        reduce using rule 77 (expresion_numerica -> ID .)
    AND             reduce using rule 77 (expresion_numerica -> ID .)
    OR              reduce using rule 77 (expresion_numerica -> ID .)
    IMPRIMIR        reduce using rule 77 (expresion_numerica -> ID .)
    IMPRIMIRSALTO   reduce using rule 77 (expresion_numerica -> ID .)
    LOCAL           reduce using rule 77 (expresion_numerica -> ID .)
    GLOBAL          reduce using rule 77 (expresion_numerica -> ID .)
    ID              reduce using rule 77 (expresion_numerica -> ID .)
    MIENTRAS        reduce using rule 77 (expresion_numerica -> ID .)
    IF              reduce using rule 77 (expresion_numerica -> ID .)
    FUNC            reduce using rule 77 (expresion_numerica -> ID .)
    RETORNO         reduce using rule 77 (expresion_numerica -> ID .)
    BREAK           reduce using rule 77 (expresion_numerica -> ID .)
    CONTINUE        reduce using rule 77 (expresion_numerica -> ID .)
    FOR             reduce using rule 77 (expresion_numerica -> ID .)
    PTCOMA          reduce using rule 77 (expresion_numerica -> ID .)
    COMA            reduce using rule 77 (expresion_numerica -> ID .)
    DOSPT           reduce using rule 77 (expresion_numerica -> ID .)
    CORDER          reduce using rule 77 (expresion_numerica -> ID .)
    PUNTOS          reduce using rule 77 (expresion_numerica -> ID .)
    CORIZQ          shift and go to state 132
    PARIZQ          shift and go to state 39


state 105

    (116) expresion_logica -> expresion MAYQUE . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 176
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 106

    (117) expresion_logica -> expresion MENQUE . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 177
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 107

    (118) expresion_logica -> expresion IGUALQUE . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 178
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 108

    (119) expresion_logica -> expresion NIGUALQUE . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 179
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 109

    (120) expresion_logica -> expresion MENIGQUE . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 180
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 110

    (121) expresion_logica -> expresion MAYIGQUE . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 181
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 111

    (122) expresion -> expresion POR . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 182
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 112

    (97) expresion -> CADENA POTENCIA . ENTERO

    ENTERO          shift and go to state 183


state 113

    (81) expresion -> CORIZQ l_exp . CORDER
    (46) l_exp -> l_exp . COMA expresion

    CORDER          shift and go to state 184
    COMA            shift and go to state 157


state 114

    (82) expresion -> CORIZQ l_array_bidimencional . CORDER
    (83) l_array_bidimencional -> l_array_bidimencional . COMA expresion

    CORDER          shift and go to state 185
    COMA            shift and go to state 186


state 115

    (47) l_exp -> expresion .
    (84) l_array_bidimencional -> expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

  ! reduce/reduce conflict for CORDER resolved using rule 47 (l_exp -> expresion .)
  ! reduce/reduce conflict for COMA resolved using rule 47 (l_exp -> expresion .)
    CORDER          reduce using rule 47 (l_exp -> expresion .)
    COMA            reduce using rule 47 (l_exp -> expresion .)
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110

  ! CORDER          [ reduce using rule 84 (l_array_bidimencional -> expresion .) ]
  ! COMA            [ reduce using rule 84 (l_array_bidimencional -> expresion .) ]


state 116

    (86) expresion -> UPPER PARIZQ . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 187
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 117

    (87) expresion -> LOWER PARIZQ . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 188
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 118

    (88) expresion -> LEN PARIZQ . expresion PARDER
    (85) len_inst -> LEN PARIZQ . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 189
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 119

    (89) expresion -> PARSE PARIZQ . tipo_var COMA expresion PARDER
    (31) tipo_var -> . ENTERO64
    (32) tipo_var -> . DECIMAL64
    (33) tipo_var -> . BOOLEANO
    (34) tipo_var -> . CHAR
    (35) tipo_var -> . STRING

    ENTERO64        shift and go to state 191
    DECIMAL64       shift and go to state 192
    BOOLEANO        shift and go to state 193
    CHAR            shift and go to state 194
    STRING          shift and go to state 195

    tipo_var                       shift and go to state 190

state 120

    (90) expresion -> TRUNC PARIZQ . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 196
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 121

    (91) expresion -> R_DECIMAL PARIZQ . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 197
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 122

    (92) expresion -> STRING PARIZQ . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 198
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 123

    (93) expresion -> TYPE PARIZQ . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 199
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 124

    (94) expresion -> PUSH PARIZQ . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 200
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 125

    (95) expresion -> POP PARIZQ . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 201
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 126

    (54) expresion_numerica -> expresion_numerica MAS . expresion_numerica
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 202
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 127

    (55) expresion_numerica -> expresion_numerica MENOS . expresion_numerica
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 203
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 128

    (56) expresion_numerica -> expresion_numerica POR . expresion_numerica
    (57) expresion_numerica -> expresion_numerica POR . expresion
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 206
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 104
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46
    NOT             shift and go to state 41

    expresion_numerica             shift and go to state 204
    expresion                      shift and go to state 205
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81
    llamada_funcion_instr          shift and go to state 59
    expresion_logica               shift and go to state 80

state 129

    (58) expresion_numerica -> expresion_numerica DIVIDIDO . expresion_numerica
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 207
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 130

    (64) expresion_numerica -> expresion_numerica MOD . expresion_numerica
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 208
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 131

    (65) expresion_numerica -> expresion_numerica POTENCIA . expresion_numerica
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 209
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 132

    (78) expresion_numerica -> ID CORIZQ . expresion CORDER
    (79) expresion_numerica -> ID CORIZQ . expresion CORDER CORIZQ expresion CORDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 210
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 133

    (72) expresion_numerica -> MENOS expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    MAS             reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    MENOS           reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    POR             reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    DIVIDIDO        reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    MOD             reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    POTENCIA        reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    MAYQUE          reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    MENQUE          reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    MENIGQUE        reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    MAYIGQUE        reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    PTCOMA          reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    PARDER          reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    COMA            reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    DOSPT           reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    CORDER          reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    AND             reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    OR              reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    IMPRIMIR        reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    LOCAL           reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    GLOBAL          reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    ID              reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    IF              reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    FUNC            reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    RETORNO         reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    BREAK           reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    CONTINUE        reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    FOR             reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)
    PUNTOS          reduce using rule 72 (expresion_numerica -> MENOS expresion_numerica .)

  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]
  ! POR             [ shift and go to state 128 ]
  ! DIVIDIDO        [ shift and go to state 129 ]
  ! MOD             [ shift and go to state 130 ]
  ! POTENCIA        [ shift and go to state 131 ]


state 134

    (73) expresion_numerica -> PARIZQ . expresion_numerica PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 211
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 135

    (77) expresion_numerica -> ID .
    (78) expresion_numerica -> ID . CORIZQ expresion CORDER
    (79) expresion_numerica -> ID . CORIZQ expresion CORDER CORIZQ expresion CORDER

    AND             reduce using rule 77 (expresion_numerica -> ID .)
    OR              reduce using rule 77 (expresion_numerica -> ID .)
    IMPRIMIR        reduce using rule 77 (expresion_numerica -> ID .)
    IMPRIMIRSALTO   reduce using rule 77 (expresion_numerica -> ID .)
    LOCAL           reduce using rule 77 (expresion_numerica -> ID .)
    GLOBAL          reduce using rule 77 (expresion_numerica -> ID .)
    ID              reduce using rule 77 (expresion_numerica -> ID .)
    MIENTRAS        reduce using rule 77 (expresion_numerica -> ID .)
    IF              reduce using rule 77 (expresion_numerica -> ID .)
    FUNC            reduce using rule 77 (expresion_numerica -> ID .)
    RETORNO         reduce using rule 77 (expresion_numerica -> ID .)
    BREAK           reduce using rule 77 (expresion_numerica -> ID .)
    CONTINUE        reduce using rule 77 (expresion_numerica -> ID .)
    FOR             reduce using rule 77 (expresion_numerica -> ID .)
    MAYQUE          reduce using rule 77 (expresion_numerica -> ID .)
    MENQUE          reduce using rule 77 (expresion_numerica -> ID .)
    IGUALQUE        reduce using rule 77 (expresion_numerica -> ID .)
    NIGUALQUE       reduce using rule 77 (expresion_numerica -> ID .)
    MENIGQUE        reduce using rule 77 (expresion_numerica -> ID .)
    MAYIGQUE        reduce using rule 77 (expresion_numerica -> ID .)
    POR             reduce using rule 77 (expresion_numerica -> ID .)
    PTCOMA          reduce using rule 77 (expresion_numerica -> ID .)
    PARDER          reduce using rule 77 (expresion_numerica -> ID .)
    COMA            reduce using rule 77 (expresion_numerica -> ID .)
    DOSPT           reduce using rule 77 (expresion_numerica -> ID .)
    CORDER          reduce using rule 77 (expresion_numerica -> ID .)
    MAS             reduce using rule 77 (expresion_numerica -> ID .)
    MENOS           reduce using rule 77 (expresion_numerica -> ID .)
    DIVIDIDO        reduce using rule 77 (expresion_numerica -> ID .)
    MOD             reduce using rule 77 (expresion_numerica -> ID .)
    POTENCIA        reduce using rule 77 (expresion_numerica -> ID .)
    PUNTOS          reduce using rule 77 (expresion_numerica -> ID .)
    CORIZQ          shift and go to state 132


state 136

    (104) expresion_numerica -> expresion_bool .

    AND             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    OR              reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IMPRIMIR        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IMPRIMIRSALTO   reduce using rule 104 (expresion_numerica -> expresion_bool .)
    LOCAL           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    GLOBAL          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    ID              reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MIENTRAS        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IF              reduce using rule 104 (expresion_numerica -> expresion_bool .)
    FUNC            reduce using rule 104 (expresion_numerica -> expresion_bool .)
    RETORNO         reduce using rule 104 (expresion_numerica -> expresion_bool .)
    BREAK           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    CONTINUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    FOR             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IGUALQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    NIGUALQUE       reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POR             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    PTCOMA          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    PARDER          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    COMA            reduce using rule 104 (expresion_numerica -> expresion_bool .)
    DOSPT           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    CORDER          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAS             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENOS           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    DIVIDIDO        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MOD             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POTENCIA        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    PUNTOS          reduce using rule 104 (expresion_numerica -> expresion_bool .)


state 137

    (85) len_inst -> LEN . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 212


state 138

    (59) expresion_numerica -> len_inst MAS . expresion_numerica
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    len_inst                       shift and go to state 66
    expresion_numerica             shift and go to state 213
    expresion_bool                 shift and go to state 136

state 139

    (60) expresion_numerica -> len_inst MENOS . expresion_numerica
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    len_inst                       shift and go to state 66
    expresion_numerica             shift and go to state 214
    expresion_bool                 shift and go to state 136

state 140

    (61) expresion_numerica -> len_inst POR . expresion_numerica
    (62) expresion_numerica -> len_inst POR . expresion
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 206
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 104
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46
    NOT             shift and go to state 41

    len_inst                       shift and go to state 66
    expresion_numerica             shift and go to state 215
    expresion                      shift and go to state 216
    expresion_bool                 shift and go to state 81
    llamada_funcion_instr          shift and go to state 59
    expresion_logica               shift and go to state 80

state 141

    (63) expresion_numerica -> len_inst DIVIDIDO . expresion_numerica
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    len_inst                       shift and go to state 66
    expresion_numerica             shift and go to state 217
    expresion_bool                 shift and go to state 136

state 142

    (66) expresion_numerica -> LOG10 PARIZQ . expresion_numerica PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 218
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 143

    (67) expresion_numerica -> LOG PARIZQ . expresion_numerica COMA expresion_numerica PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 219
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 144

    (68) expresion_numerica -> SEN PARIZQ . expresion_numerica PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 220
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 145

    (69) expresion_numerica -> COS PARIZQ . expresion_numerica PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 221
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 146

    (70) expresion_numerica -> TAN PARIZQ . expresion_numerica PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 222
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 147

    (71) expresion_numerica -> SQRT PARIZQ . expresion_numerica PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 223
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 148

    (39) if_instr -> IF expresion_logica instrucciones . END PTCOMA
    (40) if_else_instr -> IF expresion_logica instrucciones . ELSE instrucciones END PTCOMA
    (43) lista_elif -> IF expresion_logica instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for IMPRIMIRSALTO resolved as shift
  ! shift/reduce conflict for LOCAL resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for RETORNO resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    END             shift and go to state 224
    ELSE            shift and go to state 225
    ELSEIF          reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .)
    $end            reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .)
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

  ! IMPRIMIR        [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! IMPRIMIRSALTO   [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! LOCAL           [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! GLOBAL          [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! ID              [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! MIENTRAS        [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! IF              [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! FUNC            [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! RETORNO         [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! BREAK           [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! CONTINUE        [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! FOR             [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! END             [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]
  ! ELSE            [ reduce using rule 43 (lista_elif -> IF expresion_logica instrucciones .) ]

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 149

    (42) lista_elif -> lista_elif ELSEIF expresion_logica . instrucciones ELSE instrucciones END PTCOMA
    (44) lista_elif -> lista_elif ELSEIF expresion_logica . instrucciones END PTCOMA
    (45) lista_elif -> lista_elif ELSEIF expresion_logica . instrucciones
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool
    (101) expresion -> expresion_logica .
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    AND             shift and go to state 95
    OR              shift and go to state 96
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    POR             reduce using rule 101 (expresion -> expresion_logica .)
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    lista_elif                     shift and go to state 24
    instrucciones                  shift and go to state 226
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16

state 150

    (48) funcion_instr -> FUNC ID PARIZQ . PARDER instrucciones END PTCOMA
    (49) funcion_instr -> FUNC ID PARIZQ . parametros PARDER instrucciones END PTCOMA
    (52) parametros -> . parametros COMA ID
    (53) parametros -> . ID

    PARDER          shift and go to state 228
    ID              shift and go to state 227

    parametros                     shift and go to state 229

state 151

    (21) retorno_inst -> RETORNO expresion PTCOMA .

    IMPRIMIR        reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    LOCAL           reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    GLOBAL          reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    ID              reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    MIENTRAS        reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    IF              reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    FUNC            reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    RETORNO         reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    BREAK           reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    CONTINUE        reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    FOR             reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    $end            reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    END             reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    ELSE            reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)
    ELSEIF          reduce using rule 21 (retorno_inst -> RETORNO expresion PTCOMA .)


state 152

    (74) expresion -> PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 174
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 153

    (115) expresion_logica -> PARIZQ expresion_logica . PARDER
    (101) expresion -> expresion_logica .
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool

  ! shift/reduce conflict for PARDER resolved as shift
    PARDER          shift and go to state 173
    POR             reduce using rule 101 (expresion -> expresion_logica .)
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    AND             shift and go to state 95
    OR              shift and go to state 96

  ! PARDER          [ reduce using rule 101 (expresion -> expresion_logica .) ]


state 154

    (37) for_instr -> FOR ID IN . expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> FOR ID IN . expresion instrucciones END PTCOMA
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 230
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 155

    (17) imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER . PTCOMA

    PTCOMA          shift and go to state 231


state 156

    (19) imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER . PTCOMA

    PTCOMA          shift and go to state 232


state 157

    (46) l_exp -> l_exp COMA . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 233
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 158

    (18) imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER . PTCOMA

    PTCOMA          shift and go to state 234


state 159

    (20) imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER . PTCOMA

    PTCOMA          shift and go to state 235


state 160

    (27) asignacion_instr -> ID IGUAL expresion PTCOMA .

    IMPRIMIR        reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    LOCAL           reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    GLOBAL          reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    ID              reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    MIENTRAS        reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    IF              reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    FUNC            reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    RETORNO         reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    BREAK           reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    CONTINUE        reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    FOR             reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    $end            reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    END             reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    ELSE            reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    ELSEIF          reduce using rule 27 (asignacion_instr -> ID IGUAL expresion PTCOMA .)


state 161

    (28) asignacion_instr -> ID IGUAL expresion DOSPT . tipo_var PTCOMA
    (31) tipo_var -> . ENTERO64
    (32) tipo_var -> . DECIMAL64
    (33) tipo_var -> . BOOLEANO
    (34) tipo_var -> . CHAR
    (35) tipo_var -> . STRING

    ENTERO64        shift and go to state 191
    DECIMAL64       shift and go to state 192
    BOOLEANO        shift and go to state 193
    CHAR            shift and go to state 194
    STRING          shift and go to state 195

    tipo_var                       shift and go to state 236

state 162

    (29) asignacion_instr -> ID CORIZQ expresion CORDER . IGUAL expresion PTCOMA
    (30) asignacion_instr -> ID CORIZQ expresion CORDER . CORIZQ expresion CORDER IGUAL expresion PTCOMA

    IGUAL           shift and go to state 238
    CORIZQ          shift and go to state 237


state 163

    (51) llamada_funcion_instr -> ID PARIZQ l_exp PARDER .

    PTCOMA          reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    MAYQUE          reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    MENQUE          reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    IGUALQUE        reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    NIGUALQUE       reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    MENIGQUE        reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    MAYIGQUE        reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    POR             reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    PARDER          reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    COMA            reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    DOSPT           reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    CORDER          reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    AND             reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    OR              reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    IMPRIMIR        reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    IMPRIMIRSALTO   reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    LOCAL           reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    GLOBAL          reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    ID              reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    MIENTRAS        reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    IF              reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    FUNC            reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    RETORNO         reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    BREAK           reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    CONTINUE        reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    FOR             reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    MAS             reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    MENOS           reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    DIVIDIDO        reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    MOD             reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    POTENCIA        reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)
    PUNTOS          reduce using rule 51 (llamada_funcion_instr -> ID PARIZQ l_exp PARDER .)


state 164

    (36) mientras_instr -> MIENTRAS expresion_logica instrucciones END . PTCOMA

    PTCOMA          shift and go to state 239


state 165

    (105) expresion_logica -> expresion_logica AND expresion_logica .
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool
    (101) expresion -> expresion_logica .

  ! reduce/reduce conflict for MAYQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MENQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for POR resolved using rule 101 (expresion -> expresion_logica .)
    AND             reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    OR              reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    IMPRIMIR        reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    IMPRIMIRSALTO   reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    LOCAL           reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    GLOBAL          reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    ID              reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    MIENTRAS        reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    IF              reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    FUNC            reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    RETORNO         reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    BREAK           reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    CONTINUE        reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    FOR             reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    PTCOMA          reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    PARDER          reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    COMA            reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    DOSPT           reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    CORDER          reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    MAS             reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    MENOS           reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    DIVIDIDO        reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    MOD             reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    POTENCIA        reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    PUNTOS          reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .)
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    POR             reduce using rule 101 (expresion -> expresion_logica .)

  ! MAYQUE          [ reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .) ]
  ! MENQUE          [ reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .) ]
  ! IGUALQUE        [ reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .) ]
  ! NIGUALQUE       [ reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .) ]
  ! MENIGQUE        [ reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .) ]
  ! MAYIGQUE        [ reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .) ]
  ! POR             [ reduce using rule 105 (expresion_logica -> expresion_logica AND expresion_logica .) ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 166

    (111) expresion_logica -> expresion_logica AND expresion_bool .
    (108) expresion_logica -> expresion_bool . AND expresion_bool
    (109) expresion_logica -> expresion_bool . OR expresion_bool
    (113) expresion_logica -> expresion_bool . AND expresion_logica
    (114) expresion_logica -> expresion_bool . OR expresion_logica
    (104) expresion_numerica -> expresion_bool .

  ! reduce/reduce conflict for MAS resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENOS resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for POR resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for DIVIDIDO resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MOD resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MAYQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
    AND             reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    OR              reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    IMPRIMIR        reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    IMPRIMIRSALTO   reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    LOCAL           reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    GLOBAL          reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    ID              reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    MIENTRAS        reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    IF              reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    FUNC            reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    RETORNO         reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    BREAK           reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    CONTINUE        reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    FOR             reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    PTCOMA          reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    PARDER          reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    COMA            reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    DOSPT           reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    CORDER          reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    PUNTOS          reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .)
    MAS             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENOS           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POR             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    DIVIDIDO        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MOD             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POTENCIA        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IGUALQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    NIGUALQUE       reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)

  ! MAYQUE          [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! MENQUE          [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! IGUALQUE        [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! NIGUALQUE       [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! MENIGQUE        [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! MAYIGQUE        [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! POR             [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! MAS             [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! MENOS           [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! DIVIDIDO        [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! MOD             [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! POTENCIA        [ reduce using rule 111 (expresion_logica -> expresion_logica AND expresion_bool .) ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]


state 167

    (106) expresion_logica -> expresion_logica OR expresion_logica .
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool
    (101) expresion -> expresion_logica .

  ! reduce/reduce conflict for MAYQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MENQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for POR resolved using rule 101 (expresion -> expresion_logica .)
    OR              reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    IMPRIMIR        reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    IMPRIMIRSALTO   reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    LOCAL           reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    GLOBAL          reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    ID              reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    MIENTRAS        reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    IF              reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    FUNC            reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    RETORNO         reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    BREAK           reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    CONTINUE        reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    FOR             reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    PTCOMA          reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    PARDER          reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    COMA            reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    DOSPT           reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    CORDER          reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    MAS             reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    MENOS           reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    DIVIDIDO        reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    MOD             reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    POTENCIA        reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    PUNTOS          reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .)
    AND             shift and go to state 95
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    POR             reduce using rule 101 (expresion -> expresion_logica .)

  ! AND             [ reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .) ]
  ! MAYQUE          [ reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .) ]
  ! MENQUE          [ reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .) ]
  ! IGUALQUE        [ reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .) ]
  ! NIGUALQUE       [ reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .) ]
  ! MENIGQUE        [ reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .) ]
  ! MAYIGQUE        [ reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .) ]
  ! POR             [ reduce using rule 106 (expresion_logica -> expresion_logica OR expresion_logica .) ]
  ! OR              [ shift and go to state 96 ]


state 168

    (112) expresion_logica -> expresion_logica OR expresion_bool .
    (108) expresion_logica -> expresion_bool . AND expresion_bool
    (109) expresion_logica -> expresion_bool . OR expresion_bool
    (113) expresion_logica -> expresion_bool . AND expresion_logica
    (114) expresion_logica -> expresion_bool . OR expresion_logica
    (104) expresion_numerica -> expresion_bool .

  ! reduce/reduce conflict for MAS resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENOS resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for POR resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for DIVIDIDO resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MOD resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MAYQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
    OR              reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    IMPRIMIR        reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    IMPRIMIRSALTO   reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    LOCAL           reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    GLOBAL          reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    ID              reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    MIENTRAS        reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    IF              reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    FUNC            reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    RETORNO         reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    BREAK           reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    CONTINUE        reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    FOR             reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    PTCOMA          reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    PARDER          reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    COMA            reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    DOSPT           reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    CORDER          reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    PUNTOS          reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .)
    AND             shift and go to state 99
    MAS             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENOS           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POR             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    DIVIDIDO        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MOD             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POTENCIA        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IGUALQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    NIGUALQUE       reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)

  ! AND             [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! MAYQUE          [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! MENQUE          [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! IGUALQUE        [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! NIGUALQUE       [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! MENIGQUE        [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! MAYIGQUE        [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! POR             [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! MAS             [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! MENOS           [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! DIVIDIDO        [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! MOD             [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! POTENCIA        [ reduce using rule 112 (expresion_logica -> expresion_logica OR expresion_bool .) ]
  ! OR              [ shift and go to state 100 ]


state 169

    (108) expresion_logica -> expresion_bool AND expresion_bool .
    (108) expresion_logica -> expresion_bool . AND expresion_bool
    (109) expresion_logica -> expresion_bool . OR expresion_bool
    (113) expresion_logica -> expresion_bool . AND expresion_logica
    (114) expresion_logica -> expresion_bool . OR expresion_logica
    (104) expresion_numerica -> expresion_bool .

  ! reduce/reduce conflict for MAS resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENOS resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for POR resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for DIVIDIDO resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MOD resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MAYQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
    AND             reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    OR              reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    IMPRIMIR        reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    IMPRIMIRSALTO   reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    LOCAL           reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    GLOBAL          reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    ID              reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    MIENTRAS        reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    IF              reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    FUNC            reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    RETORNO         reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    BREAK           reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    CONTINUE        reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    FOR             reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    PTCOMA          reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    PARDER          reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    COMA            reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    DOSPT           reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    CORDER          reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    PUNTOS          reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .)
    MAS             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENOS           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POR             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    DIVIDIDO        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MOD             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POTENCIA        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IGUALQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    NIGUALQUE       reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)

  ! MAYQUE          [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! MENQUE          [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! IGUALQUE        [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! NIGUALQUE       [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! MENIGQUE        [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! MAYIGQUE        [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! POR             [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! MAS             [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! MENOS           [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! DIVIDIDO        [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! MOD             [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! POTENCIA        [ reduce using rule 108 (expresion_logica -> expresion_bool AND expresion_bool .) ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]


state 170

    (113) expresion_logica -> expresion_bool AND expresion_logica .
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool
    (101) expresion -> expresion_logica .

  ! reduce/reduce conflict for MAYQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MENQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for POR resolved using rule 101 (expresion -> expresion_logica .)
    AND             reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    OR              reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    IMPRIMIR        reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    IMPRIMIRSALTO   reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    LOCAL           reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    GLOBAL          reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    ID              reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    MIENTRAS        reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    IF              reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    FUNC            reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    RETORNO         reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    BREAK           reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    CONTINUE        reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    FOR             reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    PTCOMA          reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    PARDER          reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    COMA            reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    DOSPT           reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    CORDER          reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    MAS             reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    MENOS           reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    DIVIDIDO        reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    MOD             reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    POTENCIA        reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    PUNTOS          reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .)
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    POR             reduce using rule 101 (expresion -> expresion_logica .)

  ! MAYQUE          [ reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .) ]
  ! MENQUE          [ reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .) ]
  ! IGUALQUE        [ reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .) ]
  ! NIGUALQUE       [ reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .) ]
  ! MENIGQUE        [ reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .) ]
  ! MAYIGQUE        [ reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .) ]
  ! POR             [ reduce using rule 113 (expresion_logica -> expresion_bool AND expresion_logica .) ]
  ! AND             [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]


state 171

    (109) expresion_logica -> expresion_bool OR expresion_bool .
    (108) expresion_logica -> expresion_bool . AND expresion_bool
    (109) expresion_logica -> expresion_bool . OR expresion_bool
    (113) expresion_logica -> expresion_bool . AND expresion_logica
    (114) expresion_logica -> expresion_bool . OR expresion_logica
    (104) expresion_numerica -> expresion_bool .

  ! reduce/reduce conflict for MAS resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENOS resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for POR resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for DIVIDIDO resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MOD resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for POTENCIA resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MAYQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 104 (expresion_numerica -> expresion_bool .)
    OR              reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    IMPRIMIR        reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    IMPRIMIRSALTO   reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    LOCAL           reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    GLOBAL          reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    ID              reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    MIENTRAS        reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    IF              reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    FUNC            reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    RETORNO         reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    BREAK           reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    CONTINUE        reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    FOR             reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    PTCOMA          reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    PARDER          reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    COMA            reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    DOSPT           reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    CORDER          reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    PUNTOS          reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .)
    AND             shift and go to state 99
    MAS             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENOS           reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POR             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    DIVIDIDO        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MOD             reduce using rule 104 (expresion_numerica -> expresion_bool .)
    POTENCIA        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENQUE          reduce using rule 104 (expresion_numerica -> expresion_bool .)
    IGUALQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    NIGUALQUE       reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MENIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)
    MAYIGQUE        reduce using rule 104 (expresion_numerica -> expresion_bool .)

  ! AND             [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! MAYQUE          [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! MENQUE          [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! IGUALQUE        [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! NIGUALQUE       [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! MENIGQUE        [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! MAYIGQUE        [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! POR             [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! MAS             [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! MENOS           [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! DIVIDIDO        [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! MOD             [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! POTENCIA        [ reduce using rule 109 (expresion_logica -> expresion_bool OR expresion_bool .) ]
  ! OR              [ shift and go to state 100 ]


state 172

    (114) expresion_logica -> expresion_bool OR expresion_logica .
    (105) expresion_logica -> expresion_logica . AND expresion_logica
    (106) expresion_logica -> expresion_logica . OR expresion_logica
    (111) expresion_logica -> expresion_logica . AND expresion_bool
    (112) expresion_logica -> expresion_logica . OR expresion_bool
    (101) expresion -> expresion_logica .

  ! reduce/reduce conflict for MAYQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MENQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 101 (expresion -> expresion_logica .)
  ! reduce/reduce conflict for POR resolved using rule 101 (expresion -> expresion_logica .)
    OR              reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    IMPRIMIR        reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    IMPRIMIRSALTO   reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    LOCAL           reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    GLOBAL          reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    ID              reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    MIENTRAS        reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    IF              reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    FUNC            reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    RETORNO         reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    BREAK           reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    CONTINUE        reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    FOR             reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    PTCOMA          reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    PARDER          reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    COMA            reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    DOSPT           reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    CORDER          reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    MAS             reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    MENOS           reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    DIVIDIDO        reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    MOD             reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    POTENCIA        reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    PUNTOS          reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .)
    AND             shift and go to state 95
    MAYQUE          reduce using rule 101 (expresion -> expresion_logica .)
    MENQUE          reduce using rule 101 (expresion -> expresion_logica .)
    IGUALQUE        reduce using rule 101 (expresion -> expresion_logica .)
    NIGUALQUE       reduce using rule 101 (expresion -> expresion_logica .)
    MENIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    MAYIGQUE        reduce using rule 101 (expresion -> expresion_logica .)
    POR             reduce using rule 101 (expresion -> expresion_logica .)

  ! AND             [ reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .) ]
  ! MAYQUE          [ reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .) ]
  ! MENQUE          [ reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .) ]
  ! IGUALQUE        [ reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .) ]
  ! NIGUALQUE       [ reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .) ]
  ! MENIGQUE        [ reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .) ]
  ! MAYIGQUE        [ reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .) ]
  ! POR             [ reduce using rule 114 (expresion_logica -> expresion_bool OR expresion_logica .) ]
  ! OR              [ shift and go to state 96 ]


state 173

    (115) expresion_logica -> PARIZQ expresion_logica PARDER .

    AND             reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    OR              reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    IMPRIMIR        reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    IMPRIMIRSALTO   reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    LOCAL           reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    GLOBAL          reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    ID              reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    MIENTRAS        reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    IF              reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    FUNC            reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    RETORNO         reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    BREAK           reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    CONTINUE        reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    FOR             reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    MAYQUE          reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    MENQUE          reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    IGUALQUE        reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    NIGUALQUE       reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    MENIGQUE        reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    MAYIGQUE        reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    POR             reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    PTCOMA          reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    PARDER          reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    COMA            reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    DOSPT           reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    CORDER          reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    MAS             reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    MENOS           reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    DIVIDIDO        reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    MOD             reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    POTENCIA        reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)
    PUNTOS          reduce using rule 115 (expresion_logica -> PARIZQ expresion_logica PARDER .)


state 174

    (74) expresion -> PARIZQ expresion PARDER .

    MAYQUE          reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    POR             reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    CORDER          reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    AND             reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    OR              reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    ID              reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    IF              reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    FUNC            reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    BREAK           reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    FOR             reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    MOD             reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 74 (expresion -> PARIZQ expresion PARDER .)


state 175

    (73) expresion_numerica -> PARIZQ expresion_numerica PARDER .

    MAS             reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MOD             reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    POTENCIA        reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MAYQUE          reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MENIGQUE        reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MAYIGQUE        reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PTCOMA          reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    COMA            reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    DOSPT           reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    CORDER          reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    AND             reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    OR              reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IMPRIMIR        reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IMPRIMIRSALTO   reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    LOCAL           reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    GLOBAL          reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    FUNC            reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    RETORNO         reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    BREAK           reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    CONTINUE        reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    FOR             reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)
    PUNTOS          reduce using rule 73 (expresion_numerica -> PARIZQ expresion_numerica PARDER .)


state 176

    (116) expresion_logica -> expresion MAYQUE expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    AND             reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    OR              reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    IMPRIMIR        reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    LOCAL           reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    GLOBAL          reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    ID              reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    MIENTRAS        reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    IF              reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    FUNC            reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    RETORNO         reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    BREAK           reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    CONTINUE        reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    FOR             reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    MAYQUE          reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    MENQUE          reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    IGUALQUE        reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    NIGUALQUE       reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    MENIGQUE        reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    MAYIGQUE        reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    PTCOMA          reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    PARDER          reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    COMA            reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    DOSPT           reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    CORDER          reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    MAS             reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    MENOS           reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    DIVIDIDO        reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    MOD             reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    POTENCIA        reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    PUNTOS          reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .)
    POR             shift and go to state 111

  ! POR             [ reduce using rule 116 (expresion_logica -> expresion MAYQUE expresion .) ]
  ! MAYQUE          [ shift and go to state 105 ]
  ! MENQUE          [ shift and go to state 106 ]
  ! IGUALQUE        [ shift and go to state 107 ]
  ! NIGUALQUE       [ shift and go to state 108 ]
  ! MENIGQUE        [ shift and go to state 109 ]
  ! MAYIGQUE        [ shift and go to state 110 ]


state 177

    (117) expresion_logica -> expresion MENQUE expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    AND             reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    OR              reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    IMPRIMIR        reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    LOCAL           reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    GLOBAL          reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    ID              reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    MIENTRAS        reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    IF              reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    FUNC            reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    RETORNO         reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    BREAK           reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    CONTINUE        reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    FOR             reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    MAYQUE          reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    MENQUE          reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    IGUALQUE        reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    NIGUALQUE       reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    MENIGQUE        reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    MAYIGQUE        reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    PTCOMA          reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    PARDER          reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    COMA            reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    DOSPT           reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    CORDER          reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    MAS             reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    MENOS           reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    DIVIDIDO        reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    MOD             reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    POTENCIA        reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    PUNTOS          reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .)
    POR             shift and go to state 111

  ! POR             [ reduce using rule 117 (expresion_logica -> expresion MENQUE expresion .) ]
  ! MAYQUE          [ shift and go to state 105 ]
  ! MENQUE          [ shift and go to state 106 ]
  ! IGUALQUE        [ shift and go to state 107 ]
  ! NIGUALQUE       [ shift and go to state 108 ]
  ! MENIGQUE        [ shift and go to state 109 ]
  ! MAYIGQUE        [ shift and go to state 110 ]


state 178

    (118) expresion_logica -> expresion IGUALQUE expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    AND             reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    OR              reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    IMPRIMIR        reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    LOCAL           reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    GLOBAL          reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    ID              reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    MIENTRAS        reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    IF              reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    FUNC            reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    RETORNO         reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    BREAK           reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    CONTINUE        reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    FOR             reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    MAYQUE          reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    MENQUE          reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    IGUALQUE        reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    NIGUALQUE       reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    MENIGQUE        reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    MAYIGQUE        reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    PTCOMA          reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    PARDER          reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    COMA            reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    DOSPT           reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    CORDER          reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    MAS             reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    MENOS           reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    DIVIDIDO        reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    MOD             reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    POTENCIA        reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    PUNTOS          reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .)
    POR             shift and go to state 111

  ! POR             [ reduce using rule 118 (expresion_logica -> expresion IGUALQUE expresion .) ]
  ! MAYQUE          [ shift and go to state 105 ]
  ! MENQUE          [ shift and go to state 106 ]
  ! IGUALQUE        [ shift and go to state 107 ]
  ! NIGUALQUE       [ shift and go to state 108 ]
  ! MENIGQUE        [ shift and go to state 109 ]
  ! MAYIGQUE        [ shift and go to state 110 ]


state 179

    (119) expresion_logica -> expresion NIGUALQUE expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    AND             reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    OR              reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    IMPRIMIR        reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    LOCAL           reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    GLOBAL          reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    ID              reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    MIENTRAS        reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    IF              reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    FUNC            reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    RETORNO         reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    BREAK           reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    CONTINUE        reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    FOR             reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    MAYQUE          reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    MENQUE          reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    IGUALQUE        reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    NIGUALQUE       reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    MENIGQUE        reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    MAYIGQUE        reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    PTCOMA          reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    PARDER          reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    COMA            reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    DOSPT           reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    CORDER          reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    MAS             reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    MENOS           reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    DIVIDIDO        reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    MOD             reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    POTENCIA        reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    PUNTOS          reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .)
    POR             shift and go to state 111

  ! POR             [ reduce using rule 119 (expresion_logica -> expresion NIGUALQUE expresion .) ]
  ! MAYQUE          [ shift and go to state 105 ]
  ! MENQUE          [ shift and go to state 106 ]
  ! IGUALQUE        [ shift and go to state 107 ]
  ! NIGUALQUE       [ shift and go to state 108 ]
  ! MENIGQUE        [ shift and go to state 109 ]
  ! MAYIGQUE        [ shift and go to state 110 ]


state 180

    (120) expresion_logica -> expresion MENIGQUE expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    AND             reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    OR              reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    IMPRIMIR        reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    LOCAL           reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    GLOBAL          reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    ID              reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    MIENTRAS        reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    IF              reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    FUNC            reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    RETORNO         reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    BREAK           reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    CONTINUE        reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    FOR             reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    MAYQUE          reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    MENQUE          reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    IGUALQUE        reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    NIGUALQUE       reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    MENIGQUE        reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    MAYIGQUE        reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    PTCOMA          reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    PARDER          reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    COMA            reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    DOSPT           reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    CORDER          reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    MAS             reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    MENOS           reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    DIVIDIDO        reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    MOD             reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    POTENCIA        reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    PUNTOS          reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .)
    POR             shift and go to state 111

  ! POR             [ reduce using rule 120 (expresion_logica -> expresion MENIGQUE expresion .) ]
  ! MAYQUE          [ shift and go to state 105 ]
  ! MENQUE          [ shift and go to state 106 ]
  ! IGUALQUE        [ shift and go to state 107 ]
  ! NIGUALQUE       [ shift and go to state 108 ]
  ! MENIGQUE        [ shift and go to state 109 ]
  ! MAYIGQUE        [ shift and go to state 110 ]


state 181

    (121) expresion_logica -> expresion MAYIGQUE expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    AND             reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    OR              reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    IMPRIMIR        reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    LOCAL           reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    GLOBAL          reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    ID              reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    MIENTRAS        reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    IF              reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    FUNC            reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    RETORNO         reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    BREAK           reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    CONTINUE        reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    FOR             reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    MAYQUE          reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    MENQUE          reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    IGUALQUE        reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    NIGUALQUE       reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    MENIGQUE        reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    MAYIGQUE        reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    PTCOMA          reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    PARDER          reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    COMA            reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    DOSPT           reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    CORDER          reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    MAS             reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    MENOS           reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    DIVIDIDO        reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    MOD             reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    POTENCIA        reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    PUNTOS          reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .)
    POR             shift and go to state 111

  ! POR             [ reduce using rule 121 (expresion_logica -> expresion MAYIGQUE expresion .) ]
  ! MAYQUE          [ shift and go to state 105 ]
  ! MENQUE          [ shift and go to state 106 ]
  ! IGUALQUE        [ shift and go to state 107 ]
  ! NIGUALQUE       [ shift and go to state 108 ]
  ! MENIGQUE        [ shift and go to state 109 ]
  ! MAYIGQUE        [ shift and go to state 110 ]


state 182

    (122) expresion -> expresion POR expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    MAYQUE          reduce using rule 122 (expresion -> expresion POR expresion .)
    MENQUE          reduce using rule 122 (expresion -> expresion POR expresion .)
    IGUALQUE        reduce using rule 122 (expresion -> expresion POR expresion .)
    NIGUALQUE       reduce using rule 122 (expresion -> expresion POR expresion .)
    MENIGQUE        reduce using rule 122 (expresion -> expresion POR expresion .)
    MAYIGQUE        reduce using rule 122 (expresion -> expresion POR expresion .)
    POR             reduce using rule 122 (expresion -> expresion POR expresion .)
    PTCOMA          reduce using rule 122 (expresion -> expresion POR expresion .)
    PARDER          reduce using rule 122 (expresion -> expresion POR expresion .)
    COMA            reduce using rule 122 (expresion -> expresion POR expresion .)
    DOSPT           reduce using rule 122 (expresion -> expresion POR expresion .)
    CORDER          reduce using rule 122 (expresion -> expresion POR expresion .)
    AND             reduce using rule 122 (expresion -> expresion POR expresion .)
    OR              reduce using rule 122 (expresion -> expresion POR expresion .)
    IMPRIMIR        reduce using rule 122 (expresion -> expresion POR expresion .)
    IMPRIMIRSALTO   reduce using rule 122 (expresion -> expresion POR expresion .)
    LOCAL           reduce using rule 122 (expresion -> expresion POR expresion .)
    GLOBAL          reduce using rule 122 (expresion -> expresion POR expresion .)
    ID              reduce using rule 122 (expresion -> expresion POR expresion .)
    MIENTRAS        reduce using rule 122 (expresion -> expresion POR expresion .)
    IF              reduce using rule 122 (expresion -> expresion POR expresion .)
    FUNC            reduce using rule 122 (expresion -> expresion POR expresion .)
    RETORNO         reduce using rule 122 (expresion -> expresion POR expresion .)
    BREAK           reduce using rule 122 (expresion -> expresion POR expresion .)
    CONTINUE        reduce using rule 122 (expresion -> expresion POR expresion .)
    FOR             reduce using rule 122 (expresion -> expresion POR expresion .)
    MAS             reduce using rule 122 (expresion -> expresion POR expresion .)
    MENOS           reduce using rule 122 (expresion -> expresion POR expresion .)
    DIVIDIDO        reduce using rule 122 (expresion -> expresion POR expresion .)
    MOD             reduce using rule 122 (expresion -> expresion POR expresion .)
    POTENCIA        reduce using rule 122 (expresion -> expresion POR expresion .)
    PUNTOS          reduce using rule 122 (expresion -> expresion POR expresion .)

  ! POR             [ shift and go to state 111 ]
  ! MAYQUE          [ shift and go to state 105 ]
  ! MENQUE          [ shift and go to state 106 ]
  ! IGUALQUE        [ shift and go to state 107 ]
  ! NIGUALQUE       [ shift and go to state 108 ]
  ! MENIGQUE        [ shift and go to state 109 ]
  ! MAYIGQUE        [ shift and go to state 110 ]


state 183

    (97) expresion -> CADENA POTENCIA ENTERO .

    MAYQUE          reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    MENQUE          reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    IGUALQUE        reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    NIGUALQUE       reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    MENIGQUE        reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    MAYIGQUE        reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    POR             reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    PTCOMA          reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    PARDER          reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    COMA            reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    DOSPT           reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    CORDER          reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    AND             reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    OR              reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    IMPRIMIR        reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    IMPRIMIRSALTO   reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    LOCAL           reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    GLOBAL          reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    ID              reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    MIENTRAS        reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    IF              reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    FUNC            reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    RETORNO         reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    BREAK           reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    CONTINUE        reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    FOR             reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    MAS             reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    MENOS           reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    DIVIDIDO        reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    MOD             reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    POTENCIA        reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)
    PUNTOS          reduce using rule 97 (expresion -> CADENA POTENCIA ENTERO .)


state 184

    (81) expresion -> CORIZQ l_exp CORDER .

    MAYQUE          reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    MENQUE          reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    IGUALQUE        reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    NIGUALQUE       reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    MENIGQUE        reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    MAYIGQUE        reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    POR             reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    PTCOMA          reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    PARDER          reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    COMA            reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    DOSPT           reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    CORDER          reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    AND             reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    OR              reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    IMPRIMIR        reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    IMPRIMIRSALTO   reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    LOCAL           reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    GLOBAL          reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    ID              reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    MIENTRAS        reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    IF              reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    FUNC            reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    RETORNO         reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    BREAK           reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    CONTINUE        reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    FOR             reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    MAS             reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    MENOS           reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    DIVIDIDO        reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    MOD             reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    POTENCIA        reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)
    PUNTOS          reduce using rule 81 (expresion -> CORIZQ l_exp CORDER .)


state 185

    (82) expresion -> CORIZQ l_array_bidimencional CORDER .

    MAYQUE          reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    MENQUE          reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    IGUALQUE        reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    NIGUALQUE       reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    MENIGQUE        reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    MAYIGQUE        reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    POR             reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    PTCOMA          reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    PARDER          reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    COMA            reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    DOSPT           reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    CORDER          reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    AND             reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    OR              reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    IMPRIMIR        reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    IMPRIMIRSALTO   reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    LOCAL           reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    GLOBAL          reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    ID              reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    MIENTRAS        reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    IF              reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    FUNC            reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    RETORNO         reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    BREAK           reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    CONTINUE        reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    FOR             reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    MAS             reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    MENOS           reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    DIVIDIDO        reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    MOD             reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    POTENCIA        reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)
    PUNTOS          reduce using rule 82 (expresion -> CORIZQ l_array_bidimencional CORDER .)


state 186

    (83) l_array_bidimencional -> l_array_bidimencional COMA . expresion
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 240
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 187

    (86) expresion -> UPPER PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 241
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 188

    (87) expresion -> LOWER PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 242
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 189

    (88) expresion -> LEN PARIZQ expresion . PARDER
    (85) len_inst -> LEN PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 243
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 190

    (89) expresion -> PARSE PARIZQ tipo_var . COMA expresion PARDER

    COMA            shift and go to state 244


state 191

    (31) tipo_var -> ENTERO64 .

    COMA            reduce using rule 31 (tipo_var -> ENTERO64 .)
    PTCOMA          reduce using rule 31 (tipo_var -> ENTERO64 .)


state 192

    (32) tipo_var -> DECIMAL64 .

    COMA            reduce using rule 32 (tipo_var -> DECIMAL64 .)
    PTCOMA          reduce using rule 32 (tipo_var -> DECIMAL64 .)


state 193

    (33) tipo_var -> BOOLEANO .

    COMA            reduce using rule 33 (tipo_var -> BOOLEANO .)
    PTCOMA          reduce using rule 33 (tipo_var -> BOOLEANO .)


state 194

    (34) tipo_var -> CHAR .

    COMA            reduce using rule 34 (tipo_var -> CHAR .)
    PTCOMA          reduce using rule 34 (tipo_var -> CHAR .)


state 195

    (35) tipo_var -> STRING .

    COMA            reduce using rule 35 (tipo_var -> STRING .)
    PTCOMA          reduce using rule 35 (tipo_var -> STRING .)


state 196

    (90) expresion -> TRUNC PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 245
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 197

    (91) expresion -> R_DECIMAL PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 246
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 198

    (92) expresion -> STRING PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 247
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 199

    (93) expresion -> TYPE PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 248
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 200

    (94) expresion -> PUSH PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 249
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 201

    (95) expresion -> POP PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 250
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 202

    (54) expresion_numerica -> expresion_numerica MAS expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    MAS             reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENOS           reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MAYQUE          reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENQUE          reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IGUALQUE        reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    NIGUALQUE       reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MENIGQUE        reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MAYIGQUE        reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PTCOMA          reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PARDER          reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    COMA            reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    DOSPT           reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    CORDER          reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    AND             reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    OR              reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IMPRIMIR        reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    LOCAL           reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    GLOBAL          reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    ID              reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    MIENTRAS        reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    IF              reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    FUNC            reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    RETORNO         reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    BREAK           reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    CONTINUE        reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    FOR             reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    PUNTOS          reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .)
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131

  ! POR             [ reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! MOD             [ reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! POTENCIA        [ reduce using rule 54 (expresion_numerica -> expresion_numerica MAS expresion_numerica .) ]
  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]


state 203

    (55) expresion_numerica -> expresion_numerica MENOS expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    MAS             reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENOS           reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MAYQUE          reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENQUE          reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MENIGQUE        reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MAYIGQUE        reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PTCOMA          reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PARDER          reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    COMA            reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    DOSPT           reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    CORDER          reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    AND             reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    OR              reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IMPRIMIR        reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    LOCAL           reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    GLOBAL          reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    ID              reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    IF              reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    FUNC            reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    RETORNO         reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    BREAK           reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    CONTINUE        reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    FOR             reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    PUNTOS          reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .)
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131

  ! POR             [ reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! MOD             [ reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! POTENCIA        [ reduce using rule 55 (expresion_numerica -> expresion_numerica MENOS expresion_numerica .) ]
  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]


state 204

    (56) expresion_numerica -> expresion_numerica POR expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica
    (100) expresion -> expresion_numerica .

  ! reduce/reduce conflict for AND resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for OR resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for IMPRIMIR resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for IMPRIMIRSALTO resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for LOCAL resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for ID resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for IF resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for FUNC resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for RETORNO resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for BREAK resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for FOR resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for MAYQUE resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for MENQUE resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for POR resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for PTCOMA resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for PARDER resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for COMA resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for DOSPT resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for CORDER resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for MAS resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for MENOS resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for DIVIDIDO resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! reduce/reduce conflict for MOD resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
  ! shift/reduce conflict for POTENCIA resolved as shift
  ! reduce/reduce conflict for PUNTOS resolved using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAS             reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENOS           reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    POR             reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    DIVIDIDO        reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MOD             reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAYQUE          reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENQUE          reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IGUALQUE        reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    NIGUALQUE       reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MENIGQUE        reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MAYIGQUE        reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PTCOMA          reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PARDER          reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    COMA            reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    DOSPT           reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    CORDER          reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    AND             reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    OR              reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IMPRIMIR        reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    LOCAL           reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    GLOBAL          reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    ID              reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    MIENTRAS        reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    IF              reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    FUNC            reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    RETORNO         reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    BREAK           reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    CONTINUE        reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    FOR             reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    PUNTOS          reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .)
    POTENCIA        shift and go to state 131

  ! POTENCIA        [ reduce using rule 56 (expresion_numerica -> expresion_numerica POR expresion_numerica .) ]
  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]
  ! POR             [ shift and go to state 128 ]
  ! DIVIDIDO        [ shift and go to state 129 ]
  ! MOD             [ shift and go to state 130 ]
  ! AND             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! OR              [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! IMPRIMIR        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! IMPRIMIRSALTO   [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! LOCAL           [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! GLOBAL          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! ID              [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MIENTRAS        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! IF              [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! FUNC            [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! RETORNO         [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! BREAK           [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! CONTINUE        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! FOR             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MAYQUE          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MENQUE          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! IGUALQUE        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! NIGUALQUE       [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MENIGQUE        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MAYIGQUE        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! POR             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! PTCOMA          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! PARDER          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! COMA            [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! DOSPT           [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! CORDER          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MAS             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MENOS           [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MOD             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! POTENCIA        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! PUNTOS          [ reduce using rule 100 (expresion -> expresion_numerica .) ]


state 205

    (57) expresion_numerica -> expresion_numerica POR expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    MAS             reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    MENOS           reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    POR             reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    DIVIDIDO        reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    MOD             reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    POTENCIA        reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    MAYQUE          reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    MENQUE          reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    IGUALQUE        reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    NIGUALQUE       reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    MENIGQUE        reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    MAYIGQUE        reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    PTCOMA          reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    PARDER          reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    COMA            reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    DOSPT           reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    CORDER          reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    AND             reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    OR              reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    IMPRIMIR        reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    IMPRIMIRSALTO   reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    LOCAL           reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    GLOBAL          reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    ID              reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    MIENTRAS        reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    IF              reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    FUNC            reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    RETORNO         reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    BREAK           reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    CONTINUE        reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    FOR             reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)
    PUNTOS          reduce using rule 57 (expresion_numerica -> expresion_numerica POR expresion .)

  ! POR             [ shift and go to state 111 ]
  ! MAYQUE          [ shift and go to state 105 ]
  ! MENQUE          [ shift and go to state 106 ]
  ! IGUALQUE        [ shift and go to state 107 ]
  ! NIGUALQUE       [ shift and go to state 108 ]
  ! MENIGQUE        [ shift and go to state 109 ]
  ! MAYIGQUE        [ shift and go to state 110 ]


state 206

    (73) expresion_numerica -> PARIZQ . expresion_numerica PARDER
    (74) expresion -> PARIZQ . expresion PARDER
    (115) expresion_logica -> PARIZQ . expresion_logica PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 206
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 104
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 251
    expresion                      shift and go to state 152
    expresion_logica               shift and go to state 153
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81
    llamada_funcion_instr          shift and go to state 59

state 207

    (58) expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    MAS             reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENOS           reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    POR             reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    DIVIDIDO        reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MOD             reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MAYQUE          reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENQUE          reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IGUALQUE        reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    NIGUALQUE       reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MENIGQUE        reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MAYIGQUE        reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PTCOMA          reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PARDER          reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    COMA            reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    DOSPT           reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    CORDER          reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    AND             reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    OR              reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IMPRIMIR        reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    LOCAL           reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    GLOBAL          reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    ID              reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    MIENTRAS        reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    IF              reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    FUNC            reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    RETORNO         reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    BREAK           reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    CONTINUE        reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    FOR             reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    PUNTOS          reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .)
    POTENCIA        shift and go to state 131

  ! POTENCIA        [ reduce using rule 58 (expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica .) ]
  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]
  ! POR             [ shift and go to state 128 ]
  ! DIVIDIDO        [ shift and go to state 129 ]
  ! MOD             [ shift and go to state 130 ]


state 208

    (64) expresion_numerica -> expresion_numerica MOD expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    MAS             reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    MENOS           reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    POR             reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    DIVIDIDO        reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    MOD             reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    MAYQUE          reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    MENQUE          reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    IGUALQUE        reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    NIGUALQUE       reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    MENIGQUE        reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    MAYIGQUE        reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    PTCOMA          reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    PARDER          reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    COMA            reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    DOSPT           reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    CORDER          reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    AND             reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    OR              reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    IMPRIMIR        reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    LOCAL           reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    GLOBAL          reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    ID              reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    MIENTRAS        reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    IF              reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    FUNC            reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    RETORNO         reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    BREAK           reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    CONTINUE        reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    FOR             reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    PUNTOS          reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .)
    POTENCIA        shift and go to state 131

  ! POTENCIA        [ reduce using rule 64 (expresion_numerica -> expresion_numerica MOD expresion_numerica .) ]
  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]
  ! POR             [ shift and go to state 128 ]
  ! DIVIDIDO        [ shift and go to state 129 ]
  ! MOD             [ shift and go to state 130 ]


state 209

    (65) expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    MAS             reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    MENOS           reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    POR             reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    DIVIDIDO        reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    MOD             reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    POTENCIA        reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    MAYQUE          reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    MENQUE          reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    IGUALQUE        reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    NIGUALQUE       reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    MENIGQUE        reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    MAYIGQUE        reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    PTCOMA          reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    PARDER          reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    COMA            reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    DOSPT           reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    CORDER          reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    AND             reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    OR              reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    IMPRIMIR        reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    LOCAL           reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    GLOBAL          reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    ID              reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    MIENTRAS        reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    IF              reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    FUNC            reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    RETORNO         reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    BREAK           reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    CONTINUE        reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    FOR             reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)
    PUNTOS          reduce using rule 65 (expresion_numerica -> expresion_numerica POTENCIA expresion_numerica .)

  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]
  ! POR             [ shift and go to state 128 ]
  ! DIVIDIDO        [ shift and go to state 129 ]
  ! MOD             [ shift and go to state 130 ]
  ! POTENCIA        [ shift and go to state 131 ]


state 210

    (78) expresion_numerica -> ID CORIZQ expresion . CORDER
    (79) expresion_numerica -> ID CORIZQ expresion . CORDER CORIZQ expresion CORDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    CORDER          shift and go to state 252
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 211

    (73) expresion_numerica -> PARIZQ expresion_numerica . PARDER
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    PARDER          shift and go to state 175
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131


state 212

    (85) len_inst -> LEN PARIZQ . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 253
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 213

    (59) expresion_numerica -> len_inst MAS expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    MAS             reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    MENOS           reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    MAYQUE          reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    MENQUE          reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    IGUALQUE        reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    NIGUALQUE       reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    MENIGQUE        reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    MAYIGQUE        reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    PTCOMA          reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    PARDER          reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    COMA            reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    DOSPT           reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    CORDER          reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    AND             reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    OR              reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    IMPRIMIR        reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    LOCAL           reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    GLOBAL          reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    ID              reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    MIENTRAS        reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    IF              reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    FUNC            reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    RETORNO         reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    BREAK           reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    CONTINUE        reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    FOR             reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    PUNTOS          reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .)
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131

  ! POR             [ reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .) ]
  ! MOD             [ reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .) ]
  ! POTENCIA        [ reduce using rule 59 (expresion_numerica -> len_inst MAS expresion_numerica .) ]
  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]


state 214

    (60) expresion_numerica -> len_inst MENOS expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    MAS             reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    MENOS           reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    MAYQUE          reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    MENQUE          reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    IGUALQUE        reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    NIGUALQUE       reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    MENIGQUE        reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    MAYIGQUE        reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    PTCOMA          reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    PARDER          reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    COMA            reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    DOSPT           reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    CORDER          reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    AND             reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    OR              reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    IMPRIMIR        reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    LOCAL           reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    GLOBAL          reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    ID              reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    MIENTRAS        reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    IF              reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    FUNC            reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    RETORNO         reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    BREAK           reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    CONTINUE        reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    FOR             reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    PUNTOS          reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .)
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131

  ! POR             [ reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .) ]
  ! MOD             [ reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .) ]
  ! POTENCIA        [ reduce using rule 60 (expresion_numerica -> len_inst MENOS expresion_numerica .) ]
  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]


state 215

    (61) expresion_numerica -> len_inst POR expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica
    (100) expresion -> expresion_numerica .

  ! reduce/reduce conflict for AND resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for OR resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for IMPRIMIR resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for IMPRIMIRSALTO resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for LOCAL resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for ID resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for MIENTRAS resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for IF resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for FUNC resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for RETORNO resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for BREAK resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for FOR resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for MAYQUE resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for MENQUE resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for IGUALQUE resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for NIGUALQUE resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for MENIGQUE resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for MAYIGQUE resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for POR resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for PTCOMA resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for PARDER resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for COMA resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for DOSPT resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for CORDER resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for MAS resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for MENOS resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for DIVIDIDO resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! reduce/reduce conflict for MOD resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
  ! shift/reduce conflict for POTENCIA resolved as shift
  ! reduce/reduce conflict for PUNTOS resolved using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    MAS             reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    MENOS           reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    POR             reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    DIVIDIDO        reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    MOD             reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    MAYQUE          reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    MENQUE          reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    IGUALQUE        reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    NIGUALQUE       reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    MENIGQUE        reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    MAYIGQUE        reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    PTCOMA          reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    PARDER          reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    COMA            reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    DOSPT           reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    CORDER          reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    AND             reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    OR              reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    IMPRIMIR        reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    LOCAL           reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    GLOBAL          reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    ID              reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    MIENTRAS        reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    IF              reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    FUNC            reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    RETORNO         reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    BREAK           reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    CONTINUE        reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    FOR             reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    PUNTOS          reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .)
    POTENCIA        shift and go to state 131

  ! POTENCIA        [ reduce using rule 61 (expresion_numerica -> len_inst POR expresion_numerica .) ]
  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]
  ! POR             [ shift and go to state 128 ]
  ! DIVIDIDO        [ shift and go to state 129 ]
  ! MOD             [ shift and go to state 130 ]
  ! AND             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! OR              [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! IMPRIMIR        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! IMPRIMIRSALTO   [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! LOCAL           [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! GLOBAL          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! ID              [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MIENTRAS        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! IF              [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! FUNC            [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! RETORNO         [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! BREAK           [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! CONTINUE        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! FOR             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MAYQUE          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MENQUE          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! IGUALQUE        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! NIGUALQUE       [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MENIGQUE        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MAYIGQUE        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! POR             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! PTCOMA          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! PARDER          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! COMA            [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! DOSPT           [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! CORDER          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MAS             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MENOS           [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! DIVIDIDO        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! MOD             [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! POTENCIA        [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! PUNTOS          [ reduce using rule 100 (expresion -> expresion_numerica .) ]


state 216

    (62) expresion_numerica -> len_inst POR expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    MAS             reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    MENOS           reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    POR             reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    DIVIDIDO        reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    MOD             reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    POTENCIA        reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    MAYQUE          reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    MENQUE          reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    IGUALQUE        reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    NIGUALQUE       reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    MENIGQUE        reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    MAYIGQUE        reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    PTCOMA          reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    PARDER          reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    COMA            reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    DOSPT           reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    CORDER          reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    AND             reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    OR              reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    IMPRIMIR        reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    IMPRIMIRSALTO   reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    LOCAL           reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    GLOBAL          reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    ID              reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    MIENTRAS        reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    IF              reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    FUNC            reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    RETORNO         reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    BREAK           reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    CONTINUE        reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    FOR             reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)
    PUNTOS          reduce using rule 62 (expresion_numerica -> len_inst POR expresion .)

  ! POR             [ shift and go to state 111 ]
  ! MAYQUE          [ shift and go to state 105 ]
  ! MENQUE          [ shift and go to state 106 ]
  ! IGUALQUE        [ shift and go to state 107 ]
  ! NIGUALQUE       [ shift and go to state 108 ]
  ! MENIGQUE        [ shift and go to state 109 ]
  ! MAYIGQUE        [ shift and go to state 110 ]


state 217

    (63) expresion_numerica -> len_inst DIVIDIDO expresion_numerica .
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    MAS             reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    MENOS           reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    POR             reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    DIVIDIDO        reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    MOD             reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    MAYQUE          reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    MENQUE          reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    IGUALQUE        reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    NIGUALQUE       reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    MENIGQUE        reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    MAYIGQUE        reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    PTCOMA          reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    PARDER          reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    COMA            reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    DOSPT           reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    CORDER          reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    AND             reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    OR              reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    IMPRIMIR        reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    IMPRIMIRSALTO   reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    LOCAL           reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    GLOBAL          reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    ID              reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    MIENTRAS        reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    IF              reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    FUNC            reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    RETORNO         reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    BREAK           reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    CONTINUE        reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    FOR             reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    PUNTOS          reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .)
    POTENCIA        shift and go to state 131

  ! POTENCIA        [ reduce using rule 63 (expresion_numerica -> len_inst DIVIDIDO expresion_numerica .) ]
  ! MAS             [ shift and go to state 126 ]
  ! MENOS           [ shift and go to state 127 ]
  ! POR             [ shift and go to state 128 ]
  ! DIVIDIDO        [ shift and go to state 129 ]
  ! MOD             [ shift and go to state 130 ]


state 218

    (66) expresion_numerica -> LOG10 PARIZQ expresion_numerica . PARDER
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    PARDER          shift and go to state 254
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131


state 219

    (67) expresion_numerica -> LOG PARIZQ expresion_numerica . COMA expresion_numerica PARDER
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    COMA            shift and go to state 255
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131


state 220

    (68) expresion_numerica -> SEN PARIZQ expresion_numerica . PARDER
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    PARDER          shift and go to state 256
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131


state 221

    (69) expresion_numerica -> COS PARIZQ expresion_numerica . PARDER
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    PARDER          shift and go to state 257
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131


state 222

    (70) expresion_numerica -> TAN PARIZQ expresion_numerica . PARDER
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    PARDER          shift and go to state 258
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131


state 223

    (71) expresion_numerica -> SQRT PARIZQ expresion_numerica . PARDER
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    PARDER          shift and go to state 259
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131


state 224

    (39) if_instr -> IF expresion_logica instrucciones END . PTCOMA

    PTCOMA          shift and go to state 260


state 225

    (40) if_else_instr -> IF expresion_logica instrucciones ELSE . instrucciones END PTCOMA
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instrucciones                  shift and go to state 261
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 226

    (42) lista_elif -> lista_elif ELSEIF expresion_logica instrucciones . ELSE instrucciones END PTCOMA
    (44) lista_elif -> lista_elif ELSEIF expresion_logica instrucciones . END PTCOMA
    (45) lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for IMPRIMIRSALTO resolved as shift
  ! shift/reduce conflict for LOCAL resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for RETORNO resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ELSE            shift and go to state 262
    END             shift and go to state 263
    ELSEIF          reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .)
    $end            reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .)
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

  ! IMPRIMIR        [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! IMPRIMIRSALTO   [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! LOCAL           [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! GLOBAL          [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! ID              [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! MIENTRAS        [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! IF              [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! FUNC            [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! RETORNO         [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! BREAK           [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! CONTINUE        [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! FOR             [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! END             [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]
  ! ELSE            [ reduce using rule 45 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones .) ]

    lista_elif                     shift and go to state 24
    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16

state 227

    (53) parametros -> ID .

    PARDER          reduce using rule 53 (parametros -> ID .)
    COMA            reduce using rule 53 (parametros -> ID .)


state 228

    (48) funcion_instr -> FUNC ID PARIZQ PARDER . instrucciones END PTCOMA
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instrucciones                  shift and go to state 264
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 229

    (49) funcion_instr -> FUNC ID PARIZQ parametros . PARDER instrucciones END PTCOMA
    (52) parametros -> parametros . COMA ID

    PARDER          shift and go to state 265
    COMA            shift and go to state 266


state 230

    (37) for_instr -> FOR ID IN expresion . PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> FOR ID IN expresion . instrucciones END PTCOMA
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    PUNTOS          shift and go to state 267
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instrucciones                  shift and go to state 268
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 231

    (17) imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .

    IMPRIMIR        reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    LOCAL           reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    GLOBAL          reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    ID              reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    MIENTRAS        reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    IF              reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    FUNC            reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    RETORNO         reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    BREAK           reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    CONTINUE        reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    FOR             reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    $end            reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    END             reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    ELSE            reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    ELSEIF          reduce using rule 17 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)


state 232

    (19) imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .

    IMPRIMIR        reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    LOCAL           reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    GLOBAL          reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    ID              reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    MIENTRAS        reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    IF              reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    FUNC            reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    RETORNO         reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    BREAK           reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    CONTINUE        reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    FOR             reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    $end            reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    END             reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    ELSE            reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    ELSEIF          reduce using rule 19 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)


state 233

    (46) l_exp -> l_exp COMA expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          reduce using rule 46 (l_exp -> l_exp COMA expresion .)
    COMA            reduce using rule 46 (l_exp -> l_exp COMA expresion .)
    CORDER          reduce using rule 46 (l_exp -> l_exp COMA expresion .)
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 234

    (18) imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .

    IMPRIMIR        reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    LOCAL           reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    GLOBAL          reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    ID              reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    MIENTRAS        reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    IF              reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    FUNC            reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    RETORNO         reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    BREAK           reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    CONTINUE        reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    FOR             reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    $end            reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    END             reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    ELSE            reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    ELSEIF          reduce using rule 18 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)


state 235

    (20) imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .

    IMPRIMIR        reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    LOCAL           reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    GLOBAL          reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    ID              reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    MIENTRAS        reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    IF              reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    FUNC            reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    RETORNO         reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    BREAK           reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    CONTINUE        reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    FOR             reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    $end            reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    END             reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    ELSE            reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    ELSEIF          reduce using rule 20 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)


state 236

    (28) asignacion_instr -> ID IGUAL expresion DOSPT tipo_var . PTCOMA

    PTCOMA          shift and go to state 269


state 237

    (30) asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ . expresion CORDER IGUAL expresion PTCOMA
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 270
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 238

    (29) asignacion_instr -> ID CORIZQ expresion CORDER IGUAL . expresion PTCOMA
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 271
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 239

    (36) mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    LOCAL           reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    ID              reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    IF              reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    FUNC            reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    RETORNO         reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    BREAK           reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    FOR             reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    $end            reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    END             reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    ELSE            reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 36 (mientras_instr -> MIENTRAS expresion_logica instrucciones END PTCOMA .)


state 240

    (83) l_array_bidimencional -> l_array_bidimencional COMA expresion .
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    CORDER          reduce using rule 83 (l_array_bidimencional -> l_array_bidimencional COMA expresion .)
    COMA            reduce using rule 83 (l_array_bidimencional -> l_array_bidimencional COMA expresion .)
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 241

    (86) expresion -> UPPER PARIZQ expresion PARDER .

    MAYQUE          reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    POR             reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    PARDER          reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    COMA            reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    CORDER          reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    AND             reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    OR              reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    ID              reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    IF              reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    FUNC            reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    BREAK           reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    FOR             reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    MAS             reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    MENOS           reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    MOD             reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 86 (expresion -> UPPER PARIZQ expresion PARDER .)


state 242

    (87) expresion -> LOWER PARIZQ expresion PARDER .

    MAYQUE          reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    POR             reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    PARDER          reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    COMA            reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    CORDER          reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    AND             reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    OR              reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    ID              reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    IF              reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    FUNC            reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    BREAK           reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    FOR             reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    MAS             reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    MENOS           reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    MOD             reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 87 (expresion -> LOWER PARIZQ expresion PARDER .)


state 243

    (88) expresion -> LEN PARIZQ expresion PARDER .
    (85) len_inst -> LEN PARIZQ expresion PARDER .

  ! reduce/reduce conflict for MAS resolved using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)
  ! reduce/reduce conflict for MENOS resolved using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)
  ! reduce/reduce conflict for POR resolved using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)
  ! reduce/reduce conflict for DIVIDIDO resolved using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)
    MAYQUE          reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    PARDER          reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    COMA            reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    CORDER          reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    AND             reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    OR              reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    ID              reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    IF              reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    FUNC            reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    BREAK           reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    FOR             reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    MOD             reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .)
    MAS             reduce using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)
    MENOS           reduce using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)
    POR             reduce using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)

  ! POR             [ reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .) ]
  ! MAS             [ reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .) ]
  ! MENOS           [ reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .) ]
  ! DIVIDIDO        [ reduce using rule 88 (expresion -> LEN PARIZQ expresion PARDER .) ]


state 244

    (89) expresion -> PARSE PARIZQ tipo_var COMA . expresion PARDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 272
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 245

    (90) expresion -> TRUNC PARIZQ expresion PARDER .

    MAYQUE          reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    POR             reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    PARDER          reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    COMA            reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    CORDER          reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    AND             reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    OR              reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    ID              reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    IF              reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    FUNC            reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    BREAK           reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    FOR             reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MAS             reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MENOS           reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MOD             reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 90 (expresion -> TRUNC PARIZQ expresion PARDER .)


state 246

    (91) expresion -> R_DECIMAL PARIZQ expresion PARDER .

    MAYQUE          reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    POR             reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    PARDER          reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    COMA            reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    CORDER          reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    AND             reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    OR              reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    ID              reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    IF              reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    FUNC            reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    BREAK           reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    FOR             reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    MAS             reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    MENOS           reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    MOD             reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 91 (expresion -> R_DECIMAL PARIZQ expresion PARDER .)


state 247

    (92) expresion -> STRING PARIZQ expresion PARDER .

    MAYQUE          reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    POR             reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    PARDER          reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    COMA            reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    CORDER          reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    AND             reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    OR              reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    ID              reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    IF              reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    FUNC            reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    BREAK           reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    FOR             reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    MAS             reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    MENOS           reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    MOD             reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 92 (expresion -> STRING PARIZQ expresion PARDER .)


state 248

    (93) expresion -> TYPE PARIZQ expresion PARDER .

    MAYQUE          reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    POR             reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    PARDER          reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    COMA            reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    CORDER          reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    AND             reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    OR              reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    ID              reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    IF              reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    FUNC            reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    BREAK           reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    FOR             reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    MAS             reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    MENOS           reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    MOD             reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 93 (expresion -> TYPE PARIZQ expresion PARDER .)


state 249

    (94) expresion -> PUSH PARIZQ expresion PARDER .

    MAYQUE          reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    POR             reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    PARDER          reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    COMA            reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    CORDER          reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    AND             reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    OR              reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    ID              reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    IF              reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    FUNC            reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    BREAK           reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    FOR             reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    MAS             reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    MENOS           reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    MOD             reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 94 (expresion -> PUSH PARIZQ expresion PARDER .)


state 250

    (95) expresion -> POP PARIZQ expresion PARDER .

    MAYQUE          reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    POR             reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    PARDER          reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    COMA            reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    CORDER          reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    AND             reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    OR              reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    ID              reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    IF              reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    FUNC            reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    BREAK           reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    FOR             reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    MAS             reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    MENOS           reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    MOD             reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 95 (expresion -> POP PARIZQ expresion PARDER .)


state 251

    (73) expresion_numerica -> PARIZQ expresion_numerica . PARDER
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica
    (100) expresion -> expresion_numerica .

  ! shift/reduce conflict for PARDER resolved as shift
  ! shift/reduce conflict for POR resolved as shift
    PARDER          shift and go to state 175
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131
    MAYQUE          reduce using rule 100 (expresion -> expresion_numerica .)
    MENQUE          reduce using rule 100 (expresion -> expresion_numerica .)
    IGUALQUE        reduce using rule 100 (expresion -> expresion_numerica .)
    NIGUALQUE       reduce using rule 100 (expresion -> expresion_numerica .)
    MENIGQUE        reduce using rule 100 (expresion -> expresion_numerica .)
    MAYIGQUE        reduce using rule 100 (expresion -> expresion_numerica .)

  ! PARDER          [ reduce using rule 100 (expresion -> expresion_numerica .) ]
  ! POR             [ reduce using rule 100 (expresion -> expresion_numerica .) ]


state 252

    (78) expresion_numerica -> ID CORIZQ expresion CORDER .
    (79) expresion_numerica -> ID CORIZQ expresion CORDER . CORIZQ expresion CORDER

    MAS             reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    MENOS           reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    POR             reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    DIVIDIDO        reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    MOD             reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    POTENCIA        reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    MAYQUE          reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    MENQUE          reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    IGUALQUE        reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    NIGUALQUE       reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    MENIGQUE        reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    MAYIGQUE        reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    PTCOMA          reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    PARDER          reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    COMA            reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    DOSPT           reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    CORDER          reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    AND             reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    OR              reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    IMPRIMIR        reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    IMPRIMIRSALTO   reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    LOCAL           reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    GLOBAL          reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    ID              reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    MIENTRAS        reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    IF              reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    FUNC            reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    RETORNO         reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    BREAK           reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    CONTINUE        reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    FOR             reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    PUNTOS          reduce using rule 78 (expresion_numerica -> ID CORIZQ expresion CORDER .)
    CORIZQ          shift and go to state 273


state 253

    (85) len_inst -> LEN PARIZQ expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 274
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 254

    (66) expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .

    MAS             reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    MOD             reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    POTENCIA        reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    MAYQUE          reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    MENIGQUE        reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    MAYIGQUE        reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    PTCOMA          reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    COMA            reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    DOSPT           reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    CORDER          reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    AND             reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    OR              reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    IMPRIMIR        reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    IMPRIMIRSALTO   reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    LOCAL           reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    GLOBAL          reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    FUNC            reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    RETORNO         reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    BREAK           reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    CONTINUE        reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    FOR             reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)
    PUNTOS          reduce using rule 66 (expresion_numerica -> LOG10 PARIZQ expresion_numerica PARDER .)


state 255

    (67) expresion_numerica -> LOG PARIZQ expresion_numerica COMA . expresion_numerica PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    PARIZQ          shift and go to state 134
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    ID              shift and go to state 135
    LEN             shift and go to state 137
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion_numerica             shift and go to state 275
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 136

state 256

    (68) expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .

    MAS             reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    MOD             reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    POTENCIA        reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    MAYQUE          reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    MENIGQUE        reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    MAYIGQUE        reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    PTCOMA          reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    COMA            reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    DOSPT           reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    CORDER          reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    AND             reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    OR              reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    IMPRIMIR        reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    IMPRIMIRSALTO   reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    LOCAL           reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    GLOBAL          reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    FUNC            reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    RETORNO         reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    BREAK           reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    CONTINUE        reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    FOR             reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)
    PUNTOS          reduce using rule 68 (expresion_numerica -> SEN PARIZQ expresion_numerica PARDER .)


state 257

    (69) expresion_numerica -> COS PARIZQ expresion_numerica PARDER .

    MAS             reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    MOD             reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    POTENCIA        reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    MAYQUE          reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    MENIGQUE        reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    MAYIGQUE        reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    PTCOMA          reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    COMA            reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    DOSPT           reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    CORDER          reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    AND             reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    OR              reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    IMPRIMIR        reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    IMPRIMIRSALTO   reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    LOCAL           reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    GLOBAL          reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    FUNC            reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    RETORNO         reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    BREAK           reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    CONTINUE        reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    FOR             reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)
    PUNTOS          reduce using rule 69 (expresion_numerica -> COS PARIZQ expresion_numerica PARDER .)


state 258

    (70) expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .

    MAS             reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    MOD             reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    POTENCIA        reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    MAYQUE          reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    MENIGQUE        reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    MAYIGQUE        reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    PTCOMA          reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    COMA            reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    DOSPT           reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    CORDER          reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    AND             reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    OR              reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    IMPRIMIR        reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    IMPRIMIRSALTO   reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    LOCAL           reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    GLOBAL          reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    FUNC            reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    RETORNO         reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    BREAK           reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    CONTINUE        reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    FOR             reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)
    PUNTOS          reduce using rule 70 (expresion_numerica -> TAN PARIZQ expresion_numerica PARDER .)


state 259

    (71) expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .

    MAS             reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    MENOS           reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    POR             reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    MOD             reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    POTENCIA        reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    MAYQUE          reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    MENQUE          reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    MENIGQUE        reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    MAYIGQUE        reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    PTCOMA          reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    PARDER          reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    COMA            reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    DOSPT           reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    CORDER          reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    AND             reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    OR              reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    IMPRIMIR        reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    IMPRIMIRSALTO   reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    LOCAL           reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    GLOBAL          reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    ID              reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    IF              reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    FUNC            reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    RETORNO         reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    BREAK           reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    CONTINUE        reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    FOR             reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)
    PUNTOS          reduce using rule 71 (expresion_numerica -> SQRT PARIZQ expresion_numerica PARDER .)


state 260

    (39) if_instr -> IF expresion_logica instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    LOCAL           reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    ID              reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    IF              reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    FUNC            reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    RETORNO         reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    BREAK           reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    FOR             reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    $end            reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    END             reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    ELSE            reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 39 (if_instr -> IF expresion_logica instrucciones END PTCOMA .)


state 261

    (40) if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    END             shift and go to state 276
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 262

    (42) lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE . instrucciones END PTCOMA
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    lista_elif                     shift and go to state 24
    instrucciones                  shift and go to state 277
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16

state 263

    (44) lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END . PTCOMA

    PTCOMA          shift and go to state 278


state 264

    (48) funcion_instr -> FUNC ID PARIZQ PARDER instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    END             shift and go to state 279
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 265

    (49) funcion_instr -> FUNC ID PARIZQ parametros PARDER . instrucciones END PTCOMA
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instrucciones                  shift and go to state 280
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 266

    (52) parametros -> parametros COMA . ID

    ID              shift and go to state 281


state 267

    (37) for_instr -> FOR ID IN expresion PUNTOS . expresion instrucciones END PTCOMA
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 282
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 268

    (38) for_instr -> FOR ID IN expresion instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    END             shift and go to state 283
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 269

    (28) asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .

    IMPRIMIR        reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    LOCAL           reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    GLOBAL          reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    ID              reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    MIENTRAS        reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    IF              reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    FUNC            reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    RETORNO         reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    BREAK           reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    CONTINUE        reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    FOR             reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    $end            reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    END             reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    ELSE            reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    ELSEIF          reduce using rule 28 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)


state 270

    (30) asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion . CORDER IGUAL expresion PTCOMA
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    CORDER          shift and go to state 284
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 271

    (29) asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion . PTCOMA
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PTCOMA          shift and go to state 285
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 272

    (89) expresion -> PARSE PARIZQ tipo_var COMA expresion . PARDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PARDER          shift and go to state 286
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 273

    (79) expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ . expresion CORDER
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 287
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 274

    (85) len_inst -> LEN PARIZQ expresion PARDER .

    MAS             reduce using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)
    MENOS           reduce using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)
    POR             reduce using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 85 (len_inst -> LEN PARIZQ expresion PARDER .)


state 275

    (67) expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica . PARDER
    (54) expresion_numerica -> expresion_numerica . MAS expresion_numerica
    (55) expresion_numerica -> expresion_numerica . MENOS expresion_numerica
    (56) expresion_numerica -> expresion_numerica . POR expresion_numerica
    (57) expresion_numerica -> expresion_numerica . POR expresion
    (58) expresion_numerica -> expresion_numerica . DIVIDIDO expresion_numerica
    (64) expresion_numerica -> expresion_numerica . MOD expresion_numerica
    (65) expresion_numerica -> expresion_numerica . POTENCIA expresion_numerica

    PARDER          shift and go to state 288
    MAS             shift and go to state 126
    MENOS           shift and go to state 127
    POR             shift and go to state 128
    DIVIDIDO        shift and go to state 129
    MOD             shift and go to state 130
    POTENCIA        shift and go to state 131


state 276

    (40) if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END . PTCOMA

    PTCOMA          shift and go to state 289


state 277

    (42) lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    END             shift and go to state 290
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    lista_elif                     shift and go to state 24
    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16

state 278

    (44) lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .

    ELSEIF          reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    IMPRIMIR        reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    LOCAL           reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    ID              reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    IF              reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    FUNC            reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    RETORNO         reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    BREAK           reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    FOR             reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    $end            reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    END             reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)
    ELSE            reduce using rule 44 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones END PTCOMA .)


state 279

    (48) funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END . PTCOMA

    PTCOMA          shift and go to state 291


state 280

    (49) funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    END             shift and go to state 292
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 281

    (52) parametros -> parametros COMA ID .

    PARDER          reduce using rule 52 (parametros -> parametros COMA ID .)
    COMA            reduce using rule 52 (parametros -> parametros COMA ID .)


state 282

    (37) for_instr -> FOR ID IN expresion PUNTOS expresion . instrucciones END PTCOMA
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instrucciones                  shift and go to state 293
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 283

    (38) for_instr -> FOR ID IN expresion instrucciones END . PTCOMA

    PTCOMA          shift and go to state 294


state 284

    (30) asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER . IGUAL expresion PTCOMA

    IGUAL           shift and go to state 295


state 285

    (29) asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .

    IMPRIMIR        reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    LOCAL           reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    GLOBAL          reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    ID              reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    MIENTRAS        reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    IF              reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    FUNC            reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    RETORNO         reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    BREAK           reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    CONTINUE        reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    FOR             reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    $end            reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    END             reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    ELSE            reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    ELSEIF          reduce using rule 29 (asignacion_instr -> ID CORIZQ expresion CORDER IGUAL expresion PTCOMA .)


state 286

    (89) expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .

    MAYQUE          reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MENQUE          reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    IGUALQUE        reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    NIGUALQUE       reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MENIGQUE        reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MAYIGQUE        reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    POR             reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    PTCOMA          reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    PARDER          reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    COMA            reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    DOSPT           reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    CORDER          reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    AND             reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    OR              reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    IMPRIMIR        reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    LOCAL           reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    GLOBAL          reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    ID              reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MIENTRAS        reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    IF              reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    FUNC            reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    RETORNO         reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    BREAK           reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    CONTINUE        reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    FOR             reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MAS             reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MENOS           reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    DIVIDIDO        reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MOD             reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    POTENCIA        reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    PUNTOS          reduce using rule 89 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)


state 287

    (79) expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion . CORDER
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    CORDER          shift and go to state 296
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 288

    (67) expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .

    MAS             reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    MENOS           reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    POR             reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    DIVIDIDO        reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    MOD             reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    POTENCIA        reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    MAYQUE          reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    MENQUE          reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    IGUALQUE        reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    NIGUALQUE       reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    MENIGQUE        reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    MAYIGQUE        reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    PTCOMA          reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    PARDER          reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    COMA            reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    DOSPT           reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    CORDER          reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    AND             reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    OR              reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    IMPRIMIR        reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    IMPRIMIRSALTO   reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    LOCAL           reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    GLOBAL          reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    ID              reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    MIENTRAS        reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    IF              reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    FUNC            reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    RETORNO         reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    BREAK           reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    CONTINUE        reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    FOR             reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)
    PUNTOS          reduce using rule 67 (expresion_numerica -> LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER .)


state 289

    (40) if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    LOCAL           reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    ID              reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    IF              reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    FUNC            reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    RETORNO         reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    BREAK           reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    FOR             reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    $end            reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    END             reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    ELSE            reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 40 (if_else_instr -> IF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)


state 290

    (42) lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END . PTCOMA

    PTCOMA          shift and go to state 297


state 291

    (48) funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    LOCAL           reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    ID              reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    IF              reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    FUNC            reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    RETORNO         reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    BREAK           reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    FOR             reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    $end            reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    END             reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    ELSE            reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 48 (funcion_instr -> FUNC ID PARIZQ PARDER instrucciones END PTCOMA .)


state 292

    (49) funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END . PTCOMA

    PTCOMA          shift and go to state 298


state 293

    (37) for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . if_else_instr
    (10) instruccion -> . if_elseif_instr
    (11) instruccion -> . funcion_instr
    (12) instruccion -> . llamada_funcion_instr PTCOMA
    (13) instruccion -> . retorno_inst
    (14) instruccion -> . break_inst
    (15) instruccion -> . continue_inst
    (16) instruccion -> . for_instr
    (17) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (18) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (25) definicion_instr -> . LOCAL asignacion_instr
    (26) definicion_instr -> . GLOBAL asignacion_instr
    (27) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (28) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (29) asignacion_instr -> . ID CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (30) asignacion_instr -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA
    (36) mientras_instr -> . MIENTRAS expresion_logica instrucciones END PTCOMA
    (39) if_instr -> . IF expresion_logica instrucciones END PTCOMA
    (40) if_else_instr -> . IF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (41) if_elseif_instr -> . lista_elif
    (48) funcion_instr -> . FUNC ID PARIZQ PARDER instrucciones END PTCOMA
    (49) funcion_instr -> . FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (21) retorno_inst -> . RETORNO expresion PTCOMA
    (22) retorno_inst -> . RETORNO PTCOMA
    (23) break_inst -> . BREAK PTCOMA
    (24) continue_inst -> . CONTINUE PTCOMA
    (37) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (38) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA
    (42) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA
    (43) lista_elif -> . IF expresion_logica instrucciones
    (44) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones END PTCOMA
    (45) lista_elif -> . lista_elif ELSEIF expresion_logica instrucciones

    END             shift and go to state 299
    IMPRIMIR        shift and go to state 17
    IMPRIMIRSALTO   shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              shift and go to state 21
    MIENTRAS        shift and go to state 22
    IF              shift and go to state 23
    FUNC            shift and go to state 25
    RETORNO         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    FOR             shift and go to state 29

    instruccion                    shift and go to state 30
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    if_else_instr                  shift and go to state 9
    if_elseif_instr                shift and go to state 10
    funcion_instr                  shift and go to state 11
    llamada_funcion_instr          shift and go to state 12
    retorno_inst                   shift and go to state 13
    break_inst                     shift and go to state 14
    continue_inst                  shift and go to state 15
    for_instr                      shift and go to state 16
    lista_elif                     shift and go to state 24

state 294

    (38) for_instr -> FOR ID IN expresion instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    LOCAL           reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    ID              reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    IF              reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    FUNC            reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    RETORNO         reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    BREAK           reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    FOR             reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    $end            reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    END             reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    ELSE            reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 38 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)


state 295

    (30) asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL . expresion PTCOMA
    (74) expresion -> . PARIZQ expresion PARDER
    (80) expresion -> . CADENA
    (81) expresion -> . CORIZQ l_exp CORDER
    (82) expresion -> . CORIZQ l_array_bidimencional CORDER
    (86) expresion -> . UPPER PARIZQ expresion PARDER
    (87) expresion -> . LOWER PARIZQ expresion PARDER
    (88) expresion -> . LEN PARIZQ expresion PARDER
    (89) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (90) expresion -> . TRUNC PARIZQ expresion PARDER
    (91) expresion -> . R_DECIMAL PARIZQ expresion PARDER
    (92) expresion -> . STRING PARIZQ expresion PARDER
    (93) expresion -> . TYPE PARIZQ expresion PARDER
    (94) expresion -> . PUSH PARIZQ expresion PARDER
    (95) expresion -> . POP PARIZQ expresion PARDER
    (96) expresion -> . llamada_funcion_instr
    (97) expresion -> . CADENA POTENCIA ENTERO
    (98) expresion -> . CARACTER
    (99) expresion -> . NULO
    (100) expresion -> . expresion_numerica
    (101) expresion -> . expresion_logica
    (122) expresion -> . expresion POR expresion
    (50) llamada_funcion_instr -> . ID PARIZQ PARDER
    (51) llamada_funcion_instr -> . ID PARIZQ l_exp PARDER
    (54) expresion_numerica -> . expresion_numerica MAS expresion_numerica
    (55) expresion_numerica -> . expresion_numerica MENOS expresion_numerica
    (56) expresion_numerica -> . expresion_numerica POR expresion_numerica
    (57) expresion_numerica -> . expresion_numerica POR expresion
    (58) expresion_numerica -> . expresion_numerica DIVIDIDO expresion_numerica
    (59) expresion_numerica -> . len_inst MAS expresion_numerica
    (60) expresion_numerica -> . len_inst MENOS expresion_numerica
    (61) expresion_numerica -> . len_inst POR expresion_numerica
    (62) expresion_numerica -> . len_inst POR expresion
    (63) expresion_numerica -> . len_inst DIVIDIDO expresion_numerica
    (64) expresion_numerica -> . expresion_numerica MOD expresion_numerica
    (65) expresion_numerica -> . expresion_numerica POTENCIA expresion_numerica
    (66) expresion_numerica -> . LOG10 PARIZQ expresion_numerica PARDER
    (67) expresion_numerica -> . LOG PARIZQ expresion_numerica COMA expresion_numerica PARDER
    (68) expresion_numerica -> . SEN PARIZQ expresion_numerica PARDER
    (69) expresion_numerica -> . COS PARIZQ expresion_numerica PARDER
    (70) expresion_numerica -> . TAN PARIZQ expresion_numerica PARDER
    (71) expresion_numerica -> . SQRT PARIZQ expresion_numerica PARDER
    (72) expresion_numerica -> . MENOS expresion_numerica
    (73) expresion_numerica -> . PARIZQ expresion_numerica PARDER
    (75) expresion_numerica -> . ENTERO
    (76) expresion_numerica -> . DECIMAL
    (77) expresion_numerica -> . ID
    (78) expresion_numerica -> . ID CORIZQ expresion CORDER
    (79) expresion_numerica -> . ID CORIZQ expresion CORDER CORIZQ expresion CORDER
    (104) expresion_numerica -> . expresion_bool
    (105) expresion_logica -> . expresion_logica AND expresion_logica
    (106) expresion_logica -> . expresion_logica OR expresion_logica
    (107) expresion_logica -> . NOT expresion_logica
    (108) expresion_logica -> . expresion_bool AND expresion_bool
    (109) expresion_logica -> . expresion_bool OR expresion_bool
    (110) expresion_logica -> . NOT expresion_bool
    (111) expresion_logica -> . expresion_logica AND expresion_bool
    (112) expresion_logica -> . expresion_logica OR expresion_bool
    (113) expresion_logica -> . expresion_bool AND expresion_logica
    (114) expresion_logica -> . expresion_bool OR expresion_logica
    (115) expresion_logica -> . PARIZQ expresion_logica PARDER
    (116) expresion_logica -> . expresion MAYQUE expresion
    (117) expresion_logica -> . expresion MENQUE expresion
    (118) expresion_logica -> . expresion IGUALQUE expresion
    (119) expresion_logica -> . expresion NIGUALQUE expresion
    (120) expresion_logica -> . expresion MENIGQUE expresion
    (121) expresion_logica -> . expresion MAYIGQUE expresion
    (85) len_inst -> . LEN PARIZQ expresion PARDER
    (102) expresion_bool -> . FALSO
    (103) expresion_bool -> . VERDADERO

    PARIZQ          shift and go to state 79
    CADENA          shift and go to state 47
    CORIZQ          shift and go to state 48
    UPPER           shift and go to state 49
    LOWER           shift and go to state 50
    LEN             shift and go to state 51
    PARSE           shift and go to state 52
    TRUNC           shift and go to state 53
    R_DECIMAL       shift and go to state 54
    STRING          shift and go to state 55
    TYPE            shift and go to state 56
    PUSH            shift and go to state 57
    POP             shift and go to state 58
    CARACTER        shift and go to state 61
    NULO            shift and go to state 62
    ID              shift and go to state 64
    LOG10           shift and go to state 67
    LOG             shift and go to state 68
    SEN             shift and go to state 69
    COS             shift and go to state 70
    TAN             shift and go to state 71
    SQRT            shift and go to state 72
    MENOS           shift and go to state 65
    ENTERO          shift and go to state 60
    DECIMAL         shift and go to state 73
    NOT             shift and go to state 41
    FALSO           shift and go to state 45
    VERDADERO       shift and go to state 46

    expresion                      shift and go to state 300
    llamada_funcion_instr          shift and go to state 59
    expresion_numerica             shift and go to state 63
    expresion_logica               shift and go to state 80
    len_inst                       shift and go to state 66
    expresion_bool                 shift and go to state 81

state 296

    (79) expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .

    MAS             reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    MENOS           reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    POR             reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    DIVIDIDO        reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    MOD             reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    POTENCIA        reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    MAYQUE          reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    MENQUE          reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    IGUALQUE        reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    NIGUALQUE       reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    MENIGQUE        reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    MAYIGQUE        reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    PTCOMA          reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    PARDER          reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    COMA            reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    DOSPT           reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    CORDER          reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    AND             reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    OR              reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    IMPRIMIR        reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    IMPRIMIRSALTO   reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    LOCAL           reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    GLOBAL          reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    ID              reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    MIENTRAS        reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    IF              reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    FUNC            reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    RETORNO         reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    BREAK           reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    CONTINUE        reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    FOR             reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)
    PUNTOS          reduce using rule 79 (expresion_numerica -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER .)


state 297

    (42) lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .

    ELSEIF          reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    IMPRIMIR        reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    LOCAL           reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    ID              reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    IF              reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    FUNC            reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    RETORNO         reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    BREAK           reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    FOR             reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    $end            reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    END             reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)
    ELSE            reduce using rule 42 (lista_elif -> lista_elif ELSEIF expresion_logica instrucciones ELSE instrucciones END PTCOMA .)


state 298

    (49) funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    LOCAL           reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    ID              reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    IF              reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    FUNC            reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    RETORNO         reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    BREAK           reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    FOR             reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    $end            reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    END             reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    ELSE            reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 49 (funcion_instr -> FUNC ID PARIZQ parametros PARDER instrucciones END PTCOMA .)


state 299

    (37) for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END . PTCOMA

    PTCOMA          shift and go to state 301


state 300

    (30) asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion . PTCOMA
    (122) expresion -> expresion . POR expresion
    (116) expresion_logica -> expresion . MAYQUE expresion
    (117) expresion_logica -> expresion . MENQUE expresion
    (118) expresion_logica -> expresion . IGUALQUE expresion
    (119) expresion_logica -> expresion . NIGUALQUE expresion
    (120) expresion_logica -> expresion . MENIGQUE expresion
    (121) expresion_logica -> expresion . MAYIGQUE expresion

    PTCOMA          shift and go to state 302
    POR             shift and go to state 111
    MAYQUE          shift and go to state 105
    MENQUE          shift and go to state 106
    IGUALQUE        shift and go to state 107
    NIGUALQUE       shift and go to state 108
    MENIGQUE        shift and go to state 109
    MAYIGQUE        shift and go to state 110


state 301

    (37) for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    LOCAL           reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    ID              reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    IF              reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    FUNC            reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    RETORNO         reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    BREAK           reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    FOR             reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    $end            reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    END             reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    ELSE            reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 37 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)


state 302

    (30) asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .

    IMPRIMIR        reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    LOCAL           reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    GLOBAL          reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    ID              reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    MIENTRAS        reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    IF              reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    FUNC            reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    RETORNO         reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    BREAK           reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    CONTINUE        reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    FOR             reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    $end            reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    END             reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    ELSE            reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)
    ELSEIF          reduce using rule 30 (asignacion_instr -> ID CORIZQ expresion CORDER CORIZQ expresion CORDER IGUAL expresion PTCOMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 24 resolved as shift
WARNING: shift/reduce conflict for POTENCIA in state 47 resolved as shift
WARNING: shift/reduce conflict for MAS in state 63 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 63 resolved as shift
WARNING: shift/reduce conflict for POR in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 63 resolved as shift
WARNING: shift/reduce conflict for MOD in state 63 resolved as shift
WARNING: shift/reduce conflict for POTENCIA in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 85 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 87 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 101 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 103 resolved as shift
WARNING: shift/reduce conflict for POR in state 103 resolved as shift
WARNING: shift/reduce conflict for END in state 148 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 148 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 148 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIRSALTO in state 148 resolved as shift
WARNING: shift/reduce conflict for LOCAL in state 148 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 148 resolved as shift
WARNING: shift/reduce conflict for ID in state 148 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 148 resolved as shift
WARNING: shift/reduce conflict for IF in state 148 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 148 resolved as shift
WARNING: shift/reduce conflict for RETORNO in state 148 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 148 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 148 resolved as shift
WARNING: shift/reduce conflict for FOR in state 148 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 153 resolved as shift
WARNING: shift/reduce conflict for POTENCIA in state 204 resolved as shift
WARNING: shift/reduce conflict for POTENCIA in state 215 resolved as shift
WARNING: shift/reduce conflict for END in state 226 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 226 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 226 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIRSALTO in state 226 resolved as shift
WARNING: shift/reduce conflict for LOCAL in state 226 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 226 resolved as shift
WARNING: shift/reduce conflict for ID in state 226 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 226 resolved as shift
WARNING: shift/reduce conflict for IF in state 226 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 226 resolved as shift
WARNING: shift/reduce conflict for RETORNO in state 226 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 226 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 226 resolved as shift
WARNING: shift/reduce conflict for FOR in state 226 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 251 resolved as shift
WARNING: shift/reduce conflict for POR in state 251 resolved as shift
WARNING: reduce/reduce conflict in state 97 resolved using rule (expresion -> expresion_logica)
WARNING: rejected rule (expresion_logica -> NOT expresion_logica) in state 97
WARNING: reduce/reduce conflict in state 98 resolved using rule (expresion_numerica -> expresion_bool)
WARNING: rejected rule (expresion_logica -> NOT expresion_bool) in state 98
WARNING: reduce/reduce conflict in state 115 resolved using rule (l_exp -> expresion)
WARNING: rejected rule (l_array_bidimencional -> expresion) in state 115
WARNING: reduce/reduce conflict in state 165 resolved using rule (expresion -> expresion_logica)
WARNING: rejected rule (expresion_logica -> expresion_logica AND expresion_logica) in state 165
WARNING: reduce/reduce conflict in state 166 resolved using rule (expresion_numerica -> expresion_bool)
WARNING: rejected rule (expresion_logica -> expresion_logica AND expresion_bool) in state 166
WARNING: reduce/reduce conflict in state 167 resolved using rule (expresion -> expresion_logica)
WARNING: rejected rule (expresion_logica -> expresion_logica OR expresion_logica) in state 167
WARNING: reduce/reduce conflict in state 168 resolved using rule (expresion_numerica -> expresion_bool)
WARNING: rejected rule (expresion_logica -> expresion_logica OR expresion_bool) in state 168
WARNING: reduce/reduce conflict in state 169 resolved using rule (expresion_numerica -> expresion_bool)
WARNING: rejected rule (expresion_logica -> expresion_bool AND expresion_bool) in state 169
WARNING: reduce/reduce conflict in state 170 resolved using rule (expresion -> expresion_logica)
WARNING: rejected rule (expresion_logica -> expresion_bool AND expresion_logica) in state 170
WARNING: reduce/reduce conflict in state 171 resolved using rule (expresion_numerica -> expresion_bool)
WARNING: rejected rule (expresion_logica -> expresion_bool OR expresion_bool) in state 171
WARNING: reduce/reduce conflict in state 172 resolved using rule (expresion -> expresion_logica)
WARNING: rejected rule (expresion_logica -> expresion_bool OR expresion_logica) in state 172
WARNING: reduce/reduce conflict in state 204 resolved using rule (expresion_numerica -> expresion_numerica POR expresion_numerica)
WARNING: rejected rule (expresion -> expresion_numerica) in state 204
WARNING: reduce/reduce conflict in state 215 resolved using rule (expresion_numerica -> len_inst POR expresion_numerica)
WARNING: rejected rule (expresion -> expresion_numerica) in state 215
WARNING: reduce/reduce conflict in state 243 resolved using rule (len_inst -> LEN PARIZQ expresion PARDER)
WARNING: rejected rule (expresion -> LEN PARIZQ expresion PARDER) in state 243
WARNING: Rule (l_array_bidimencional -> expresion) is never reduced
