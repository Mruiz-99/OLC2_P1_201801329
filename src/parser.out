Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LLAVDER
    LLAVIZQ
    MUTABLE
    NULO

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> imprimir_instr
Rule 5     instruccion -> definicion_instr
Rule 6     instruccion -> asignacion_instr
Rule 7     instruccion -> mientras_instr
Rule 8     instruccion -> if_instr
Rule 9     instruccion -> funcion_instr
Rule 10    instruccion -> llamada_funcion_instr PTCOMA
Rule 11    instruccion -> createStruct
Rule 12    instruccion -> declareStructST PTCOMA
Rule 13    instruccion -> assignAccessST PTCOMA
Rule 14    instruccion -> retorno_inst
Rule 15    instruccion -> break_inst
Rule 16    instruccion -> continue_inst
Rule 17    instruccion -> for_instr
Rule 18    imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA
Rule 19    imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
Rule 20    imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA
Rule 21    imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
Rule 22    retorno_inst -> RETORNO expresion PTCOMA
Rule 23    retorno_inst -> RETORNO PTCOMA
Rule 24    break_inst -> BREAK PTCOMA
Rule 25    continue_inst -> CONTINUE PTCOMA
Rule 26    definicion_instr -> LOCAL asignacion_instr
Rule 27    definicion_instr -> GLOBAL asignacion_instr
Rule 28    asignacion_instr -> ID IGUAL expresion PTCOMA
Rule 29    asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA
Rule 30    tipo_var -> ENTERO64
Rule 31    tipo_var -> DECIMAL64
Rule 32    tipo_var -> BOOLEANO
Rule 33    tipo_var -> CHAR
Rule 34    tipo_var -> STRING
Rule 35    mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA
Rule 36    for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
Rule 37    for_instr -> FOR ID IN expresion instrucciones END PTCOMA
Rule 38    if_instr -> IF expresion instrucciones END PTCOMA
Rule 39    if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA
Rule 40    if_instr -> IF expresion instrucciones elseIfList END PTCOMA
Rule 41    elseIfList -> ELSEIF expresion instrucciones
Rule 42    elseIfList -> ELSEIF expresion instrucciones ELSE instrucciones
Rule 43    elseIfList -> ELSEIF expresion instrucciones elseIfList
Rule 44    createStruct -> ESTRUCTURA ID attList END PTCOMA
Rule 45    attList -> attList PTCOMA ID DOSPT tipo_var PTCOMA
Rule 46    attList -> attList PTCOMA ID PTCOMA
Rule 47    attList -> ID
Rule 48    attList -> ID DOSPT tipo_var
Rule 49    declareStructST -> ID DOSPT ID
Rule 50    assignAccessST -> ID PUNTO ID IGUAL expresion
Rule 51    l_exp -> l_exp COMA expresion
Rule 52    l_exp -> expresion
Rule 53    funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
Rule 54    funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
Rule 55    parametros -> parametros COMA ID tipo_var
Rule 56    parametros -> ID tipo_var
Rule 57    llamada_funcion_instr -> ID PARIZQ PARDER
Rule 58    llamada_funcion_instr -> ID PARIZQ expList PARDER
Rule 59    expList -> expList COMA expresion
Rule 60    expList -> expresion
Rule 61    expArray -> expArray COMA expresion
Rule 62    expArray -> expresion
Rule 63    expresion -> expresion MAS expresion
Rule 64    expresion -> expresion MENOS expresion
Rule 65    expresion -> expresion POR expresion
Rule 66    expresion -> expresion DIVIDIDO expresion
Rule 67    expresion -> expresion OR expresion
Rule 68    expresion -> expresion AND expresion
Rule 69    expresion -> expresion IGUALQUE expresion
Rule 70    expresion -> expresion NIGUALQUE expresion
Rule 71    expresion -> expresion MAYQUE expresion
Rule 72    expresion -> expresion MENQUE expresion
Rule 73    expresion -> expresion MAYIGQUE expresion
Rule 74    expresion -> expresion MENIGQUE expresion
Rule 75    expresion -> expresion POTENCIA expresion
Rule 76    expresion -> expresion MOD expresion
Rule 77    expresion -> finalExp
Rule 78    finalExp -> llamada_funcion_instr
Rule 79    finalExp -> accessST
Rule 80    accessST -> ID PUNTO ID
Rule 81    expresion -> MENOS expresion
Rule 82    expresion -> NOT expresion
Rule 83    expresion -> PARIZQ expresion PARDER
Rule 84    expresion -> ID
Rule 85    expresion -> ID CORIZQ ENTERO CORDER
Rule 86    expresion -> ENTERO
Rule 87    expresion -> CORIZQ l_exp CORDER
Rule 88    expresion -> DECIMAL
Rule 89    expresion -> CARACTER
Rule 90    expresion -> CADENA
Rule 91    expresion -> VERDADERO
Rule 92    expresion -> FALSO
Rule 93    expresion -> UPPER PARIZQ expresion PARDER
Rule 94    expresion -> LOWER PARIZQ expresion PARDER
Rule 95    expresion -> LEN PARIZQ expresion PARDER
Rule 96    expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER
Rule 97    expresion -> TRUNC PARIZQ expresion PARDER
Rule 98    expresion -> STRING PARIZQ expresion PARDER
Rule 99    expresion -> CADENA POTENCIA ENTERO

Terminals, with rules where they appear

AND                  : 68
BOOLEANO             : 32
BREAK                : 24
CADENA               : 90 99
CARACTER             : 89
CHAR                 : 33
COMA                 : 51 55 59 61 96
CONTINUE             : 25
CORDER               : 85 87
CORIZQ               : 85 87
DECIMAL              : 88
DECIMAL64            : 31
DIVIDIDO             : 66
DOSPT                : 29 45 48 49 53 54
ELSE                 : 39 42
ELSEIF               : 41 42 43
END                  : 35 36 37 38 39 40 44 53 54
ENTERO               : 85 86 99
ENTERO64             : 30
ESTRUCTURA           : 44
FALSO                : 92
FOR                  : 36 37
FUNC                 : 53 54
GLOBAL               : 27
ID                   : 28 29 36 37 44 45 46 47 48 49 49 50 50 53 54 55 56 57 58 80 80 84 85
IF                   : 38 39 40
IGUAL                : 28 29 50
IGUALQUE             : 69
IMPRIMIR             : 18 20
IMPRIMIRSALTO        : 19 21
IN                   : 36 37
LEN                  : 95
LLAVDER              : 
LLAVIZQ              : 
LOCAL                : 26
LOWER                : 94
MAS                  : 63
MAYIGQUE             : 73
MAYQUE               : 71
MENIGQUE             : 74
MENOS                : 64 81
MENQUE               : 72
MIENTRAS             : 35
MOD                  : 76
MUTABLE              : 
NIGUALQUE            : 70
NOT                  : 82
NULO                 : 
OR                   : 67
PARDER               : 18 19 20 21 53 54 57 58 83 93 94 95 96 97 98
PARIZQ               : 18 19 20 21 53 54 57 58 83 93 94 95 96 97 98
PARSE                : 96
POR                  : 65
POTENCIA             : 75 99
PTCOMA               : 10 12 13 18 19 20 21 22 23 24 25 28 29 35 36 37 38 39 40 44 45 45 46 46 53 54
PUNTO                : 50 80
PUNTOS               : 36
RETORNO              : 22 23
STRING               : 34 98
TRUNC                : 97
UPPER                : 93
VERDADERO            : 91
error                : 

Nonterminals, with rules where they appear

accessST             : 79
asignacion_instr     : 6 26 27
assignAccessST       : 13
attList              : 44 45 46
break_inst           : 15
continue_inst        : 16
createStruct         : 11
declareStructST      : 12
definicion_instr     : 5
elseIfList           : 40 43
expArray             : 61
expList              : 58 59
expresion            : 18 19 22 28 29 35 36 36 37 38 39 40 41 42 43 50 51 52 59 60 61 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 81 82 83 93 94 95 96 97 98
finalExp             : 77
for_instr            : 17
funcion_instr        : 9
if_instr             : 8
imprimir_instr       : 4
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 35 36 37 38 39 39 40 41 42 42 43 53 54
l_exp                : 20 21 51 87
llamada_funcion_instr : 10 78
mientras_instr       : 7
parametros           : 54 55
retorno_inst         : 14
tipo_var             : 29 45 48 53 54 55 56 96

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    $end            reduce using rule 1 (init -> instrucciones .)
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instruccion                    shift and go to state 31
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 3

    (3) instrucciones -> instruccion .

    IMPRIMIR        reduce using rule 3 (instrucciones -> instruccion .)
    IMPRIMIRSALTO   reduce using rule 3 (instrucciones -> instruccion .)
    LOCAL           reduce using rule 3 (instrucciones -> instruccion .)
    GLOBAL          reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    MIENTRAS        reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    FUNC            reduce using rule 3 (instrucciones -> instruccion .)
    ESTRUCTURA      reduce using rule 3 (instrucciones -> instruccion .)
    RETORNO         reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    END             reduce using rule 3 (instrucciones -> instruccion .)
    ELSE            reduce using rule 3 (instrucciones -> instruccion .)
    ELSEIF          reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> imprimir_instr .

    IMPRIMIR        reduce using rule 4 (instruccion -> imprimir_instr .)
    IMPRIMIRSALTO   reduce using rule 4 (instruccion -> imprimir_instr .)
    LOCAL           reduce using rule 4 (instruccion -> imprimir_instr .)
    GLOBAL          reduce using rule 4 (instruccion -> imprimir_instr .)
    ID              reduce using rule 4 (instruccion -> imprimir_instr .)
    MIENTRAS        reduce using rule 4 (instruccion -> imprimir_instr .)
    IF              reduce using rule 4 (instruccion -> imprimir_instr .)
    FUNC            reduce using rule 4 (instruccion -> imprimir_instr .)
    ESTRUCTURA      reduce using rule 4 (instruccion -> imprimir_instr .)
    RETORNO         reduce using rule 4 (instruccion -> imprimir_instr .)
    BREAK           reduce using rule 4 (instruccion -> imprimir_instr .)
    CONTINUE        reduce using rule 4 (instruccion -> imprimir_instr .)
    FOR             reduce using rule 4 (instruccion -> imprimir_instr .)
    $end            reduce using rule 4 (instruccion -> imprimir_instr .)
    END             reduce using rule 4 (instruccion -> imprimir_instr .)
    ELSE            reduce using rule 4 (instruccion -> imprimir_instr .)
    ELSEIF          reduce using rule 4 (instruccion -> imprimir_instr .)


state 5

    (5) instruccion -> definicion_instr .

    IMPRIMIR        reduce using rule 5 (instruccion -> definicion_instr .)
    IMPRIMIRSALTO   reduce using rule 5 (instruccion -> definicion_instr .)
    LOCAL           reduce using rule 5 (instruccion -> definicion_instr .)
    GLOBAL          reduce using rule 5 (instruccion -> definicion_instr .)
    ID              reduce using rule 5 (instruccion -> definicion_instr .)
    MIENTRAS        reduce using rule 5 (instruccion -> definicion_instr .)
    IF              reduce using rule 5 (instruccion -> definicion_instr .)
    FUNC            reduce using rule 5 (instruccion -> definicion_instr .)
    ESTRUCTURA      reduce using rule 5 (instruccion -> definicion_instr .)
    RETORNO         reduce using rule 5 (instruccion -> definicion_instr .)
    BREAK           reduce using rule 5 (instruccion -> definicion_instr .)
    CONTINUE        reduce using rule 5 (instruccion -> definicion_instr .)
    FOR             reduce using rule 5 (instruccion -> definicion_instr .)
    $end            reduce using rule 5 (instruccion -> definicion_instr .)
    END             reduce using rule 5 (instruccion -> definicion_instr .)
    ELSE            reduce using rule 5 (instruccion -> definicion_instr .)
    ELSEIF          reduce using rule 5 (instruccion -> definicion_instr .)


state 6

    (6) instruccion -> asignacion_instr .

    IMPRIMIR        reduce using rule 6 (instruccion -> asignacion_instr .)
    IMPRIMIRSALTO   reduce using rule 6 (instruccion -> asignacion_instr .)
    LOCAL           reduce using rule 6 (instruccion -> asignacion_instr .)
    GLOBAL          reduce using rule 6 (instruccion -> asignacion_instr .)
    ID              reduce using rule 6 (instruccion -> asignacion_instr .)
    MIENTRAS        reduce using rule 6 (instruccion -> asignacion_instr .)
    IF              reduce using rule 6 (instruccion -> asignacion_instr .)
    FUNC            reduce using rule 6 (instruccion -> asignacion_instr .)
    ESTRUCTURA      reduce using rule 6 (instruccion -> asignacion_instr .)
    RETORNO         reduce using rule 6 (instruccion -> asignacion_instr .)
    BREAK           reduce using rule 6 (instruccion -> asignacion_instr .)
    CONTINUE        reduce using rule 6 (instruccion -> asignacion_instr .)
    FOR             reduce using rule 6 (instruccion -> asignacion_instr .)
    $end            reduce using rule 6 (instruccion -> asignacion_instr .)
    END             reduce using rule 6 (instruccion -> asignacion_instr .)
    ELSE            reduce using rule 6 (instruccion -> asignacion_instr .)
    ELSEIF          reduce using rule 6 (instruccion -> asignacion_instr .)


state 7

    (7) instruccion -> mientras_instr .

    IMPRIMIR        reduce using rule 7 (instruccion -> mientras_instr .)
    IMPRIMIRSALTO   reduce using rule 7 (instruccion -> mientras_instr .)
    LOCAL           reduce using rule 7 (instruccion -> mientras_instr .)
    GLOBAL          reduce using rule 7 (instruccion -> mientras_instr .)
    ID              reduce using rule 7 (instruccion -> mientras_instr .)
    MIENTRAS        reduce using rule 7 (instruccion -> mientras_instr .)
    IF              reduce using rule 7 (instruccion -> mientras_instr .)
    FUNC            reduce using rule 7 (instruccion -> mientras_instr .)
    ESTRUCTURA      reduce using rule 7 (instruccion -> mientras_instr .)
    RETORNO         reduce using rule 7 (instruccion -> mientras_instr .)
    BREAK           reduce using rule 7 (instruccion -> mientras_instr .)
    CONTINUE        reduce using rule 7 (instruccion -> mientras_instr .)
    FOR             reduce using rule 7 (instruccion -> mientras_instr .)
    $end            reduce using rule 7 (instruccion -> mientras_instr .)
    END             reduce using rule 7 (instruccion -> mientras_instr .)
    ELSE            reduce using rule 7 (instruccion -> mientras_instr .)
    ELSEIF          reduce using rule 7 (instruccion -> mientras_instr .)


state 8

    (8) instruccion -> if_instr .

    IMPRIMIR        reduce using rule 8 (instruccion -> if_instr .)
    IMPRIMIRSALTO   reduce using rule 8 (instruccion -> if_instr .)
    LOCAL           reduce using rule 8 (instruccion -> if_instr .)
    GLOBAL          reduce using rule 8 (instruccion -> if_instr .)
    ID              reduce using rule 8 (instruccion -> if_instr .)
    MIENTRAS        reduce using rule 8 (instruccion -> if_instr .)
    IF              reduce using rule 8 (instruccion -> if_instr .)
    FUNC            reduce using rule 8 (instruccion -> if_instr .)
    ESTRUCTURA      reduce using rule 8 (instruccion -> if_instr .)
    RETORNO         reduce using rule 8 (instruccion -> if_instr .)
    BREAK           reduce using rule 8 (instruccion -> if_instr .)
    CONTINUE        reduce using rule 8 (instruccion -> if_instr .)
    FOR             reduce using rule 8 (instruccion -> if_instr .)
    $end            reduce using rule 8 (instruccion -> if_instr .)
    END             reduce using rule 8 (instruccion -> if_instr .)
    ELSE            reduce using rule 8 (instruccion -> if_instr .)
    ELSEIF          reduce using rule 8 (instruccion -> if_instr .)


state 9

    (9) instruccion -> funcion_instr .

    IMPRIMIR        reduce using rule 9 (instruccion -> funcion_instr .)
    IMPRIMIRSALTO   reduce using rule 9 (instruccion -> funcion_instr .)
    LOCAL           reduce using rule 9 (instruccion -> funcion_instr .)
    GLOBAL          reduce using rule 9 (instruccion -> funcion_instr .)
    ID              reduce using rule 9 (instruccion -> funcion_instr .)
    MIENTRAS        reduce using rule 9 (instruccion -> funcion_instr .)
    IF              reduce using rule 9 (instruccion -> funcion_instr .)
    FUNC            reduce using rule 9 (instruccion -> funcion_instr .)
    ESTRUCTURA      reduce using rule 9 (instruccion -> funcion_instr .)
    RETORNO         reduce using rule 9 (instruccion -> funcion_instr .)
    BREAK           reduce using rule 9 (instruccion -> funcion_instr .)
    CONTINUE        reduce using rule 9 (instruccion -> funcion_instr .)
    FOR             reduce using rule 9 (instruccion -> funcion_instr .)
    $end            reduce using rule 9 (instruccion -> funcion_instr .)
    END             reduce using rule 9 (instruccion -> funcion_instr .)
    ELSE            reduce using rule 9 (instruccion -> funcion_instr .)
    ELSEIF          reduce using rule 9 (instruccion -> funcion_instr .)


state 10

    (10) instruccion -> llamada_funcion_instr . PTCOMA

    PTCOMA          shift and go to state 32


state 11

    (11) instruccion -> createStruct .

    IMPRIMIR        reduce using rule 11 (instruccion -> createStruct .)
    IMPRIMIRSALTO   reduce using rule 11 (instruccion -> createStruct .)
    LOCAL           reduce using rule 11 (instruccion -> createStruct .)
    GLOBAL          reduce using rule 11 (instruccion -> createStruct .)
    ID              reduce using rule 11 (instruccion -> createStruct .)
    MIENTRAS        reduce using rule 11 (instruccion -> createStruct .)
    IF              reduce using rule 11 (instruccion -> createStruct .)
    FUNC            reduce using rule 11 (instruccion -> createStruct .)
    ESTRUCTURA      reduce using rule 11 (instruccion -> createStruct .)
    RETORNO         reduce using rule 11 (instruccion -> createStruct .)
    BREAK           reduce using rule 11 (instruccion -> createStruct .)
    CONTINUE        reduce using rule 11 (instruccion -> createStruct .)
    FOR             reduce using rule 11 (instruccion -> createStruct .)
    $end            reduce using rule 11 (instruccion -> createStruct .)
    END             reduce using rule 11 (instruccion -> createStruct .)
    ELSE            reduce using rule 11 (instruccion -> createStruct .)
    ELSEIF          reduce using rule 11 (instruccion -> createStruct .)


state 12

    (12) instruccion -> declareStructST . PTCOMA

    PTCOMA          shift and go to state 33


state 13

    (13) instruccion -> assignAccessST . PTCOMA

    PTCOMA          shift and go to state 34


state 14

    (14) instruccion -> retorno_inst .

    IMPRIMIR        reduce using rule 14 (instruccion -> retorno_inst .)
    IMPRIMIRSALTO   reduce using rule 14 (instruccion -> retorno_inst .)
    LOCAL           reduce using rule 14 (instruccion -> retorno_inst .)
    GLOBAL          reduce using rule 14 (instruccion -> retorno_inst .)
    ID              reduce using rule 14 (instruccion -> retorno_inst .)
    MIENTRAS        reduce using rule 14 (instruccion -> retorno_inst .)
    IF              reduce using rule 14 (instruccion -> retorno_inst .)
    FUNC            reduce using rule 14 (instruccion -> retorno_inst .)
    ESTRUCTURA      reduce using rule 14 (instruccion -> retorno_inst .)
    RETORNO         reduce using rule 14 (instruccion -> retorno_inst .)
    BREAK           reduce using rule 14 (instruccion -> retorno_inst .)
    CONTINUE        reduce using rule 14 (instruccion -> retorno_inst .)
    FOR             reduce using rule 14 (instruccion -> retorno_inst .)
    $end            reduce using rule 14 (instruccion -> retorno_inst .)
    END             reduce using rule 14 (instruccion -> retorno_inst .)
    ELSE            reduce using rule 14 (instruccion -> retorno_inst .)
    ELSEIF          reduce using rule 14 (instruccion -> retorno_inst .)


state 15

    (15) instruccion -> break_inst .

    IMPRIMIR        reduce using rule 15 (instruccion -> break_inst .)
    IMPRIMIRSALTO   reduce using rule 15 (instruccion -> break_inst .)
    LOCAL           reduce using rule 15 (instruccion -> break_inst .)
    GLOBAL          reduce using rule 15 (instruccion -> break_inst .)
    ID              reduce using rule 15 (instruccion -> break_inst .)
    MIENTRAS        reduce using rule 15 (instruccion -> break_inst .)
    IF              reduce using rule 15 (instruccion -> break_inst .)
    FUNC            reduce using rule 15 (instruccion -> break_inst .)
    ESTRUCTURA      reduce using rule 15 (instruccion -> break_inst .)
    RETORNO         reduce using rule 15 (instruccion -> break_inst .)
    BREAK           reduce using rule 15 (instruccion -> break_inst .)
    CONTINUE        reduce using rule 15 (instruccion -> break_inst .)
    FOR             reduce using rule 15 (instruccion -> break_inst .)
    $end            reduce using rule 15 (instruccion -> break_inst .)
    END             reduce using rule 15 (instruccion -> break_inst .)
    ELSE            reduce using rule 15 (instruccion -> break_inst .)
    ELSEIF          reduce using rule 15 (instruccion -> break_inst .)


state 16

    (16) instruccion -> continue_inst .

    IMPRIMIR        reduce using rule 16 (instruccion -> continue_inst .)
    IMPRIMIRSALTO   reduce using rule 16 (instruccion -> continue_inst .)
    LOCAL           reduce using rule 16 (instruccion -> continue_inst .)
    GLOBAL          reduce using rule 16 (instruccion -> continue_inst .)
    ID              reduce using rule 16 (instruccion -> continue_inst .)
    MIENTRAS        reduce using rule 16 (instruccion -> continue_inst .)
    IF              reduce using rule 16 (instruccion -> continue_inst .)
    FUNC            reduce using rule 16 (instruccion -> continue_inst .)
    ESTRUCTURA      reduce using rule 16 (instruccion -> continue_inst .)
    RETORNO         reduce using rule 16 (instruccion -> continue_inst .)
    BREAK           reduce using rule 16 (instruccion -> continue_inst .)
    CONTINUE        reduce using rule 16 (instruccion -> continue_inst .)
    FOR             reduce using rule 16 (instruccion -> continue_inst .)
    $end            reduce using rule 16 (instruccion -> continue_inst .)
    END             reduce using rule 16 (instruccion -> continue_inst .)
    ELSE            reduce using rule 16 (instruccion -> continue_inst .)
    ELSEIF          reduce using rule 16 (instruccion -> continue_inst .)


state 17

    (17) instruccion -> for_instr .

    IMPRIMIR        reduce using rule 17 (instruccion -> for_instr .)
    IMPRIMIRSALTO   reduce using rule 17 (instruccion -> for_instr .)
    LOCAL           reduce using rule 17 (instruccion -> for_instr .)
    GLOBAL          reduce using rule 17 (instruccion -> for_instr .)
    ID              reduce using rule 17 (instruccion -> for_instr .)
    MIENTRAS        reduce using rule 17 (instruccion -> for_instr .)
    IF              reduce using rule 17 (instruccion -> for_instr .)
    FUNC            reduce using rule 17 (instruccion -> for_instr .)
    ESTRUCTURA      reduce using rule 17 (instruccion -> for_instr .)
    RETORNO         reduce using rule 17 (instruccion -> for_instr .)
    BREAK           reduce using rule 17 (instruccion -> for_instr .)
    CONTINUE        reduce using rule 17 (instruccion -> for_instr .)
    FOR             reduce using rule 17 (instruccion -> for_instr .)
    $end            reduce using rule 17 (instruccion -> for_instr .)
    END             reduce using rule 17 (instruccion -> for_instr .)
    ELSE            reduce using rule 17 (instruccion -> for_instr .)
    ELSEIF          reduce using rule 17 (instruccion -> for_instr .)


state 18

    (18) imprimir_instr -> IMPRIMIR . PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> IMPRIMIR . PARIZQ l_exp PARDER PTCOMA

    PARIZQ          shift and go to state 35


state 19

    (19) imprimir_instr -> IMPRIMIRSALTO . PARIZQ expresion PARDER PTCOMA
    (21) imprimir_instr -> IMPRIMIRSALTO . PARIZQ l_exp PARDER PTCOMA

    PARIZQ          shift and go to state 36


state 20

    (26) definicion_instr -> LOCAL . asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA

    ID              shift and go to state 38

    asignacion_instr               shift and go to state 37

state 21

    (27) definicion_instr -> GLOBAL . asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA

    ID              shift and go to state 38

    asignacion_instr               shift and go to state 39

state 22

    (28) asignacion_instr -> ID . IGUAL expresion PTCOMA
    (29) asignacion_instr -> ID . IGUAL expresion DOSPT tipo_var PTCOMA
    (57) llamada_funcion_instr -> ID . PARIZQ PARDER
    (58) llamada_funcion_instr -> ID . PARIZQ expList PARDER
    (49) declareStructST -> ID . DOSPT ID
    (50) assignAccessST -> ID . PUNTO ID IGUAL expresion

    IGUAL           shift and go to state 40
    PARIZQ          shift and go to state 42
    DOSPT           shift and go to state 41
    PUNTO           shift and go to state 43


state 23

    (35) mientras_instr -> MIENTRAS . expresion instrucciones END PTCOMA
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 44
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 24

    (38) if_instr -> IF . expresion instrucciones END PTCOMA
    (39) if_instr -> IF . expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> IF . expresion instrucciones elseIfList END PTCOMA
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 65
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 25

    (53) funcion_instr -> FUNC . ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> FUNC . ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA

    ID              shift and go to state 66


state 26

    (44) createStruct -> ESTRUCTURA . ID attList END PTCOMA

    ID              shift and go to state 67


state 27

    (22) retorno_inst -> RETORNO . expresion PTCOMA
    (23) retorno_inst -> RETORNO . PTCOMA
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    PTCOMA          shift and go to state 69
    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 68
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 28

    (24) break_inst -> BREAK . PTCOMA

    PTCOMA          shift and go to state 70


state 29

    (25) continue_inst -> CONTINUE . PTCOMA

    PTCOMA          shift and go to state 71


state 30

    (36) for_instr -> FOR . ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> FOR . ID IN expresion instrucciones END PTCOMA

    ID              shift and go to state 72


state 31

    (2) instrucciones -> instrucciones instruccion .

    IMPRIMIR        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IMPRIMIRSALTO   reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOCAL           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    GLOBAL          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MIENTRAS        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNC            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ESTRUCTURA      reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETORNO         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    END             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSEIF          reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 32

    (10) instruccion -> llamada_funcion_instr PTCOMA .

    IMPRIMIR        reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    LOCAL           reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    GLOBAL          reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    ID              reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    MIENTRAS        reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    IF              reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    FUNC            reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    ESTRUCTURA      reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    RETORNO         reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    BREAK           reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    CONTINUE        reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    FOR             reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    $end            reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    END             reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    ELSE            reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)
    ELSEIF          reduce using rule 10 (instruccion -> llamada_funcion_instr PTCOMA .)


state 33

    (12) instruccion -> declareStructST PTCOMA .

    IMPRIMIR        reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    LOCAL           reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    GLOBAL          reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    ID              reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    MIENTRAS        reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    IF              reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    FUNC            reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    ESTRUCTURA      reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    RETORNO         reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    BREAK           reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    CONTINUE        reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    FOR             reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    $end            reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    END             reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    ELSE            reduce using rule 12 (instruccion -> declareStructST PTCOMA .)
    ELSEIF          reduce using rule 12 (instruccion -> declareStructST PTCOMA .)


state 34

    (13) instruccion -> assignAccessST PTCOMA .

    IMPRIMIR        reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    LOCAL           reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    GLOBAL          reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    ID              reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    MIENTRAS        reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    IF              reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    FUNC            reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    ESTRUCTURA      reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    RETORNO         reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    BREAK           reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    CONTINUE        reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    FOR             reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    $end            reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    END             reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    ELSE            reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)
    ELSEIF          reduce using rule 13 (instruccion -> assignAccessST PTCOMA .)


state 35

    (18) imprimir_instr -> IMPRIMIR PARIZQ . expresion PARDER PTCOMA
    (20) imprimir_instr -> IMPRIMIR PARIZQ . l_exp PARDER PTCOMA
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (51) l_exp -> . l_exp COMA expresion
    (52) l_exp -> . expresion
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 73
    l_exp                          shift and go to state 74
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 36

    (19) imprimir_instr -> IMPRIMIRSALTO PARIZQ . expresion PARDER PTCOMA
    (21) imprimir_instr -> IMPRIMIRSALTO PARIZQ . l_exp PARDER PTCOMA
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (51) l_exp -> . l_exp COMA expresion
    (52) l_exp -> . expresion
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 75
    l_exp                          shift and go to state 76
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 37

    (26) definicion_instr -> LOCAL asignacion_instr .

    IMPRIMIR        reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    IMPRIMIRSALTO   reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    LOCAL           reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    GLOBAL          reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    ID              reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    MIENTRAS        reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    IF              reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    FUNC            reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    ESTRUCTURA      reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    RETORNO         reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    BREAK           reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    CONTINUE        reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    FOR             reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    $end            reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    END             reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    ELSE            reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)
    ELSEIF          reduce using rule 26 (definicion_instr -> LOCAL asignacion_instr .)


state 38

    (28) asignacion_instr -> ID . IGUAL expresion PTCOMA
    (29) asignacion_instr -> ID . IGUAL expresion DOSPT tipo_var PTCOMA

    IGUAL           shift and go to state 40


state 39

    (27) definicion_instr -> GLOBAL asignacion_instr .

    IMPRIMIR        reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    IMPRIMIRSALTO   reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    LOCAL           reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    GLOBAL          reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    ID              reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    MIENTRAS        reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    IF              reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    FUNC            reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    ESTRUCTURA      reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    RETORNO         reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    BREAK           reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    CONTINUE        reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    FOR             reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    $end            reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    END             reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    ELSE            reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)
    ELSEIF          reduce using rule 27 (definicion_instr -> GLOBAL asignacion_instr .)


state 40

    (28) asignacion_instr -> ID IGUAL . expresion PTCOMA
    (29) asignacion_instr -> ID IGUAL . expresion DOSPT tipo_var PTCOMA
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 77
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 41

    (49) declareStructST -> ID DOSPT . ID

    ID              shift and go to state 78


state 42

    (57) llamada_funcion_instr -> ID PARIZQ . PARDER
    (58) llamada_funcion_instr -> ID PARIZQ . expList PARDER
    (59) expList -> . expList COMA expresion
    (60) expList -> . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    PARDER          shift and go to state 79
    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expList                        shift and go to state 80
    expresion                      shift and go to state 81
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 43

    (50) assignAccessST -> ID PUNTO . ID IGUAL expresion

    ID              shift and go to state 82


state 44

    (35) mientras_instr -> MIENTRAS expresion . instrucciones END PTCOMA
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instrucciones                  shift and go to state 83
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 45

    (81) expresion -> MENOS . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 98
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 46

    (77) expresion -> finalExp .

    MAS             reduce using rule 77 (expresion -> finalExp .)
    MENOS           reduce using rule 77 (expresion -> finalExp .)
    POR             reduce using rule 77 (expresion -> finalExp .)
    DIVIDIDO        reduce using rule 77 (expresion -> finalExp .)
    OR              reduce using rule 77 (expresion -> finalExp .)
    AND             reduce using rule 77 (expresion -> finalExp .)
    IGUALQUE        reduce using rule 77 (expresion -> finalExp .)
    NIGUALQUE       reduce using rule 77 (expresion -> finalExp .)
    MAYQUE          reduce using rule 77 (expresion -> finalExp .)
    MENQUE          reduce using rule 77 (expresion -> finalExp .)
    MAYIGQUE        reduce using rule 77 (expresion -> finalExp .)
    MENIGQUE        reduce using rule 77 (expresion -> finalExp .)
    POTENCIA        reduce using rule 77 (expresion -> finalExp .)
    MOD             reduce using rule 77 (expresion -> finalExp .)
    IMPRIMIR        reduce using rule 77 (expresion -> finalExp .)
    IMPRIMIRSALTO   reduce using rule 77 (expresion -> finalExp .)
    LOCAL           reduce using rule 77 (expresion -> finalExp .)
    GLOBAL          reduce using rule 77 (expresion -> finalExp .)
    ID              reduce using rule 77 (expresion -> finalExp .)
    MIENTRAS        reduce using rule 77 (expresion -> finalExp .)
    IF              reduce using rule 77 (expresion -> finalExp .)
    FUNC            reduce using rule 77 (expresion -> finalExp .)
    ESTRUCTURA      reduce using rule 77 (expresion -> finalExp .)
    RETORNO         reduce using rule 77 (expresion -> finalExp .)
    BREAK           reduce using rule 77 (expresion -> finalExp .)
    CONTINUE        reduce using rule 77 (expresion -> finalExp .)
    FOR             reduce using rule 77 (expresion -> finalExp .)
    PTCOMA          reduce using rule 77 (expresion -> finalExp .)
    PARDER          reduce using rule 77 (expresion -> finalExp .)
    COMA            reduce using rule 77 (expresion -> finalExp .)
    DOSPT           reduce using rule 77 (expresion -> finalExp .)
    CORDER          reduce using rule 77 (expresion -> finalExp .)
    PUNTOS          reduce using rule 77 (expresion -> finalExp .)


state 47

    (82) expresion -> NOT . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 99
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 48

    (83) expresion -> PARIZQ . expresion PARDER
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 100
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 49

    (84) expresion -> ID .
    (85) expresion -> ID . CORIZQ ENTERO CORDER
    (57) llamada_funcion_instr -> ID . PARIZQ PARDER
    (58) llamada_funcion_instr -> ID . PARIZQ expList PARDER
    (80) accessST -> ID . PUNTO ID

    MAS             reduce using rule 84 (expresion -> ID .)
    MENOS           reduce using rule 84 (expresion -> ID .)
    POR             reduce using rule 84 (expresion -> ID .)
    DIVIDIDO        reduce using rule 84 (expresion -> ID .)
    OR              reduce using rule 84 (expresion -> ID .)
    AND             reduce using rule 84 (expresion -> ID .)
    IGUALQUE        reduce using rule 84 (expresion -> ID .)
    NIGUALQUE       reduce using rule 84 (expresion -> ID .)
    MAYQUE          reduce using rule 84 (expresion -> ID .)
    MENQUE          reduce using rule 84 (expresion -> ID .)
    MAYIGQUE        reduce using rule 84 (expresion -> ID .)
    MENIGQUE        reduce using rule 84 (expresion -> ID .)
    POTENCIA        reduce using rule 84 (expresion -> ID .)
    MOD             reduce using rule 84 (expresion -> ID .)
    IMPRIMIR        reduce using rule 84 (expresion -> ID .)
    IMPRIMIRSALTO   reduce using rule 84 (expresion -> ID .)
    LOCAL           reduce using rule 84 (expresion -> ID .)
    GLOBAL          reduce using rule 84 (expresion -> ID .)
    ID              reduce using rule 84 (expresion -> ID .)
    MIENTRAS        reduce using rule 84 (expresion -> ID .)
    IF              reduce using rule 84 (expresion -> ID .)
    FUNC            reduce using rule 84 (expresion -> ID .)
    ESTRUCTURA      reduce using rule 84 (expresion -> ID .)
    RETORNO         reduce using rule 84 (expresion -> ID .)
    BREAK           reduce using rule 84 (expresion -> ID .)
    CONTINUE        reduce using rule 84 (expresion -> ID .)
    FOR             reduce using rule 84 (expresion -> ID .)
    PTCOMA          reduce using rule 84 (expresion -> ID .)
    PARDER          reduce using rule 84 (expresion -> ID .)
    COMA            reduce using rule 84 (expresion -> ID .)
    DOSPT           reduce using rule 84 (expresion -> ID .)
    CORDER          reduce using rule 84 (expresion -> ID .)
    PUNTOS          reduce using rule 84 (expresion -> ID .)
    CORIZQ          shift and go to state 101
    PARIZQ          shift and go to state 42
    PUNTO           shift and go to state 102


state 50

    (87) expresion -> CORIZQ . l_exp CORDER
    (51) l_exp -> . l_exp COMA expresion
    (52) l_exp -> . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    l_exp                          shift and go to state 103
    expresion                      shift and go to state 104
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 51

    (86) expresion -> ENTERO .

    MAS             reduce using rule 86 (expresion -> ENTERO .)
    MENOS           reduce using rule 86 (expresion -> ENTERO .)
    POR             reduce using rule 86 (expresion -> ENTERO .)
    DIVIDIDO        reduce using rule 86 (expresion -> ENTERO .)
    OR              reduce using rule 86 (expresion -> ENTERO .)
    AND             reduce using rule 86 (expresion -> ENTERO .)
    IGUALQUE        reduce using rule 86 (expresion -> ENTERO .)
    NIGUALQUE       reduce using rule 86 (expresion -> ENTERO .)
    MAYQUE          reduce using rule 86 (expresion -> ENTERO .)
    MENQUE          reduce using rule 86 (expresion -> ENTERO .)
    MAYIGQUE        reduce using rule 86 (expresion -> ENTERO .)
    MENIGQUE        reduce using rule 86 (expresion -> ENTERO .)
    POTENCIA        reduce using rule 86 (expresion -> ENTERO .)
    MOD             reduce using rule 86 (expresion -> ENTERO .)
    IMPRIMIR        reduce using rule 86 (expresion -> ENTERO .)
    IMPRIMIRSALTO   reduce using rule 86 (expresion -> ENTERO .)
    LOCAL           reduce using rule 86 (expresion -> ENTERO .)
    GLOBAL          reduce using rule 86 (expresion -> ENTERO .)
    ID              reduce using rule 86 (expresion -> ENTERO .)
    MIENTRAS        reduce using rule 86 (expresion -> ENTERO .)
    IF              reduce using rule 86 (expresion -> ENTERO .)
    FUNC            reduce using rule 86 (expresion -> ENTERO .)
    ESTRUCTURA      reduce using rule 86 (expresion -> ENTERO .)
    RETORNO         reduce using rule 86 (expresion -> ENTERO .)
    BREAK           reduce using rule 86 (expresion -> ENTERO .)
    CONTINUE        reduce using rule 86 (expresion -> ENTERO .)
    FOR             reduce using rule 86 (expresion -> ENTERO .)
    PTCOMA          reduce using rule 86 (expresion -> ENTERO .)
    PARDER          reduce using rule 86 (expresion -> ENTERO .)
    COMA            reduce using rule 86 (expresion -> ENTERO .)
    DOSPT           reduce using rule 86 (expresion -> ENTERO .)
    CORDER          reduce using rule 86 (expresion -> ENTERO .)
    PUNTOS          reduce using rule 86 (expresion -> ENTERO .)


state 52

    (88) expresion -> DECIMAL .

    MAS             reduce using rule 88 (expresion -> DECIMAL .)
    MENOS           reduce using rule 88 (expresion -> DECIMAL .)
    POR             reduce using rule 88 (expresion -> DECIMAL .)
    DIVIDIDO        reduce using rule 88 (expresion -> DECIMAL .)
    OR              reduce using rule 88 (expresion -> DECIMAL .)
    AND             reduce using rule 88 (expresion -> DECIMAL .)
    IGUALQUE        reduce using rule 88 (expresion -> DECIMAL .)
    NIGUALQUE       reduce using rule 88 (expresion -> DECIMAL .)
    MAYQUE          reduce using rule 88 (expresion -> DECIMAL .)
    MENQUE          reduce using rule 88 (expresion -> DECIMAL .)
    MAYIGQUE        reduce using rule 88 (expresion -> DECIMAL .)
    MENIGQUE        reduce using rule 88 (expresion -> DECIMAL .)
    POTENCIA        reduce using rule 88 (expresion -> DECIMAL .)
    MOD             reduce using rule 88 (expresion -> DECIMAL .)
    IMPRIMIR        reduce using rule 88 (expresion -> DECIMAL .)
    IMPRIMIRSALTO   reduce using rule 88 (expresion -> DECIMAL .)
    LOCAL           reduce using rule 88 (expresion -> DECIMAL .)
    GLOBAL          reduce using rule 88 (expresion -> DECIMAL .)
    ID              reduce using rule 88 (expresion -> DECIMAL .)
    MIENTRAS        reduce using rule 88 (expresion -> DECIMAL .)
    IF              reduce using rule 88 (expresion -> DECIMAL .)
    FUNC            reduce using rule 88 (expresion -> DECIMAL .)
    ESTRUCTURA      reduce using rule 88 (expresion -> DECIMAL .)
    RETORNO         reduce using rule 88 (expresion -> DECIMAL .)
    BREAK           reduce using rule 88 (expresion -> DECIMAL .)
    CONTINUE        reduce using rule 88 (expresion -> DECIMAL .)
    FOR             reduce using rule 88 (expresion -> DECIMAL .)
    PTCOMA          reduce using rule 88 (expresion -> DECIMAL .)
    PARDER          reduce using rule 88 (expresion -> DECIMAL .)
    COMA            reduce using rule 88 (expresion -> DECIMAL .)
    DOSPT           reduce using rule 88 (expresion -> DECIMAL .)
    CORDER          reduce using rule 88 (expresion -> DECIMAL .)
    PUNTOS          reduce using rule 88 (expresion -> DECIMAL .)


state 53

    (89) expresion -> CARACTER .

    MAS             reduce using rule 89 (expresion -> CARACTER .)
    MENOS           reduce using rule 89 (expresion -> CARACTER .)
    POR             reduce using rule 89 (expresion -> CARACTER .)
    DIVIDIDO        reduce using rule 89 (expresion -> CARACTER .)
    OR              reduce using rule 89 (expresion -> CARACTER .)
    AND             reduce using rule 89 (expresion -> CARACTER .)
    IGUALQUE        reduce using rule 89 (expresion -> CARACTER .)
    NIGUALQUE       reduce using rule 89 (expresion -> CARACTER .)
    MAYQUE          reduce using rule 89 (expresion -> CARACTER .)
    MENQUE          reduce using rule 89 (expresion -> CARACTER .)
    MAYIGQUE        reduce using rule 89 (expresion -> CARACTER .)
    MENIGQUE        reduce using rule 89 (expresion -> CARACTER .)
    POTENCIA        reduce using rule 89 (expresion -> CARACTER .)
    MOD             reduce using rule 89 (expresion -> CARACTER .)
    IMPRIMIR        reduce using rule 89 (expresion -> CARACTER .)
    IMPRIMIRSALTO   reduce using rule 89 (expresion -> CARACTER .)
    LOCAL           reduce using rule 89 (expresion -> CARACTER .)
    GLOBAL          reduce using rule 89 (expresion -> CARACTER .)
    ID              reduce using rule 89 (expresion -> CARACTER .)
    MIENTRAS        reduce using rule 89 (expresion -> CARACTER .)
    IF              reduce using rule 89 (expresion -> CARACTER .)
    FUNC            reduce using rule 89 (expresion -> CARACTER .)
    ESTRUCTURA      reduce using rule 89 (expresion -> CARACTER .)
    RETORNO         reduce using rule 89 (expresion -> CARACTER .)
    BREAK           reduce using rule 89 (expresion -> CARACTER .)
    CONTINUE        reduce using rule 89 (expresion -> CARACTER .)
    FOR             reduce using rule 89 (expresion -> CARACTER .)
    PTCOMA          reduce using rule 89 (expresion -> CARACTER .)
    PARDER          reduce using rule 89 (expresion -> CARACTER .)
    COMA            reduce using rule 89 (expresion -> CARACTER .)
    DOSPT           reduce using rule 89 (expresion -> CARACTER .)
    CORDER          reduce using rule 89 (expresion -> CARACTER .)
    PUNTOS          reduce using rule 89 (expresion -> CARACTER .)


state 54

    (90) expresion -> CADENA .
    (99) expresion -> CADENA . POTENCIA ENTERO

  ! shift/reduce conflict for POTENCIA resolved as shift
    MAS             reduce using rule 90 (expresion -> CADENA .)
    MENOS           reduce using rule 90 (expresion -> CADENA .)
    POR             reduce using rule 90 (expresion -> CADENA .)
    DIVIDIDO        reduce using rule 90 (expresion -> CADENA .)
    OR              reduce using rule 90 (expresion -> CADENA .)
    AND             reduce using rule 90 (expresion -> CADENA .)
    IGUALQUE        reduce using rule 90 (expresion -> CADENA .)
    NIGUALQUE       reduce using rule 90 (expresion -> CADENA .)
    MAYQUE          reduce using rule 90 (expresion -> CADENA .)
    MENQUE          reduce using rule 90 (expresion -> CADENA .)
    MAYIGQUE        reduce using rule 90 (expresion -> CADENA .)
    MENIGQUE        reduce using rule 90 (expresion -> CADENA .)
    MOD             reduce using rule 90 (expresion -> CADENA .)
    IMPRIMIR        reduce using rule 90 (expresion -> CADENA .)
    IMPRIMIRSALTO   reduce using rule 90 (expresion -> CADENA .)
    LOCAL           reduce using rule 90 (expresion -> CADENA .)
    GLOBAL          reduce using rule 90 (expresion -> CADENA .)
    ID              reduce using rule 90 (expresion -> CADENA .)
    MIENTRAS        reduce using rule 90 (expresion -> CADENA .)
    IF              reduce using rule 90 (expresion -> CADENA .)
    FUNC            reduce using rule 90 (expresion -> CADENA .)
    ESTRUCTURA      reduce using rule 90 (expresion -> CADENA .)
    RETORNO         reduce using rule 90 (expresion -> CADENA .)
    BREAK           reduce using rule 90 (expresion -> CADENA .)
    CONTINUE        reduce using rule 90 (expresion -> CADENA .)
    FOR             reduce using rule 90 (expresion -> CADENA .)
    PTCOMA          reduce using rule 90 (expresion -> CADENA .)
    PARDER          reduce using rule 90 (expresion -> CADENA .)
    COMA            reduce using rule 90 (expresion -> CADENA .)
    DOSPT           reduce using rule 90 (expresion -> CADENA .)
    CORDER          reduce using rule 90 (expresion -> CADENA .)
    PUNTOS          reduce using rule 90 (expresion -> CADENA .)
    POTENCIA        shift and go to state 105

  ! POTENCIA        [ reduce using rule 90 (expresion -> CADENA .) ]


state 55

    (91) expresion -> VERDADERO .

    MAS             reduce using rule 91 (expresion -> VERDADERO .)
    MENOS           reduce using rule 91 (expresion -> VERDADERO .)
    POR             reduce using rule 91 (expresion -> VERDADERO .)
    DIVIDIDO        reduce using rule 91 (expresion -> VERDADERO .)
    OR              reduce using rule 91 (expresion -> VERDADERO .)
    AND             reduce using rule 91 (expresion -> VERDADERO .)
    IGUALQUE        reduce using rule 91 (expresion -> VERDADERO .)
    NIGUALQUE       reduce using rule 91 (expresion -> VERDADERO .)
    MAYQUE          reduce using rule 91 (expresion -> VERDADERO .)
    MENQUE          reduce using rule 91 (expresion -> VERDADERO .)
    MAYIGQUE        reduce using rule 91 (expresion -> VERDADERO .)
    MENIGQUE        reduce using rule 91 (expresion -> VERDADERO .)
    POTENCIA        reduce using rule 91 (expresion -> VERDADERO .)
    MOD             reduce using rule 91 (expresion -> VERDADERO .)
    IMPRIMIR        reduce using rule 91 (expresion -> VERDADERO .)
    IMPRIMIRSALTO   reduce using rule 91 (expresion -> VERDADERO .)
    LOCAL           reduce using rule 91 (expresion -> VERDADERO .)
    GLOBAL          reduce using rule 91 (expresion -> VERDADERO .)
    ID              reduce using rule 91 (expresion -> VERDADERO .)
    MIENTRAS        reduce using rule 91 (expresion -> VERDADERO .)
    IF              reduce using rule 91 (expresion -> VERDADERO .)
    FUNC            reduce using rule 91 (expresion -> VERDADERO .)
    ESTRUCTURA      reduce using rule 91 (expresion -> VERDADERO .)
    RETORNO         reduce using rule 91 (expresion -> VERDADERO .)
    BREAK           reduce using rule 91 (expresion -> VERDADERO .)
    CONTINUE        reduce using rule 91 (expresion -> VERDADERO .)
    FOR             reduce using rule 91 (expresion -> VERDADERO .)
    PTCOMA          reduce using rule 91 (expresion -> VERDADERO .)
    PARDER          reduce using rule 91 (expresion -> VERDADERO .)
    COMA            reduce using rule 91 (expresion -> VERDADERO .)
    DOSPT           reduce using rule 91 (expresion -> VERDADERO .)
    CORDER          reduce using rule 91 (expresion -> VERDADERO .)
    PUNTOS          reduce using rule 91 (expresion -> VERDADERO .)


state 56

    (92) expresion -> FALSO .

    MAS             reduce using rule 92 (expresion -> FALSO .)
    MENOS           reduce using rule 92 (expresion -> FALSO .)
    POR             reduce using rule 92 (expresion -> FALSO .)
    DIVIDIDO        reduce using rule 92 (expresion -> FALSO .)
    OR              reduce using rule 92 (expresion -> FALSO .)
    AND             reduce using rule 92 (expresion -> FALSO .)
    IGUALQUE        reduce using rule 92 (expresion -> FALSO .)
    NIGUALQUE       reduce using rule 92 (expresion -> FALSO .)
    MAYQUE          reduce using rule 92 (expresion -> FALSO .)
    MENQUE          reduce using rule 92 (expresion -> FALSO .)
    MAYIGQUE        reduce using rule 92 (expresion -> FALSO .)
    MENIGQUE        reduce using rule 92 (expresion -> FALSO .)
    POTENCIA        reduce using rule 92 (expresion -> FALSO .)
    MOD             reduce using rule 92 (expresion -> FALSO .)
    IMPRIMIR        reduce using rule 92 (expresion -> FALSO .)
    IMPRIMIRSALTO   reduce using rule 92 (expresion -> FALSO .)
    LOCAL           reduce using rule 92 (expresion -> FALSO .)
    GLOBAL          reduce using rule 92 (expresion -> FALSO .)
    ID              reduce using rule 92 (expresion -> FALSO .)
    MIENTRAS        reduce using rule 92 (expresion -> FALSO .)
    IF              reduce using rule 92 (expresion -> FALSO .)
    FUNC            reduce using rule 92 (expresion -> FALSO .)
    ESTRUCTURA      reduce using rule 92 (expresion -> FALSO .)
    RETORNO         reduce using rule 92 (expresion -> FALSO .)
    BREAK           reduce using rule 92 (expresion -> FALSO .)
    CONTINUE        reduce using rule 92 (expresion -> FALSO .)
    FOR             reduce using rule 92 (expresion -> FALSO .)
    PTCOMA          reduce using rule 92 (expresion -> FALSO .)
    PARDER          reduce using rule 92 (expresion -> FALSO .)
    COMA            reduce using rule 92 (expresion -> FALSO .)
    DOSPT           reduce using rule 92 (expresion -> FALSO .)
    CORDER          reduce using rule 92 (expresion -> FALSO .)
    PUNTOS          reduce using rule 92 (expresion -> FALSO .)


state 57

    (93) expresion -> UPPER . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 106


state 58

    (94) expresion -> LOWER . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 107


state 59

    (95) expresion -> LEN . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 108


state 60

    (96) expresion -> PARSE . PARIZQ tipo_var COMA expresion PARDER

    PARIZQ          shift and go to state 109


state 61

    (97) expresion -> TRUNC . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 110


state 62

    (98) expresion -> STRING . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 111


state 63

    (78) finalExp -> llamada_funcion_instr .

    MAS             reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    MENOS           reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    POR             reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    DIVIDIDO        reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    OR              reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    AND             reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    IGUALQUE        reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    NIGUALQUE       reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    MAYQUE          reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    MENQUE          reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    MAYIGQUE        reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    MENIGQUE        reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    POTENCIA        reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    MOD             reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    IMPRIMIR        reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    IMPRIMIRSALTO   reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    LOCAL           reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    GLOBAL          reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    ID              reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    MIENTRAS        reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    IF              reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    FUNC            reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    ESTRUCTURA      reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    RETORNO         reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    BREAK           reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    CONTINUE        reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    FOR             reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    PTCOMA          reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    PARDER          reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    COMA            reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    DOSPT           reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    CORDER          reduce using rule 78 (finalExp -> llamada_funcion_instr .)
    PUNTOS          reduce using rule 78 (finalExp -> llamada_funcion_instr .)


state 64

    (79) finalExp -> accessST .

    MAS             reduce using rule 79 (finalExp -> accessST .)
    MENOS           reduce using rule 79 (finalExp -> accessST .)
    POR             reduce using rule 79 (finalExp -> accessST .)
    DIVIDIDO        reduce using rule 79 (finalExp -> accessST .)
    OR              reduce using rule 79 (finalExp -> accessST .)
    AND             reduce using rule 79 (finalExp -> accessST .)
    IGUALQUE        reduce using rule 79 (finalExp -> accessST .)
    NIGUALQUE       reduce using rule 79 (finalExp -> accessST .)
    MAYQUE          reduce using rule 79 (finalExp -> accessST .)
    MENQUE          reduce using rule 79 (finalExp -> accessST .)
    MAYIGQUE        reduce using rule 79 (finalExp -> accessST .)
    MENIGQUE        reduce using rule 79 (finalExp -> accessST .)
    POTENCIA        reduce using rule 79 (finalExp -> accessST .)
    MOD             reduce using rule 79 (finalExp -> accessST .)
    IMPRIMIR        reduce using rule 79 (finalExp -> accessST .)
    IMPRIMIRSALTO   reduce using rule 79 (finalExp -> accessST .)
    LOCAL           reduce using rule 79 (finalExp -> accessST .)
    GLOBAL          reduce using rule 79 (finalExp -> accessST .)
    ID              reduce using rule 79 (finalExp -> accessST .)
    MIENTRAS        reduce using rule 79 (finalExp -> accessST .)
    IF              reduce using rule 79 (finalExp -> accessST .)
    FUNC            reduce using rule 79 (finalExp -> accessST .)
    ESTRUCTURA      reduce using rule 79 (finalExp -> accessST .)
    RETORNO         reduce using rule 79 (finalExp -> accessST .)
    BREAK           reduce using rule 79 (finalExp -> accessST .)
    CONTINUE        reduce using rule 79 (finalExp -> accessST .)
    FOR             reduce using rule 79 (finalExp -> accessST .)
    PTCOMA          reduce using rule 79 (finalExp -> accessST .)
    PARDER          reduce using rule 79 (finalExp -> accessST .)
    COMA            reduce using rule 79 (finalExp -> accessST .)
    DOSPT           reduce using rule 79 (finalExp -> accessST .)
    CORDER          reduce using rule 79 (finalExp -> accessST .)
    PUNTOS          reduce using rule 79 (finalExp -> accessST .)


state 65

    (38) if_instr -> IF expresion . instrucciones END PTCOMA
    (39) if_instr -> IF expresion . instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> IF expresion . instrucciones elseIfList END PTCOMA
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instrucciones                  shift and go to state 112
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 66

    (53) funcion_instr -> FUNC ID . PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> FUNC ID . PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA

    PARIZQ          shift and go to state 113


state 67

    (44) createStruct -> ESTRUCTURA ID . attList END PTCOMA
    (45) attList -> . attList PTCOMA ID DOSPT tipo_var PTCOMA
    (46) attList -> . attList PTCOMA ID PTCOMA
    (47) attList -> . ID
    (48) attList -> . ID DOSPT tipo_var

    ID              shift and go to state 114

    attList                        shift and go to state 115

state 68

    (22) retorno_inst -> RETORNO expresion . PTCOMA
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PTCOMA          shift and go to state 116
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 69

    (23) retorno_inst -> RETORNO PTCOMA .

    IMPRIMIR        reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    LOCAL           reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    GLOBAL          reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    ID              reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    MIENTRAS        reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    IF              reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    FUNC            reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    ESTRUCTURA      reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    RETORNO         reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    BREAK           reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    CONTINUE        reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    FOR             reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    $end            reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    END             reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    ELSE            reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)
    ELSEIF          reduce using rule 23 (retorno_inst -> RETORNO PTCOMA .)


state 70

    (24) break_inst -> BREAK PTCOMA .

    IMPRIMIR        reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    LOCAL           reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    GLOBAL          reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    ID              reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    MIENTRAS        reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    IF              reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    FUNC            reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    ESTRUCTURA      reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    RETORNO         reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    BREAK           reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    CONTINUE        reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    FOR             reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    $end            reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    END             reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    ELSE            reduce using rule 24 (break_inst -> BREAK PTCOMA .)
    ELSEIF          reduce using rule 24 (break_inst -> BREAK PTCOMA .)


state 71

    (25) continue_inst -> CONTINUE PTCOMA .

    IMPRIMIR        reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    LOCAL           reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    GLOBAL          reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    ID              reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    MIENTRAS        reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    IF              reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    FUNC            reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    ESTRUCTURA      reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    RETORNO         reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    BREAK           reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    CONTINUE        reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    FOR             reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    $end            reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    END             reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    ELSE            reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)
    ELSEIF          reduce using rule 25 (continue_inst -> CONTINUE PTCOMA .)


state 72

    (36) for_instr -> FOR ID . IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> FOR ID . IN expresion instrucciones END PTCOMA

    IN              shift and go to state 117


state 73

    (18) imprimir_instr -> IMPRIMIR PARIZQ expresion . PARDER PTCOMA
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion
    (52) l_exp -> expresion .

  ! shift/reduce conflict for PARDER resolved as shift
    PARDER          shift and go to state 118
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97
    COMA            reduce using rule 52 (l_exp -> expresion .)

  ! PARDER          [ reduce using rule 52 (l_exp -> expresion .) ]


state 74

    (20) imprimir_instr -> IMPRIMIR PARIZQ l_exp . PARDER PTCOMA
    (51) l_exp -> l_exp . COMA expresion

    PARDER          shift and go to state 119
    COMA            shift and go to state 120


state 75

    (19) imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion . PARDER PTCOMA
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion
    (52) l_exp -> expresion .

  ! shift/reduce conflict for PARDER resolved as shift
    PARDER          shift and go to state 121
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97
    COMA            reduce using rule 52 (l_exp -> expresion .)

  ! PARDER          [ reduce using rule 52 (l_exp -> expresion .) ]


state 76

    (21) imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp . PARDER PTCOMA
    (51) l_exp -> l_exp . COMA expresion

    PARDER          shift and go to state 122
    COMA            shift and go to state 120


state 77

    (28) asignacion_instr -> ID IGUAL expresion . PTCOMA
    (29) asignacion_instr -> ID IGUAL expresion . DOSPT tipo_var PTCOMA
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PTCOMA          shift and go to state 123
    DOSPT           shift and go to state 124
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 78

    (49) declareStructST -> ID DOSPT ID .

    PTCOMA          reduce using rule 49 (declareStructST -> ID DOSPT ID .)


state 79

    (57) llamada_funcion_instr -> ID PARIZQ PARDER .

    PTCOMA          reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MAS             reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MENOS           reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    POR             reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    OR              reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    AND             reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    IGUALQUE        reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    NIGUALQUE       reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MAYQUE          reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MENQUE          reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MAYIGQUE        reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MENIGQUE        reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    POTENCIA        reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MOD             reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    IMPRIMIR        reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    IMPRIMIRSALTO   reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    LOCAL           reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    GLOBAL          reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    ID              reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    MIENTRAS        reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    IF              reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    FUNC            reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    ESTRUCTURA      reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    RETORNO         reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    BREAK           reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    CONTINUE        reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    FOR             reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    PARDER          reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    COMA            reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    DOSPT           reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    CORDER          reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)
    PUNTOS          reduce using rule 57 (llamada_funcion_instr -> ID PARIZQ PARDER .)


state 80

    (58) llamada_funcion_instr -> ID PARIZQ expList . PARDER
    (59) expList -> expList . COMA expresion

    PARDER          shift and go to state 125
    COMA            shift and go to state 126


state 81

    (60) expList -> expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PARDER          reduce using rule 60 (expList -> expresion .)
    COMA            reduce using rule 60 (expList -> expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 82

    (50) assignAccessST -> ID PUNTO ID . IGUAL expresion

    IGUAL           shift and go to state 127


state 83

    (35) mientras_instr -> MIENTRAS expresion instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    END             shift and go to state 128
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instruccion                    shift and go to state 31
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 84

    (63) expresion -> expresion MAS . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 129
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 85

    (64) expresion -> expresion MENOS . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 130
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 86

    (65) expresion -> expresion POR . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 131
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 87

    (66) expresion -> expresion DIVIDIDO . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 132
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 88

    (67) expresion -> expresion OR . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 133
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 89

    (68) expresion -> expresion AND . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 134
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 90

    (69) expresion -> expresion IGUALQUE . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 135
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 91

    (70) expresion -> expresion NIGUALQUE . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 136
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 92

    (71) expresion -> expresion MAYQUE . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 137
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 93

    (72) expresion -> expresion MENQUE . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 138
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 94

    (73) expresion -> expresion MAYIGQUE . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 139
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 95

    (74) expresion -> expresion MENIGQUE . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 140
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 96

    (75) expresion -> expresion POTENCIA . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 141
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 97

    (76) expresion -> expresion MOD . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 142
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 98

    (81) expresion -> MENOS expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    MAS             reduce using rule 81 (expresion -> MENOS expresion .)
    MENOS           reduce using rule 81 (expresion -> MENOS expresion .)
    POR             reduce using rule 81 (expresion -> MENOS expresion .)
    DIVIDIDO        reduce using rule 81 (expresion -> MENOS expresion .)
    OR              reduce using rule 81 (expresion -> MENOS expresion .)
    AND             reduce using rule 81 (expresion -> MENOS expresion .)
    IGUALQUE        reduce using rule 81 (expresion -> MENOS expresion .)
    NIGUALQUE       reduce using rule 81 (expresion -> MENOS expresion .)
    MAYQUE          reduce using rule 81 (expresion -> MENOS expresion .)
    MENQUE          reduce using rule 81 (expresion -> MENOS expresion .)
    MAYIGQUE        reduce using rule 81 (expresion -> MENOS expresion .)
    MENIGQUE        reduce using rule 81 (expresion -> MENOS expresion .)
    POTENCIA        reduce using rule 81 (expresion -> MENOS expresion .)
    MOD             reduce using rule 81 (expresion -> MENOS expresion .)
    IMPRIMIR        reduce using rule 81 (expresion -> MENOS expresion .)
    IMPRIMIRSALTO   reduce using rule 81 (expresion -> MENOS expresion .)
    LOCAL           reduce using rule 81 (expresion -> MENOS expresion .)
    GLOBAL          reduce using rule 81 (expresion -> MENOS expresion .)
    ID              reduce using rule 81 (expresion -> MENOS expresion .)
    MIENTRAS        reduce using rule 81 (expresion -> MENOS expresion .)
    IF              reduce using rule 81 (expresion -> MENOS expresion .)
    FUNC            reduce using rule 81 (expresion -> MENOS expresion .)
    ESTRUCTURA      reduce using rule 81 (expresion -> MENOS expresion .)
    RETORNO         reduce using rule 81 (expresion -> MENOS expresion .)
    BREAK           reduce using rule 81 (expresion -> MENOS expresion .)
    CONTINUE        reduce using rule 81 (expresion -> MENOS expresion .)
    FOR             reduce using rule 81 (expresion -> MENOS expresion .)
    PTCOMA          reduce using rule 81 (expresion -> MENOS expresion .)
    PARDER          reduce using rule 81 (expresion -> MENOS expresion .)
    COMA            reduce using rule 81 (expresion -> MENOS expresion .)
    DOSPT           reduce using rule 81 (expresion -> MENOS expresion .)
    CORDER          reduce using rule 81 (expresion -> MENOS expresion .)
    PUNTOS          reduce using rule 81 (expresion -> MENOS expresion .)

  ! MAS             [ shift and go to state 84 ]
  ! MENOS           [ shift and go to state 85 ]
  ! POR             [ shift and go to state 86 ]
  ! DIVIDIDO        [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]
  ! POTENCIA        [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 97 ]


state 99

    (82) expresion -> NOT expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    MAS             reduce using rule 82 (expresion -> NOT expresion .)
    MENOS           reduce using rule 82 (expresion -> NOT expresion .)
    POR             reduce using rule 82 (expresion -> NOT expresion .)
    DIVIDIDO        reduce using rule 82 (expresion -> NOT expresion .)
    OR              reduce using rule 82 (expresion -> NOT expresion .)
    AND             reduce using rule 82 (expresion -> NOT expresion .)
    IGUALQUE        reduce using rule 82 (expresion -> NOT expresion .)
    NIGUALQUE       reduce using rule 82 (expresion -> NOT expresion .)
    MAYQUE          reduce using rule 82 (expresion -> NOT expresion .)
    MENQUE          reduce using rule 82 (expresion -> NOT expresion .)
    MAYIGQUE        reduce using rule 82 (expresion -> NOT expresion .)
    MENIGQUE        reduce using rule 82 (expresion -> NOT expresion .)
    POTENCIA        reduce using rule 82 (expresion -> NOT expresion .)
    MOD             reduce using rule 82 (expresion -> NOT expresion .)
    IMPRIMIR        reduce using rule 82 (expresion -> NOT expresion .)
    IMPRIMIRSALTO   reduce using rule 82 (expresion -> NOT expresion .)
    LOCAL           reduce using rule 82 (expresion -> NOT expresion .)
    GLOBAL          reduce using rule 82 (expresion -> NOT expresion .)
    ID              reduce using rule 82 (expresion -> NOT expresion .)
    MIENTRAS        reduce using rule 82 (expresion -> NOT expresion .)
    IF              reduce using rule 82 (expresion -> NOT expresion .)
    FUNC            reduce using rule 82 (expresion -> NOT expresion .)
    ESTRUCTURA      reduce using rule 82 (expresion -> NOT expresion .)
    RETORNO         reduce using rule 82 (expresion -> NOT expresion .)
    BREAK           reduce using rule 82 (expresion -> NOT expresion .)
    CONTINUE        reduce using rule 82 (expresion -> NOT expresion .)
    FOR             reduce using rule 82 (expresion -> NOT expresion .)
    PTCOMA          reduce using rule 82 (expresion -> NOT expresion .)
    PARDER          reduce using rule 82 (expresion -> NOT expresion .)
    COMA            reduce using rule 82 (expresion -> NOT expresion .)
    DOSPT           reduce using rule 82 (expresion -> NOT expresion .)
    CORDER          reduce using rule 82 (expresion -> NOT expresion .)
    PUNTOS          reduce using rule 82 (expresion -> NOT expresion .)

  ! MAS             [ shift and go to state 84 ]
  ! MENOS           [ shift and go to state 85 ]
  ! POR             [ shift and go to state 86 ]
  ! DIVIDIDO        [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]
  ! POTENCIA        [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 97 ]


state 100

    (83) expresion -> PARIZQ expresion . PARDER
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PARDER          shift and go to state 143
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 101

    (85) expresion -> ID CORIZQ . ENTERO CORDER

    ENTERO          shift and go to state 144


state 102

    (80) accessST -> ID PUNTO . ID

    ID              shift and go to state 145


state 103

    (87) expresion -> CORIZQ l_exp . CORDER
    (51) l_exp -> l_exp . COMA expresion

    CORDER          shift and go to state 146
    COMA            shift and go to state 120


state 104

    (52) l_exp -> expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    CORDER          reduce using rule 52 (l_exp -> expresion .)
    COMA            reduce using rule 52 (l_exp -> expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 105

    (99) expresion -> CADENA POTENCIA . ENTERO

    ENTERO          shift and go to state 147


state 106

    (93) expresion -> UPPER PARIZQ . expresion PARDER
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 148
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 107

    (94) expresion -> LOWER PARIZQ . expresion PARDER
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 149
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 108

    (95) expresion -> LEN PARIZQ . expresion PARDER
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 150
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 109

    (96) expresion -> PARSE PARIZQ . tipo_var COMA expresion PARDER
    (30) tipo_var -> . ENTERO64
    (31) tipo_var -> . DECIMAL64
    (32) tipo_var -> . BOOLEANO
    (33) tipo_var -> . CHAR
    (34) tipo_var -> . STRING

    ENTERO64        shift and go to state 152
    DECIMAL64       shift and go to state 153
    BOOLEANO        shift and go to state 154
    CHAR            shift and go to state 155
    STRING          shift and go to state 156

    tipo_var                       shift and go to state 151

state 110

    (97) expresion -> TRUNC PARIZQ . expresion PARDER
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 157
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 111

    (98) expresion -> STRING PARIZQ . expresion PARDER
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 158
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 112

    (38) if_instr -> IF expresion instrucciones . END PTCOMA
    (39) if_instr -> IF expresion instrucciones . ELSE instrucciones END PTCOMA
    (40) if_instr -> IF expresion instrucciones . elseIfList END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (41) elseIfList -> . ELSEIF expresion instrucciones
    (42) elseIfList -> . ELSEIF expresion instrucciones ELSE instrucciones
    (43) elseIfList -> . ELSEIF expresion instrucciones elseIfList
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    END             shift and go to state 159
    ELSE            shift and go to state 160
    ELSEIF          shift and go to state 162
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    elseIfList                     shift and go to state 161
    instruccion                    shift and go to state 31
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 113

    (53) funcion_instr -> FUNC ID PARIZQ . PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> FUNC ID PARIZQ . parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (55) parametros -> . parametros COMA ID tipo_var
    (56) parametros -> . ID tipo_var

    PARDER          shift and go to state 164
    ID              shift and go to state 163

    parametros                     shift and go to state 165

state 114

    (47) attList -> ID .
    (48) attList -> ID . DOSPT tipo_var

    END             reduce using rule 47 (attList -> ID .)
    PTCOMA          reduce using rule 47 (attList -> ID .)
    DOSPT           shift and go to state 166


state 115

    (44) createStruct -> ESTRUCTURA ID attList . END PTCOMA
    (45) attList -> attList . PTCOMA ID DOSPT tipo_var PTCOMA
    (46) attList -> attList . PTCOMA ID PTCOMA

    END             shift and go to state 167
    PTCOMA          shift and go to state 168


state 116

    (22) retorno_inst -> RETORNO expresion PTCOMA .

    IMPRIMIR        reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    LOCAL           reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    GLOBAL          reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    ID              reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    MIENTRAS        reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    IF              reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    FUNC            reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    ESTRUCTURA      reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    RETORNO         reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    BREAK           reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    CONTINUE        reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    FOR             reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    $end            reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    END             reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    ELSE            reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)
    ELSEIF          reduce using rule 22 (retorno_inst -> RETORNO expresion PTCOMA .)


state 117

    (36) for_instr -> FOR ID IN . expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> FOR ID IN . expresion instrucciones END PTCOMA
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 169
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 118

    (18) imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER . PTCOMA

    PTCOMA          shift and go to state 170


state 119

    (20) imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER . PTCOMA

    PTCOMA          shift and go to state 171


state 120

    (51) l_exp -> l_exp COMA . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 172
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 121

    (19) imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER . PTCOMA

    PTCOMA          shift and go to state 173


state 122

    (21) imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER . PTCOMA

    PTCOMA          shift and go to state 174


state 123

    (28) asignacion_instr -> ID IGUAL expresion PTCOMA .

    IMPRIMIR        reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    LOCAL           reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    GLOBAL          reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    ID              reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    MIENTRAS        reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    IF              reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    FUNC            reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    ESTRUCTURA      reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    RETORNO         reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    BREAK           reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    CONTINUE        reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    FOR             reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    $end            reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    END             reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    ELSE            reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)
    ELSEIF          reduce using rule 28 (asignacion_instr -> ID IGUAL expresion PTCOMA .)


state 124

    (29) asignacion_instr -> ID IGUAL expresion DOSPT . tipo_var PTCOMA
    (30) tipo_var -> . ENTERO64
    (31) tipo_var -> . DECIMAL64
    (32) tipo_var -> . BOOLEANO
    (33) tipo_var -> . CHAR
    (34) tipo_var -> . STRING

    ENTERO64        shift and go to state 152
    DECIMAL64       shift and go to state 153
    BOOLEANO        shift and go to state 154
    CHAR            shift and go to state 155
    STRING          shift and go to state 156

    tipo_var                       shift and go to state 175

state 125

    (58) llamada_funcion_instr -> ID PARIZQ expList PARDER .

    PTCOMA          reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    MAS             reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    MENOS           reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    POR             reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    DIVIDIDO        reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    OR              reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    AND             reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    IGUALQUE        reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    NIGUALQUE       reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    MAYQUE          reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    MENQUE          reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    MAYIGQUE        reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    MENIGQUE        reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    POTENCIA        reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    MOD             reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    IMPRIMIR        reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    IMPRIMIRSALTO   reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    LOCAL           reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    GLOBAL          reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    ID              reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    MIENTRAS        reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    IF              reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    FUNC            reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    ESTRUCTURA      reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    RETORNO         reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    BREAK           reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    CONTINUE        reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    FOR             reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    PARDER          reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    COMA            reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    DOSPT           reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    CORDER          reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)
    PUNTOS          reduce using rule 58 (llamada_funcion_instr -> ID PARIZQ expList PARDER .)


state 126

    (59) expList -> expList COMA . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 176
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 127

    (50) assignAccessST -> ID PUNTO ID IGUAL . expresion
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 177
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 128

    (35) mientras_instr -> MIENTRAS expresion instrucciones END . PTCOMA

    PTCOMA          shift and go to state 178


state 129

    (63) expresion -> expresion MAS expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    MAS             reduce using rule 63 (expresion -> expresion MAS expresion .)
    MENOS           reduce using rule 63 (expresion -> expresion MAS expresion .)
    OR              reduce using rule 63 (expresion -> expresion MAS expresion .)
    AND             reduce using rule 63 (expresion -> expresion MAS expresion .)
    IGUALQUE        reduce using rule 63 (expresion -> expresion MAS expresion .)
    NIGUALQUE       reduce using rule 63 (expresion -> expresion MAS expresion .)
    MAYQUE          reduce using rule 63 (expresion -> expresion MAS expresion .)
    MENQUE          reduce using rule 63 (expresion -> expresion MAS expresion .)
    MAYIGQUE        reduce using rule 63 (expresion -> expresion MAS expresion .)
    MENIGQUE        reduce using rule 63 (expresion -> expresion MAS expresion .)
    IMPRIMIR        reduce using rule 63 (expresion -> expresion MAS expresion .)
    IMPRIMIRSALTO   reduce using rule 63 (expresion -> expresion MAS expresion .)
    LOCAL           reduce using rule 63 (expresion -> expresion MAS expresion .)
    GLOBAL          reduce using rule 63 (expresion -> expresion MAS expresion .)
    ID              reduce using rule 63 (expresion -> expresion MAS expresion .)
    MIENTRAS        reduce using rule 63 (expresion -> expresion MAS expresion .)
    IF              reduce using rule 63 (expresion -> expresion MAS expresion .)
    FUNC            reduce using rule 63 (expresion -> expresion MAS expresion .)
    ESTRUCTURA      reduce using rule 63 (expresion -> expresion MAS expresion .)
    RETORNO         reduce using rule 63 (expresion -> expresion MAS expresion .)
    BREAK           reduce using rule 63 (expresion -> expresion MAS expresion .)
    CONTINUE        reduce using rule 63 (expresion -> expresion MAS expresion .)
    FOR             reduce using rule 63 (expresion -> expresion MAS expresion .)
    PTCOMA          reduce using rule 63 (expresion -> expresion MAS expresion .)
    PARDER          reduce using rule 63 (expresion -> expresion MAS expresion .)
    COMA            reduce using rule 63 (expresion -> expresion MAS expresion .)
    DOSPT           reduce using rule 63 (expresion -> expresion MAS expresion .)
    CORDER          reduce using rule 63 (expresion -> expresion MAS expresion .)
    PUNTOS          reduce using rule 63 (expresion -> expresion MAS expresion .)
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97

  ! POR             [ reduce using rule 63 (expresion -> expresion MAS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 63 (expresion -> expresion MAS expresion .) ]
  ! POTENCIA        [ reduce using rule 63 (expresion -> expresion MAS expresion .) ]
  ! MOD             [ reduce using rule 63 (expresion -> expresion MAS expresion .) ]
  ! MAS             [ shift and go to state 84 ]
  ! MENOS           [ shift and go to state 85 ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]


state 130

    (64) expresion -> expresion MENOS expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    MAS             reduce using rule 64 (expresion -> expresion MENOS expresion .)
    MENOS           reduce using rule 64 (expresion -> expresion MENOS expresion .)
    OR              reduce using rule 64 (expresion -> expresion MENOS expresion .)
    AND             reduce using rule 64 (expresion -> expresion MENOS expresion .)
    IGUALQUE        reduce using rule 64 (expresion -> expresion MENOS expresion .)
    NIGUALQUE       reduce using rule 64 (expresion -> expresion MENOS expresion .)
    MAYQUE          reduce using rule 64 (expresion -> expresion MENOS expresion .)
    MENQUE          reduce using rule 64 (expresion -> expresion MENOS expresion .)
    MAYIGQUE        reduce using rule 64 (expresion -> expresion MENOS expresion .)
    MENIGQUE        reduce using rule 64 (expresion -> expresion MENOS expresion .)
    IMPRIMIR        reduce using rule 64 (expresion -> expresion MENOS expresion .)
    IMPRIMIRSALTO   reduce using rule 64 (expresion -> expresion MENOS expresion .)
    LOCAL           reduce using rule 64 (expresion -> expresion MENOS expresion .)
    GLOBAL          reduce using rule 64 (expresion -> expresion MENOS expresion .)
    ID              reduce using rule 64 (expresion -> expresion MENOS expresion .)
    MIENTRAS        reduce using rule 64 (expresion -> expresion MENOS expresion .)
    IF              reduce using rule 64 (expresion -> expresion MENOS expresion .)
    FUNC            reduce using rule 64 (expresion -> expresion MENOS expresion .)
    ESTRUCTURA      reduce using rule 64 (expresion -> expresion MENOS expresion .)
    RETORNO         reduce using rule 64 (expresion -> expresion MENOS expresion .)
    BREAK           reduce using rule 64 (expresion -> expresion MENOS expresion .)
    CONTINUE        reduce using rule 64 (expresion -> expresion MENOS expresion .)
    FOR             reduce using rule 64 (expresion -> expresion MENOS expresion .)
    PTCOMA          reduce using rule 64 (expresion -> expresion MENOS expresion .)
    PARDER          reduce using rule 64 (expresion -> expresion MENOS expresion .)
    COMA            reduce using rule 64 (expresion -> expresion MENOS expresion .)
    DOSPT           reduce using rule 64 (expresion -> expresion MENOS expresion .)
    CORDER          reduce using rule 64 (expresion -> expresion MENOS expresion .)
    PUNTOS          reduce using rule 64 (expresion -> expresion MENOS expresion .)
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97

  ! POR             [ reduce using rule 64 (expresion -> expresion MENOS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 64 (expresion -> expresion MENOS expresion .) ]
  ! POTENCIA        [ reduce using rule 64 (expresion -> expresion MENOS expresion .) ]
  ! MOD             [ reduce using rule 64 (expresion -> expresion MENOS expresion .) ]
  ! MAS             [ shift and go to state 84 ]
  ! MENOS           [ shift and go to state 85 ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]


state 131

    (65) expresion -> expresion POR expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    MAS             reduce using rule 65 (expresion -> expresion POR expresion .)
    MENOS           reduce using rule 65 (expresion -> expresion POR expresion .)
    POR             reduce using rule 65 (expresion -> expresion POR expresion .)
    DIVIDIDO        reduce using rule 65 (expresion -> expresion POR expresion .)
    OR              reduce using rule 65 (expresion -> expresion POR expresion .)
    AND             reduce using rule 65 (expresion -> expresion POR expresion .)
    IGUALQUE        reduce using rule 65 (expresion -> expresion POR expresion .)
    NIGUALQUE       reduce using rule 65 (expresion -> expresion POR expresion .)
    MAYQUE          reduce using rule 65 (expresion -> expresion POR expresion .)
    MENQUE          reduce using rule 65 (expresion -> expresion POR expresion .)
    MAYIGQUE        reduce using rule 65 (expresion -> expresion POR expresion .)
    MENIGQUE        reduce using rule 65 (expresion -> expresion POR expresion .)
    MOD             reduce using rule 65 (expresion -> expresion POR expresion .)
    IMPRIMIR        reduce using rule 65 (expresion -> expresion POR expresion .)
    IMPRIMIRSALTO   reduce using rule 65 (expresion -> expresion POR expresion .)
    LOCAL           reduce using rule 65 (expresion -> expresion POR expresion .)
    GLOBAL          reduce using rule 65 (expresion -> expresion POR expresion .)
    ID              reduce using rule 65 (expresion -> expresion POR expresion .)
    MIENTRAS        reduce using rule 65 (expresion -> expresion POR expresion .)
    IF              reduce using rule 65 (expresion -> expresion POR expresion .)
    FUNC            reduce using rule 65 (expresion -> expresion POR expresion .)
    ESTRUCTURA      reduce using rule 65 (expresion -> expresion POR expresion .)
    RETORNO         reduce using rule 65 (expresion -> expresion POR expresion .)
    BREAK           reduce using rule 65 (expresion -> expresion POR expresion .)
    CONTINUE        reduce using rule 65 (expresion -> expresion POR expresion .)
    FOR             reduce using rule 65 (expresion -> expresion POR expresion .)
    PTCOMA          reduce using rule 65 (expresion -> expresion POR expresion .)
    PARDER          reduce using rule 65 (expresion -> expresion POR expresion .)
    COMA            reduce using rule 65 (expresion -> expresion POR expresion .)
    DOSPT           reduce using rule 65 (expresion -> expresion POR expresion .)
    CORDER          reduce using rule 65 (expresion -> expresion POR expresion .)
    PUNTOS          reduce using rule 65 (expresion -> expresion POR expresion .)
    POTENCIA        shift and go to state 96

  ! POTENCIA        [ reduce using rule 65 (expresion -> expresion POR expresion .) ]
  ! MAS             [ shift and go to state 84 ]
  ! MENOS           [ shift and go to state 85 ]
  ! POR             [ shift and go to state 86 ]
  ! DIVIDIDO        [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]
  ! MOD             [ shift and go to state 97 ]


state 132

    (66) expresion -> expresion DIVIDIDO expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    MAS             reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    MENOS           reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    POR             reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    DIVIDIDO        reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    OR              reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    AND             reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    IGUALQUE        reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    NIGUALQUE       reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    MAYQUE          reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    MENQUE          reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    MAYIGQUE        reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    MENIGQUE        reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    MOD             reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    IMPRIMIR        reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    IMPRIMIRSALTO   reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    LOCAL           reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    GLOBAL          reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    ID              reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    MIENTRAS        reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    IF              reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    FUNC            reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    ESTRUCTURA      reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    RETORNO         reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    BREAK           reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    CONTINUE        reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    FOR             reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    PTCOMA          reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    PARDER          reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    COMA            reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    DOSPT           reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    CORDER          reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    PUNTOS          reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .)
    POTENCIA        shift and go to state 96

  ! POTENCIA        [ reduce using rule 66 (expresion -> expresion DIVIDIDO expresion .) ]
  ! MAS             [ shift and go to state 84 ]
  ! MENOS           [ shift and go to state 85 ]
  ! POR             [ shift and go to state 86 ]
  ! DIVIDIDO        [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]
  ! MOD             [ shift and go to state 97 ]


state 133

    (67) expresion -> expresion OR expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    OR              reduce using rule 67 (expresion -> expresion OR expresion .)
    IMPRIMIR        reduce using rule 67 (expresion -> expresion OR expresion .)
    IMPRIMIRSALTO   reduce using rule 67 (expresion -> expresion OR expresion .)
    LOCAL           reduce using rule 67 (expresion -> expresion OR expresion .)
    GLOBAL          reduce using rule 67 (expresion -> expresion OR expresion .)
    ID              reduce using rule 67 (expresion -> expresion OR expresion .)
    MIENTRAS        reduce using rule 67 (expresion -> expresion OR expresion .)
    IF              reduce using rule 67 (expresion -> expresion OR expresion .)
    FUNC            reduce using rule 67 (expresion -> expresion OR expresion .)
    ESTRUCTURA      reduce using rule 67 (expresion -> expresion OR expresion .)
    RETORNO         reduce using rule 67 (expresion -> expresion OR expresion .)
    BREAK           reduce using rule 67 (expresion -> expresion OR expresion .)
    CONTINUE        reduce using rule 67 (expresion -> expresion OR expresion .)
    FOR             reduce using rule 67 (expresion -> expresion OR expresion .)
    PTCOMA          reduce using rule 67 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 67 (expresion -> expresion OR expresion .)
    COMA            reduce using rule 67 (expresion -> expresion OR expresion .)
    DOSPT           reduce using rule 67 (expresion -> expresion OR expresion .)
    CORDER          reduce using rule 67 (expresion -> expresion OR expresion .)
    PUNTOS          reduce using rule 67 (expresion -> expresion OR expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97

  ! MAS             [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! MENOS           [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! POR             [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! DIVIDIDO        [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! AND             [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! IGUALQUE        [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! NIGUALQUE       [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! MAYQUE          [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! MENQUE          [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! MAYIGQUE        [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! MENIGQUE        [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! POTENCIA        [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! MOD             [ reduce using rule 67 (expresion -> expresion OR expresion .) ]
  ! OR              [ shift and go to state 88 ]


state 134

    (68) expresion -> expresion AND expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    OR              reduce using rule 68 (expresion -> expresion AND expresion .)
    AND             reduce using rule 68 (expresion -> expresion AND expresion .)
    IMPRIMIR        reduce using rule 68 (expresion -> expresion AND expresion .)
    IMPRIMIRSALTO   reduce using rule 68 (expresion -> expresion AND expresion .)
    LOCAL           reduce using rule 68 (expresion -> expresion AND expresion .)
    GLOBAL          reduce using rule 68 (expresion -> expresion AND expresion .)
    ID              reduce using rule 68 (expresion -> expresion AND expresion .)
    MIENTRAS        reduce using rule 68 (expresion -> expresion AND expresion .)
    IF              reduce using rule 68 (expresion -> expresion AND expresion .)
    FUNC            reduce using rule 68 (expresion -> expresion AND expresion .)
    ESTRUCTURA      reduce using rule 68 (expresion -> expresion AND expresion .)
    RETORNO         reduce using rule 68 (expresion -> expresion AND expresion .)
    BREAK           reduce using rule 68 (expresion -> expresion AND expresion .)
    CONTINUE        reduce using rule 68 (expresion -> expresion AND expresion .)
    FOR             reduce using rule 68 (expresion -> expresion AND expresion .)
    PTCOMA          reduce using rule 68 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 68 (expresion -> expresion AND expresion .)
    COMA            reduce using rule 68 (expresion -> expresion AND expresion .)
    DOSPT           reduce using rule 68 (expresion -> expresion AND expresion .)
    CORDER          reduce using rule 68 (expresion -> expresion AND expresion .)
    PUNTOS          reduce using rule 68 (expresion -> expresion AND expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97

  ! MAS             [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! MENOS           [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! POR             [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! DIVIDIDO        [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! IGUALQUE        [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! NIGUALQUE       [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! MAYQUE          [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! MENQUE          [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! MAYIGQUE        [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! MENIGQUE        [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! POTENCIA        [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! MOD             [ reduce using rule 68 (expresion -> expresion AND expresion .) ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]


state 135

    (69) expresion -> expresion IGUALQUE expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    OR              reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    AND             reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    IGUALQUE        reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    NIGUALQUE       reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    MAYQUE          reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    MENQUE          reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    MAYIGQUE        reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    MENIGQUE        reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    IMPRIMIR        reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    LOCAL           reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    GLOBAL          reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    ID              reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    MIENTRAS        reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    IF              reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    FUNC            reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    ESTRUCTURA      reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    RETORNO         reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    BREAK           reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    CONTINUE        reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    FOR             reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    PTCOMA          reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    PARDER          reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    COMA            reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    DOSPT           reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    CORDER          reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    PUNTOS          reduce using rule 69 (expresion -> expresion IGUALQUE expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97

  ! MAS             [ reduce using rule 69 (expresion -> expresion IGUALQUE expresion .) ]
  ! MENOS           [ reduce using rule 69 (expresion -> expresion IGUALQUE expresion .) ]
  ! POR             [ reduce using rule 69 (expresion -> expresion IGUALQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 69 (expresion -> expresion IGUALQUE expresion .) ]
  ! POTENCIA        [ reduce using rule 69 (expresion -> expresion IGUALQUE expresion .) ]
  ! MOD             [ reduce using rule 69 (expresion -> expresion IGUALQUE expresion .) ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]


state 136

    (70) expresion -> expresion NIGUALQUE expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    OR              reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    AND             reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    IGUALQUE        reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    NIGUALQUE       reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    MAYQUE          reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    MENQUE          reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    MAYIGQUE        reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    MENIGQUE        reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    IMPRIMIR        reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    LOCAL           reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    GLOBAL          reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    ID              reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    MIENTRAS        reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    IF              reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    FUNC            reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    ESTRUCTURA      reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    RETORNO         reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    BREAK           reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    CONTINUE        reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    FOR             reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    PTCOMA          reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    PARDER          reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    COMA            reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    DOSPT           reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    CORDER          reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    PUNTOS          reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97

  ! MAS             [ reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .) ]
  ! MENOS           [ reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .) ]
  ! POR             [ reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .) ]
  ! POTENCIA        [ reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .) ]
  ! MOD             [ reduce using rule 70 (expresion -> expresion NIGUALQUE expresion .) ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]


state 137

    (71) expresion -> expresion MAYQUE expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    OR              reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    AND             reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    IGUALQUE        reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    NIGUALQUE       reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    MAYQUE          reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    MENQUE          reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    MAYIGQUE        reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    MENIGQUE        reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    IMPRIMIR        reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    LOCAL           reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    GLOBAL          reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    ID              reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    MIENTRAS        reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    IF              reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    FUNC            reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    ESTRUCTURA      reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    RETORNO         reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    BREAK           reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    CONTINUE        reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    FOR             reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    PTCOMA          reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    PARDER          reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    COMA            reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    DOSPT           reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    CORDER          reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    PUNTOS          reduce using rule 71 (expresion -> expresion MAYQUE expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97

  ! MAS             [ reduce using rule 71 (expresion -> expresion MAYQUE expresion .) ]
  ! MENOS           [ reduce using rule 71 (expresion -> expresion MAYQUE expresion .) ]
  ! POR             [ reduce using rule 71 (expresion -> expresion MAYQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 71 (expresion -> expresion MAYQUE expresion .) ]
  ! POTENCIA        [ reduce using rule 71 (expresion -> expresion MAYQUE expresion .) ]
  ! MOD             [ reduce using rule 71 (expresion -> expresion MAYQUE expresion .) ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]


state 138

    (72) expresion -> expresion MENQUE expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    OR              reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    AND             reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    IGUALQUE        reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    NIGUALQUE       reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    MAYQUE          reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    MENQUE          reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    MAYIGQUE        reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    MENIGQUE        reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    IMPRIMIR        reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    LOCAL           reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    GLOBAL          reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    ID              reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    MIENTRAS        reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    IF              reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    FUNC            reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    ESTRUCTURA      reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    RETORNO         reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    BREAK           reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    CONTINUE        reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    FOR             reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    PTCOMA          reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    PARDER          reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    COMA            reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    DOSPT           reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    CORDER          reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    PUNTOS          reduce using rule 72 (expresion -> expresion MENQUE expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97

  ! MAS             [ reduce using rule 72 (expresion -> expresion MENQUE expresion .) ]
  ! MENOS           [ reduce using rule 72 (expresion -> expresion MENQUE expresion .) ]
  ! POR             [ reduce using rule 72 (expresion -> expresion MENQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 72 (expresion -> expresion MENQUE expresion .) ]
  ! POTENCIA        [ reduce using rule 72 (expresion -> expresion MENQUE expresion .) ]
  ! MOD             [ reduce using rule 72 (expresion -> expresion MENQUE expresion .) ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]


state 139

    (73) expresion -> expresion MAYIGQUE expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    OR              reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    AND             reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    IGUALQUE        reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    NIGUALQUE       reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    MAYQUE          reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    MENQUE          reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    MAYIGQUE        reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    MENIGQUE        reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    IMPRIMIR        reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    LOCAL           reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    GLOBAL          reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    ID              reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    MIENTRAS        reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    IF              reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    FUNC            reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    ESTRUCTURA      reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    RETORNO         reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    BREAK           reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    CONTINUE        reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    FOR             reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    PTCOMA          reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    PARDER          reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    COMA            reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    DOSPT           reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    CORDER          reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    PUNTOS          reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97

  ! MAS             [ reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .) ]
  ! MENOS           [ reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .) ]
  ! POR             [ reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .) ]
  ! POTENCIA        [ reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .) ]
  ! MOD             [ reduce using rule 73 (expresion -> expresion MAYIGQUE expresion .) ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]


state 140

    (74) expresion -> expresion MENIGQUE expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    OR              reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    AND             reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    IGUALQUE        reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    NIGUALQUE       reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    MAYQUE          reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    MENQUE          reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    MAYIGQUE        reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    MENIGQUE        reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    IMPRIMIR        reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    IMPRIMIRSALTO   reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    LOCAL           reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    GLOBAL          reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    ID              reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    MIENTRAS        reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    IF              reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    FUNC            reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    ESTRUCTURA      reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    RETORNO         reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    BREAK           reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    CONTINUE        reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    FOR             reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    PTCOMA          reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    PARDER          reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    COMA            reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    DOSPT           reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    CORDER          reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    PUNTOS          reduce using rule 74 (expresion -> expresion MENIGQUE expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97

  ! MAS             [ reduce using rule 74 (expresion -> expresion MENIGQUE expresion .) ]
  ! MENOS           [ reduce using rule 74 (expresion -> expresion MENIGQUE expresion .) ]
  ! POR             [ reduce using rule 74 (expresion -> expresion MENIGQUE expresion .) ]
  ! DIVIDIDO        [ reduce using rule 74 (expresion -> expresion MENIGQUE expresion .) ]
  ! POTENCIA        [ reduce using rule 74 (expresion -> expresion MENIGQUE expresion .) ]
  ! MOD             [ reduce using rule 74 (expresion -> expresion MENIGQUE expresion .) ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]


state 141

    (75) expresion -> expresion POTENCIA expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    MAS             reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    MENOS           reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    POR             reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    DIVIDIDO        reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    OR              reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    AND             reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    IGUALQUE        reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    NIGUALQUE       reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    MAYQUE          reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    MENQUE          reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    MAYIGQUE        reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    MENIGQUE        reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    POTENCIA        reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    MOD             reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    IMPRIMIR        reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    IMPRIMIRSALTO   reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    LOCAL           reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    GLOBAL          reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    ID              reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    MIENTRAS        reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    IF              reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    FUNC            reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    ESTRUCTURA      reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    RETORNO         reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    BREAK           reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    CONTINUE        reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    FOR             reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    PTCOMA          reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    PARDER          reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    COMA            reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    DOSPT           reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    CORDER          reduce using rule 75 (expresion -> expresion POTENCIA expresion .)
    PUNTOS          reduce using rule 75 (expresion -> expresion POTENCIA expresion .)

  ! MAS             [ shift and go to state 84 ]
  ! MENOS           [ shift and go to state 85 ]
  ! POR             [ shift and go to state 86 ]
  ! DIVIDIDO        [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]
  ! POTENCIA        [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 97 ]


state 142

    (76) expresion -> expresion MOD expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    MAS             reduce using rule 76 (expresion -> expresion MOD expresion .)
    MENOS           reduce using rule 76 (expresion -> expresion MOD expresion .)
    POR             reduce using rule 76 (expresion -> expresion MOD expresion .)
    DIVIDIDO        reduce using rule 76 (expresion -> expresion MOD expresion .)
    OR              reduce using rule 76 (expresion -> expresion MOD expresion .)
    AND             reduce using rule 76 (expresion -> expresion MOD expresion .)
    IGUALQUE        reduce using rule 76 (expresion -> expresion MOD expresion .)
    NIGUALQUE       reduce using rule 76 (expresion -> expresion MOD expresion .)
    MAYQUE          reduce using rule 76 (expresion -> expresion MOD expresion .)
    MENQUE          reduce using rule 76 (expresion -> expresion MOD expresion .)
    MAYIGQUE        reduce using rule 76 (expresion -> expresion MOD expresion .)
    MENIGQUE        reduce using rule 76 (expresion -> expresion MOD expresion .)
    MOD             reduce using rule 76 (expresion -> expresion MOD expresion .)
    IMPRIMIR        reduce using rule 76 (expresion -> expresion MOD expresion .)
    IMPRIMIRSALTO   reduce using rule 76 (expresion -> expresion MOD expresion .)
    LOCAL           reduce using rule 76 (expresion -> expresion MOD expresion .)
    GLOBAL          reduce using rule 76 (expresion -> expresion MOD expresion .)
    ID              reduce using rule 76 (expresion -> expresion MOD expresion .)
    MIENTRAS        reduce using rule 76 (expresion -> expresion MOD expresion .)
    IF              reduce using rule 76 (expresion -> expresion MOD expresion .)
    FUNC            reduce using rule 76 (expresion -> expresion MOD expresion .)
    ESTRUCTURA      reduce using rule 76 (expresion -> expresion MOD expresion .)
    RETORNO         reduce using rule 76 (expresion -> expresion MOD expresion .)
    BREAK           reduce using rule 76 (expresion -> expresion MOD expresion .)
    CONTINUE        reduce using rule 76 (expresion -> expresion MOD expresion .)
    FOR             reduce using rule 76 (expresion -> expresion MOD expresion .)
    PTCOMA          reduce using rule 76 (expresion -> expresion MOD expresion .)
    PARDER          reduce using rule 76 (expresion -> expresion MOD expresion .)
    COMA            reduce using rule 76 (expresion -> expresion MOD expresion .)
    DOSPT           reduce using rule 76 (expresion -> expresion MOD expresion .)
    CORDER          reduce using rule 76 (expresion -> expresion MOD expresion .)
    PUNTOS          reduce using rule 76 (expresion -> expresion MOD expresion .)
    POTENCIA        shift and go to state 96

  ! POTENCIA        [ reduce using rule 76 (expresion -> expresion MOD expresion .) ]
  ! MAS             [ shift and go to state 84 ]
  ! MENOS           [ shift and go to state 85 ]
  ! POR             [ shift and go to state 86 ]
  ! DIVIDIDO        [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]
  ! AND             [ shift and go to state 89 ]
  ! IGUALQUE        [ shift and go to state 90 ]
  ! NIGUALQUE       [ shift and go to state 91 ]
  ! MAYQUE          [ shift and go to state 92 ]
  ! MENQUE          [ shift and go to state 93 ]
  ! MAYIGQUE        [ shift and go to state 94 ]
  ! MENIGQUE        [ shift and go to state 95 ]
  ! MOD             [ shift and go to state 97 ]


state 143

    (83) expresion -> PARIZQ expresion PARDER .

    MAS             reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    POR             reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    OR              reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    AND             reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    MAYQUE          reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    MOD             reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    ID              reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    IF              reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    FUNC            reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    ESTRUCTURA      reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    BREAK           reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    FOR             reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    CORDER          reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 83 (expresion -> PARIZQ expresion PARDER .)


state 144

    (85) expresion -> ID CORIZQ ENTERO . CORDER

    CORDER          shift and go to state 179


state 145

    (80) accessST -> ID PUNTO ID .

    MAS             reduce using rule 80 (accessST -> ID PUNTO ID .)
    MENOS           reduce using rule 80 (accessST -> ID PUNTO ID .)
    POR             reduce using rule 80 (accessST -> ID PUNTO ID .)
    DIVIDIDO        reduce using rule 80 (accessST -> ID PUNTO ID .)
    OR              reduce using rule 80 (accessST -> ID PUNTO ID .)
    AND             reduce using rule 80 (accessST -> ID PUNTO ID .)
    IGUALQUE        reduce using rule 80 (accessST -> ID PUNTO ID .)
    NIGUALQUE       reduce using rule 80 (accessST -> ID PUNTO ID .)
    MAYQUE          reduce using rule 80 (accessST -> ID PUNTO ID .)
    MENQUE          reduce using rule 80 (accessST -> ID PUNTO ID .)
    MAYIGQUE        reduce using rule 80 (accessST -> ID PUNTO ID .)
    MENIGQUE        reduce using rule 80 (accessST -> ID PUNTO ID .)
    POTENCIA        reduce using rule 80 (accessST -> ID PUNTO ID .)
    MOD             reduce using rule 80 (accessST -> ID PUNTO ID .)
    IMPRIMIR        reduce using rule 80 (accessST -> ID PUNTO ID .)
    IMPRIMIRSALTO   reduce using rule 80 (accessST -> ID PUNTO ID .)
    LOCAL           reduce using rule 80 (accessST -> ID PUNTO ID .)
    GLOBAL          reduce using rule 80 (accessST -> ID PUNTO ID .)
    ID              reduce using rule 80 (accessST -> ID PUNTO ID .)
    MIENTRAS        reduce using rule 80 (accessST -> ID PUNTO ID .)
    IF              reduce using rule 80 (accessST -> ID PUNTO ID .)
    FUNC            reduce using rule 80 (accessST -> ID PUNTO ID .)
    ESTRUCTURA      reduce using rule 80 (accessST -> ID PUNTO ID .)
    RETORNO         reduce using rule 80 (accessST -> ID PUNTO ID .)
    BREAK           reduce using rule 80 (accessST -> ID PUNTO ID .)
    CONTINUE        reduce using rule 80 (accessST -> ID PUNTO ID .)
    FOR             reduce using rule 80 (accessST -> ID PUNTO ID .)
    PTCOMA          reduce using rule 80 (accessST -> ID PUNTO ID .)
    PARDER          reduce using rule 80 (accessST -> ID PUNTO ID .)
    COMA            reduce using rule 80 (accessST -> ID PUNTO ID .)
    DOSPT           reduce using rule 80 (accessST -> ID PUNTO ID .)
    CORDER          reduce using rule 80 (accessST -> ID PUNTO ID .)
    PUNTOS          reduce using rule 80 (accessST -> ID PUNTO ID .)


state 146

    (87) expresion -> CORIZQ l_exp CORDER .

    MAS             reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    MENOS           reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    POR             reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    DIVIDIDO        reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    OR              reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    AND             reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    IGUALQUE        reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    NIGUALQUE       reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    MAYQUE          reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    MENQUE          reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    MAYIGQUE        reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    MENIGQUE        reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    POTENCIA        reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    MOD             reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    IMPRIMIR        reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    IMPRIMIRSALTO   reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    LOCAL           reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    GLOBAL          reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    ID              reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    MIENTRAS        reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    IF              reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    FUNC            reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    ESTRUCTURA      reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    RETORNO         reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    BREAK           reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    CONTINUE        reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    FOR             reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    PTCOMA          reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    PARDER          reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    COMA            reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    DOSPT           reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    CORDER          reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)
    PUNTOS          reduce using rule 87 (expresion -> CORIZQ l_exp CORDER .)


state 147

    (99) expresion -> CADENA POTENCIA ENTERO .

    MAS             reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    MENOS           reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    POR             reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    DIVIDIDO        reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    OR              reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    AND             reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    IGUALQUE        reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    NIGUALQUE       reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    MAYQUE          reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    MENQUE          reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    MAYIGQUE        reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    MENIGQUE        reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    POTENCIA        reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    MOD             reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    IMPRIMIR        reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    IMPRIMIRSALTO   reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    LOCAL           reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    GLOBAL          reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    ID              reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    MIENTRAS        reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    IF              reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    FUNC            reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    ESTRUCTURA      reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    RETORNO         reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    BREAK           reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    CONTINUE        reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    FOR             reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    PTCOMA          reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    PARDER          reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    COMA            reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    DOSPT           reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    CORDER          reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)
    PUNTOS          reduce using rule 99 (expresion -> CADENA POTENCIA ENTERO .)


state 148

    (93) expresion -> UPPER PARIZQ expresion . PARDER
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PARDER          shift and go to state 180
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 149

    (94) expresion -> LOWER PARIZQ expresion . PARDER
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PARDER          shift and go to state 181
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 150

    (95) expresion -> LEN PARIZQ expresion . PARDER
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PARDER          shift and go to state 182
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 151

    (96) expresion -> PARSE PARIZQ tipo_var . COMA expresion PARDER

    COMA            shift and go to state 183


state 152

    (30) tipo_var -> ENTERO64 .

    COMA            reduce using rule 30 (tipo_var -> ENTERO64 .)
    PTCOMA          reduce using rule 30 (tipo_var -> ENTERO64 .)
    PARDER          reduce using rule 30 (tipo_var -> ENTERO64 .)
    END             reduce using rule 30 (tipo_var -> ENTERO64 .)
    IMPRIMIR        reduce using rule 30 (tipo_var -> ENTERO64 .)
    IMPRIMIRSALTO   reduce using rule 30 (tipo_var -> ENTERO64 .)
    LOCAL           reduce using rule 30 (tipo_var -> ENTERO64 .)
    GLOBAL          reduce using rule 30 (tipo_var -> ENTERO64 .)
    ID              reduce using rule 30 (tipo_var -> ENTERO64 .)
    MIENTRAS        reduce using rule 30 (tipo_var -> ENTERO64 .)
    IF              reduce using rule 30 (tipo_var -> ENTERO64 .)
    FUNC            reduce using rule 30 (tipo_var -> ENTERO64 .)
    ESTRUCTURA      reduce using rule 30 (tipo_var -> ENTERO64 .)
    RETORNO         reduce using rule 30 (tipo_var -> ENTERO64 .)
    BREAK           reduce using rule 30 (tipo_var -> ENTERO64 .)
    CONTINUE        reduce using rule 30 (tipo_var -> ENTERO64 .)
    FOR             reduce using rule 30 (tipo_var -> ENTERO64 .)


state 153

    (31) tipo_var -> DECIMAL64 .

    COMA            reduce using rule 31 (tipo_var -> DECIMAL64 .)
    PTCOMA          reduce using rule 31 (tipo_var -> DECIMAL64 .)
    PARDER          reduce using rule 31 (tipo_var -> DECIMAL64 .)
    END             reduce using rule 31 (tipo_var -> DECIMAL64 .)
    IMPRIMIR        reduce using rule 31 (tipo_var -> DECIMAL64 .)
    IMPRIMIRSALTO   reduce using rule 31 (tipo_var -> DECIMAL64 .)
    LOCAL           reduce using rule 31 (tipo_var -> DECIMAL64 .)
    GLOBAL          reduce using rule 31 (tipo_var -> DECIMAL64 .)
    ID              reduce using rule 31 (tipo_var -> DECIMAL64 .)
    MIENTRAS        reduce using rule 31 (tipo_var -> DECIMAL64 .)
    IF              reduce using rule 31 (tipo_var -> DECIMAL64 .)
    FUNC            reduce using rule 31 (tipo_var -> DECIMAL64 .)
    ESTRUCTURA      reduce using rule 31 (tipo_var -> DECIMAL64 .)
    RETORNO         reduce using rule 31 (tipo_var -> DECIMAL64 .)
    BREAK           reduce using rule 31 (tipo_var -> DECIMAL64 .)
    CONTINUE        reduce using rule 31 (tipo_var -> DECIMAL64 .)
    FOR             reduce using rule 31 (tipo_var -> DECIMAL64 .)


state 154

    (32) tipo_var -> BOOLEANO .

    COMA            reduce using rule 32 (tipo_var -> BOOLEANO .)
    PTCOMA          reduce using rule 32 (tipo_var -> BOOLEANO .)
    PARDER          reduce using rule 32 (tipo_var -> BOOLEANO .)
    END             reduce using rule 32 (tipo_var -> BOOLEANO .)
    IMPRIMIR        reduce using rule 32 (tipo_var -> BOOLEANO .)
    IMPRIMIRSALTO   reduce using rule 32 (tipo_var -> BOOLEANO .)
    LOCAL           reduce using rule 32 (tipo_var -> BOOLEANO .)
    GLOBAL          reduce using rule 32 (tipo_var -> BOOLEANO .)
    ID              reduce using rule 32 (tipo_var -> BOOLEANO .)
    MIENTRAS        reduce using rule 32 (tipo_var -> BOOLEANO .)
    IF              reduce using rule 32 (tipo_var -> BOOLEANO .)
    FUNC            reduce using rule 32 (tipo_var -> BOOLEANO .)
    ESTRUCTURA      reduce using rule 32 (tipo_var -> BOOLEANO .)
    RETORNO         reduce using rule 32 (tipo_var -> BOOLEANO .)
    BREAK           reduce using rule 32 (tipo_var -> BOOLEANO .)
    CONTINUE        reduce using rule 32 (tipo_var -> BOOLEANO .)
    FOR             reduce using rule 32 (tipo_var -> BOOLEANO .)


state 155

    (33) tipo_var -> CHAR .

    COMA            reduce using rule 33 (tipo_var -> CHAR .)
    PTCOMA          reduce using rule 33 (tipo_var -> CHAR .)
    PARDER          reduce using rule 33 (tipo_var -> CHAR .)
    END             reduce using rule 33 (tipo_var -> CHAR .)
    IMPRIMIR        reduce using rule 33 (tipo_var -> CHAR .)
    IMPRIMIRSALTO   reduce using rule 33 (tipo_var -> CHAR .)
    LOCAL           reduce using rule 33 (tipo_var -> CHAR .)
    GLOBAL          reduce using rule 33 (tipo_var -> CHAR .)
    ID              reduce using rule 33 (tipo_var -> CHAR .)
    MIENTRAS        reduce using rule 33 (tipo_var -> CHAR .)
    IF              reduce using rule 33 (tipo_var -> CHAR .)
    FUNC            reduce using rule 33 (tipo_var -> CHAR .)
    ESTRUCTURA      reduce using rule 33 (tipo_var -> CHAR .)
    RETORNO         reduce using rule 33 (tipo_var -> CHAR .)
    BREAK           reduce using rule 33 (tipo_var -> CHAR .)
    CONTINUE        reduce using rule 33 (tipo_var -> CHAR .)
    FOR             reduce using rule 33 (tipo_var -> CHAR .)


state 156

    (34) tipo_var -> STRING .

    COMA            reduce using rule 34 (tipo_var -> STRING .)
    PTCOMA          reduce using rule 34 (tipo_var -> STRING .)
    PARDER          reduce using rule 34 (tipo_var -> STRING .)
    END             reduce using rule 34 (tipo_var -> STRING .)
    IMPRIMIR        reduce using rule 34 (tipo_var -> STRING .)
    IMPRIMIRSALTO   reduce using rule 34 (tipo_var -> STRING .)
    LOCAL           reduce using rule 34 (tipo_var -> STRING .)
    GLOBAL          reduce using rule 34 (tipo_var -> STRING .)
    ID              reduce using rule 34 (tipo_var -> STRING .)
    MIENTRAS        reduce using rule 34 (tipo_var -> STRING .)
    IF              reduce using rule 34 (tipo_var -> STRING .)
    FUNC            reduce using rule 34 (tipo_var -> STRING .)
    ESTRUCTURA      reduce using rule 34 (tipo_var -> STRING .)
    RETORNO         reduce using rule 34 (tipo_var -> STRING .)
    BREAK           reduce using rule 34 (tipo_var -> STRING .)
    CONTINUE        reduce using rule 34 (tipo_var -> STRING .)
    FOR             reduce using rule 34 (tipo_var -> STRING .)


state 157

    (97) expresion -> TRUNC PARIZQ expresion . PARDER
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PARDER          shift and go to state 184
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 158

    (98) expresion -> STRING PARIZQ expresion . PARDER
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PARDER          shift and go to state 185
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 159

    (38) if_instr -> IF expresion instrucciones END . PTCOMA

    PTCOMA          shift and go to state 186


state 160

    (39) if_instr -> IF expresion instrucciones ELSE . instrucciones END PTCOMA
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instrucciones                  shift and go to state 187
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 161

    (40) if_instr -> IF expresion instrucciones elseIfList . END PTCOMA

    END             shift and go to state 188


state 162

    (41) elseIfList -> ELSEIF . expresion instrucciones
    (42) elseIfList -> ELSEIF . expresion instrucciones ELSE instrucciones
    (43) elseIfList -> ELSEIF . expresion instrucciones elseIfList
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 189
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 163

    (56) parametros -> ID . tipo_var
    (30) tipo_var -> . ENTERO64
    (31) tipo_var -> . DECIMAL64
    (32) tipo_var -> . BOOLEANO
    (33) tipo_var -> . CHAR
    (34) tipo_var -> . STRING

    ENTERO64        shift and go to state 152
    DECIMAL64       shift and go to state 153
    BOOLEANO        shift and go to state 154
    CHAR            shift and go to state 155
    STRING          shift and go to state 156

    tipo_var                       shift and go to state 190

state 164

    (53) funcion_instr -> FUNC ID PARIZQ PARDER . DOSPT tipo_var instrucciones END PTCOMA

    DOSPT           shift and go to state 191


state 165

    (54) funcion_instr -> FUNC ID PARIZQ parametros . PARDER DOSPT tipo_var instrucciones END PTCOMA
    (55) parametros -> parametros . COMA ID tipo_var

    PARDER          shift and go to state 192
    COMA            shift and go to state 193


state 166

    (48) attList -> ID DOSPT . tipo_var
    (30) tipo_var -> . ENTERO64
    (31) tipo_var -> . DECIMAL64
    (32) tipo_var -> . BOOLEANO
    (33) tipo_var -> . CHAR
    (34) tipo_var -> . STRING

    ENTERO64        shift and go to state 152
    DECIMAL64       shift and go to state 153
    BOOLEANO        shift and go to state 154
    CHAR            shift and go to state 155
    STRING          shift and go to state 156

    tipo_var                       shift and go to state 194

state 167

    (44) createStruct -> ESTRUCTURA ID attList END . PTCOMA

    PTCOMA          shift and go to state 195


state 168

    (45) attList -> attList PTCOMA . ID DOSPT tipo_var PTCOMA
    (46) attList -> attList PTCOMA . ID PTCOMA

    ID              shift and go to state 196


state 169

    (36) for_instr -> FOR ID IN expresion . PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> FOR ID IN expresion . instrucciones END PTCOMA
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    PUNTOS          shift and go to state 197
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instrucciones                  shift and go to state 198
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 170

    (18) imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .

    IMPRIMIR        reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    LOCAL           reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    GLOBAL          reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    ID              reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    MIENTRAS        reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    IF              reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    FUNC            reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    ESTRUCTURA      reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    RETORNO         reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    BREAK           reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    CONTINUE        reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    FOR             reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    $end            reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    END             reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    ELSE            reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)
    ELSEIF          reduce using rule 18 (imprimir_instr -> IMPRIMIR PARIZQ expresion PARDER PTCOMA .)


state 171

    (20) imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .

    IMPRIMIR        reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    LOCAL           reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    GLOBAL          reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    ID              reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    MIENTRAS        reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    IF              reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    FUNC            reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    ESTRUCTURA      reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    RETORNO         reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    BREAK           reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    CONTINUE        reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    FOR             reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    $end            reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    END             reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    ELSE            reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)
    ELSEIF          reduce using rule 20 (imprimir_instr -> IMPRIMIR PARIZQ l_exp PARDER PTCOMA .)


state 172

    (51) l_exp -> l_exp COMA expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PARDER          reduce using rule 51 (l_exp -> l_exp COMA expresion .)
    COMA            reduce using rule 51 (l_exp -> l_exp COMA expresion .)
    CORDER          reduce using rule 51 (l_exp -> l_exp COMA expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 173

    (19) imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .

    IMPRIMIR        reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    LOCAL           reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    GLOBAL          reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    ID              reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    MIENTRAS        reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    IF              reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    FUNC            reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    ESTRUCTURA      reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    RETORNO         reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    BREAK           reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    CONTINUE        reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    FOR             reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    $end            reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    END             reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    ELSE            reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)
    ELSEIF          reduce using rule 19 (imprimir_instr -> IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA .)


state 174

    (21) imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .

    IMPRIMIR        reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    LOCAL           reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    GLOBAL          reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    ID              reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    MIENTRAS        reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    IF              reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    FUNC            reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    ESTRUCTURA      reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    RETORNO         reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    BREAK           reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    CONTINUE        reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    FOR             reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    $end            reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    END             reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    ELSE            reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)
    ELSEIF          reduce using rule 21 (imprimir_instr -> IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA .)


state 175

    (29) asignacion_instr -> ID IGUAL expresion DOSPT tipo_var . PTCOMA

    PTCOMA          shift and go to state 199


state 176

    (59) expList -> expList COMA expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PARDER          reduce using rule 59 (expList -> expList COMA expresion .)
    COMA            reduce using rule 59 (expList -> expList COMA expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 177

    (50) assignAccessST -> ID PUNTO ID IGUAL expresion .
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PTCOMA          reduce using rule 50 (assignAccessST -> ID PUNTO ID IGUAL expresion .)
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 178

    (35) mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    LOCAL           reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    ID              reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    IF              reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    FUNC            reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    ESTRUCTURA      reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    RETORNO         reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    BREAK           reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    FOR             reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    $end            reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    END             reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    ELSE            reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 35 (mientras_instr -> MIENTRAS expresion instrucciones END PTCOMA .)


state 179

    (85) expresion -> ID CORIZQ ENTERO CORDER .

    MAS             reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    MENOS           reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    POR             reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    DIVIDIDO        reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    OR              reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    AND             reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    IGUALQUE        reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    NIGUALQUE       reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    MAYQUE          reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    MENQUE          reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    MAYIGQUE        reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    MENIGQUE        reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    POTENCIA        reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    MOD             reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    IMPRIMIR        reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    IMPRIMIRSALTO   reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    LOCAL           reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    GLOBAL          reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    ID              reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    MIENTRAS        reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    IF              reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    FUNC            reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    ESTRUCTURA      reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    RETORNO         reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    BREAK           reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    CONTINUE        reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    FOR             reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    PTCOMA          reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    PARDER          reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    COMA            reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    DOSPT           reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    CORDER          reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)
    PUNTOS          reduce using rule 85 (expresion -> ID CORIZQ ENTERO CORDER .)


state 180

    (93) expresion -> UPPER PARIZQ expresion PARDER .

    MAS             reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    MENOS           reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    POR             reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    OR              reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    AND             reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    MAYQUE          reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    MOD             reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    ID              reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    IF              reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    FUNC            reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    ESTRUCTURA      reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    BREAK           reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    FOR             reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    PARDER          reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    COMA            reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    CORDER          reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 93 (expresion -> UPPER PARIZQ expresion PARDER .)


state 181

    (94) expresion -> LOWER PARIZQ expresion PARDER .

    MAS             reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    MENOS           reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    POR             reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    OR              reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    AND             reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    MAYQUE          reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    MOD             reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    ID              reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    IF              reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    FUNC            reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    ESTRUCTURA      reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    BREAK           reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    FOR             reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    PARDER          reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    COMA            reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    CORDER          reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 94 (expresion -> LOWER PARIZQ expresion PARDER .)


state 182

    (95) expresion -> LEN PARIZQ expresion PARDER .

    MAS             reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    MENOS           reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    POR             reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    OR              reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    AND             reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    MAYQUE          reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    MOD             reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    ID              reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    IF              reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    FUNC            reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    ESTRUCTURA      reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    BREAK           reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    FOR             reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    PARDER          reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    COMA            reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    CORDER          reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 95 (expresion -> LEN PARIZQ expresion PARDER .)


state 183

    (96) expresion -> PARSE PARIZQ tipo_var COMA . expresion PARDER
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 200
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 184

    (97) expresion -> TRUNC PARIZQ expresion PARDER .

    MAS             reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MENOS           reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    POR             reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    OR              reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    AND             reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MAYQUE          reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MOD             reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    ID              reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    IF              reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    FUNC            reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    ESTRUCTURA      reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    BREAK           reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    FOR             reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    PARDER          reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    COMA            reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    CORDER          reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 97 (expresion -> TRUNC PARIZQ expresion PARDER .)


state 185

    (98) expresion -> STRING PARIZQ expresion PARDER .

    MAS             reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    MENOS           reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    POR             reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    OR              reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    AND             reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    IGUALQUE        reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    NIGUALQUE       reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    MAYQUE          reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    MENQUE          reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    MAYIGQUE        reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    MENIGQUE        reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    POTENCIA        reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    MOD             reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    IMPRIMIR        reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    LOCAL           reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    GLOBAL          reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    ID              reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    MIENTRAS        reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    IF              reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    FUNC            reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    ESTRUCTURA      reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    RETORNO         reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    BREAK           reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    CONTINUE        reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    FOR             reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    PARDER          reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    COMA            reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    DOSPT           reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    CORDER          reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)
    PUNTOS          reduce using rule 98 (expresion -> STRING PARIZQ expresion PARDER .)


state 186

    (38) if_instr -> IF expresion instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    LOCAL           reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    ID              reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    IF              reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    FUNC            reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    ESTRUCTURA      reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    RETORNO         reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    BREAK           reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    FOR             reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    $end            reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    END             reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    ELSE            reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 38 (if_instr -> IF expresion instrucciones END PTCOMA .)


state 187

    (39) if_instr -> IF expresion instrucciones ELSE instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    END             shift and go to state 201
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instruccion                    shift and go to state 31
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 188

    (40) if_instr -> IF expresion instrucciones elseIfList END . PTCOMA

    PTCOMA          shift and go to state 202


state 189

    (41) elseIfList -> ELSEIF expresion . instrucciones
    (42) elseIfList -> ELSEIF expresion . instrucciones ELSE instrucciones
    (43) elseIfList -> ELSEIF expresion . instrucciones elseIfList
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instrucciones                  shift and go to state 203
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 190

    (56) parametros -> ID tipo_var .

    PARDER          reduce using rule 56 (parametros -> ID tipo_var .)
    COMA            reduce using rule 56 (parametros -> ID tipo_var .)


state 191

    (53) funcion_instr -> FUNC ID PARIZQ PARDER DOSPT . tipo_var instrucciones END PTCOMA
    (30) tipo_var -> . ENTERO64
    (31) tipo_var -> . DECIMAL64
    (32) tipo_var -> . BOOLEANO
    (33) tipo_var -> . CHAR
    (34) tipo_var -> . STRING

    ENTERO64        shift and go to state 152
    DECIMAL64       shift and go to state 153
    BOOLEANO        shift and go to state 154
    CHAR            shift and go to state 155
    STRING          shift and go to state 156

    tipo_var                       shift and go to state 204

state 192

    (54) funcion_instr -> FUNC ID PARIZQ parametros PARDER . DOSPT tipo_var instrucciones END PTCOMA

    DOSPT           shift and go to state 205


state 193

    (55) parametros -> parametros COMA . ID tipo_var

    ID              shift and go to state 206


state 194

    (48) attList -> ID DOSPT tipo_var .

    END             reduce using rule 48 (attList -> ID DOSPT tipo_var .)
    PTCOMA          reduce using rule 48 (attList -> ID DOSPT tipo_var .)


state 195

    (44) createStruct -> ESTRUCTURA ID attList END PTCOMA .

    IMPRIMIR        reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    LOCAL           reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    GLOBAL          reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    ID              reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    MIENTRAS        reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    IF              reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    FUNC            reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    ESTRUCTURA      reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    RETORNO         reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    BREAK           reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    CONTINUE        reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    FOR             reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    $end            reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    END             reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    ELSE            reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)
    ELSEIF          reduce using rule 44 (createStruct -> ESTRUCTURA ID attList END PTCOMA .)


state 196

    (45) attList -> attList PTCOMA ID . DOSPT tipo_var PTCOMA
    (46) attList -> attList PTCOMA ID . PTCOMA

    DOSPT           shift and go to state 208
    PTCOMA          shift and go to state 207


state 197

    (36) for_instr -> FOR ID IN expresion PUNTOS . expresion instrucciones END PTCOMA
    (63) expresion -> . expresion MAS expresion
    (64) expresion -> . expresion MENOS expresion
    (65) expresion -> . expresion POR expresion
    (66) expresion -> . expresion DIVIDIDO expresion
    (67) expresion -> . expresion OR expresion
    (68) expresion -> . expresion AND expresion
    (69) expresion -> . expresion IGUALQUE expresion
    (70) expresion -> . expresion NIGUALQUE expresion
    (71) expresion -> . expresion MAYQUE expresion
    (72) expresion -> . expresion MENQUE expresion
    (73) expresion -> . expresion MAYIGQUE expresion
    (74) expresion -> . expresion MENIGQUE expresion
    (75) expresion -> . expresion POTENCIA expresion
    (76) expresion -> . expresion MOD expresion
    (77) expresion -> . finalExp
    (81) expresion -> . MENOS expresion
    (82) expresion -> . NOT expresion
    (83) expresion -> . PARIZQ expresion PARDER
    (84) expresion -> . ID
    (85) expresion -> . ID CORIZQ ENTERO CORDER
    (86) expresion -> . ENTERO
    (87) expresion -> . CORIZQ l_exp CORDER
    (88) expresion -> . DECIMAL
    (89) expresion -> . CARACTER
    (90) expresion -> . CADENA
    (91) expresion -> . VERDADERO
    (92) expresion -> . FALSO
    (93) expresion -> . UPPER PARIZQ expresion PARDER
    (94) expresion -> . LOWER PARIZQ expresion PARDER
    (95) expresion -> . LEN PARIZQ expresion PARDER
    (96) expresion -> . PARSE PARIZQ tipo_var COMA expresion PARDER
    (97) expresion -> . TRUNC PARIZQ expresion PARDER
    (98) expresion -> . STRING PARIZQ expresion PARDER
    (99) expresion -> . CADENA POTENCIA ENTERO
    (78) finalExp -> . llamada_funcion_instr
    (79) finalExp -> . accessST
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (80) accessST -> . ID PUNTO ID

    MENOS           shift and go to state 45
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 48
    ID              shift and go to state 49
    ENTERO          shift and go to state 51
    CORIZQ          shift and go to state 50
    DECIMAL         shift and go to state 52
    CARACTER        shift and go to state 53
    CADENA          shift and go to state 54
    VERDADERO       shift and go to state 55
    FALSO           shift and go to state 56
    UPPER           shift and go to state 57
    LOWER           shift and go to state 58
    LEN             shift and go to state 59
    PARSE           shift and go to state 60
    TRUNC           shift and go to state 61
    STRING          shift and go to state 62

    expresion                      shift and go to state 209
    finalExp                       shift and go to state 46
    llamada_funcion_instr          shift and go to state 63
    accessST                       shift and go to state 64

state 198

    (37) for_instr -> FOR ID IN expresion instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    END             shift and go to state 210
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instruccion                    shift and go to state 31
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 199

    (29) asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .

    IMPRIMIR        reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    LOCAL           reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    GLOBAL          reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    ID              reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    MIENTRAS        reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    IF              reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    FUNC            reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    ESTRUCTURA      reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    RETORNO         reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    BREAK           reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    CONTINUE        reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    FOR             reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    $end            reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    END             reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    ELSE            reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)
    ELSEIF          reduce using rule 29 (asignacion_instr -> ID IGUAL expresion DOSPT tipo_var PTCOMA .)


state 200

    (96) expresion -> PARSE PARIZQ tipo_var COMA expresion . PARDER
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion

    PARDER          shift and go to state 211
    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97


state 201

    (39) if_instr -> IF expresion instrucciones ELSE instrucciones END . PTCOMA

    PTCOMA          shift and go to state 212


state 202

    (40) if_instr -> IF expresion instrucciones elseIfList END PTCOMA .

    IMPRIMIR        reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    LOCAL           reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    GLOBAL          reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    ID              reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    MIENTRAS        reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    IF              reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    FUNC            reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    ESTRUCTURA      reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    RETORNO         reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    BREAK           reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    CONTINUE        reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    FOR             reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    $end            reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    END             reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    ELSE            reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)
    ELSEIF          reduce using rule 40 (if_instr -> IF expresion instrucciones elseIfList END PTCOMA .)


state 203

    (41) elseIfList -> ELSEIF expresion instrucciones .
    (42) elseIfList -> ELSEIF expresion instrucciones . ELSE instrucciones
    (43) elseIfList -> ELSEIF expresion instrucciones . elseIfList
    (2) instrucciones -> instrucciones . instruccion
    (41) elseIfList -> . ELSEIF expresion instrucciones
    (42) elseIfList -> . ELSEIF expresion instrucciones ELSE instrucciones
    (43) elseIfList -> . ELSEIF expresion instrucciones elseIfList
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    END             reduce using rule 41 (elseIfList -> ELSEIF expresion instrucciones .)
    ELSE            shift and go to state 213
    ELSEIF          shift and go to state 162
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    elseIfList                     shift and go to state 214
    instruccion                    shift and go to state 31
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 204

    (53) funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var . instrucciones END PTCOMA
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instrucciones                  shift and go to state 215
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 205

    (54) funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT . tipo_var instrucciones END PTCOMA
    (30) tipo_var -> . ENTERO64
    (31) tipo_var -> . DECIMAL64
    (32) tipo_var -> . BOOLEANO
    (33) tipo_var -> . CHAR
    (34) tipo_var -> . STRING

    ENTERO64        shift and go to state 152
    DECIMAL64       shift and go to state 153
    BOOLEANO        shift and go to state 154
    CHAR            shift and go to state 155
    STRING          shift and go to state 156

    tipo_var                       shift and go to state 216

state 206

    (55) parametros -> parametros COMA ID . tipo_var
    (30) tipo_var -> . ENTERO64
    (31) tipo_var -> . DECIMAL64
    (32) tipo_var -> . BOOLEANO
    (33) tipo_var -> . CHAR
    (34) tipo_var -> . STRING

    ENTERO64        shift and go to state 152
    DECIMAL64       shift and go to state 153
    BOOLEANO        shift and go to state 154
    CHAR            shift and go to state 155
    STRING          shift and go to state 156

    tipo_var                       shift and go to state 217

state 207

    (46) attList -> attList PTCOMA ID PTCOMA .

    END             reduce using rule 46 (attList -> attList PTCOMA ID PTCOMA .)
    PTCOMA          reduce using rule 46 (attList -> attList PTCOMA ID PTCOMA .)


state 208

    (45) attList -> attList PTCOMA ID DOSPT . tipo_var PTCOMA
    (30) tipo_var -> . ENTERO64
    (31) tipo_var -> . DECIMAL64
    (32) tipo_var -> . BOOLEANO
    (33) tipo_var -> . CHAR
    (34) tipo_var -> . STRING

    ENTERO64        shift and go to state 152
    DECIMAL64       shift and go to state 153
    BOOLEANO        shift and go to state 154
    CHAR            shift and go to state 155
    STRING          shift and go to state 156

    tipo_var                       shift and go to state 218

state 209

    (36) for_instr -> FOR ID IN expresion PUNTOS expresion . instrucciones END PTCOMA
    (63) expresion -> expresion . MAS expresion
    (64) expresion -> expresion . MENOS expresion
    (65) expresion -> expresion . POR expresion
    (66) expresion -> expresion . DIVIDIDO expresion
    (67) expresion -> expresion . OR expresion
    (68) expresion -> expresion . AND expresion
    (69) expresion -> expresion . IGUALQUE expresion
    (70) expresion -> expresion . NIGUALQUE expresion
    (71) expresion -> expresion . MAYQUE expresion
    (72) expresion -> expresion . MENQUE expresion
    (73) expresion -> expresion . MAYIGQUE expresion
    (74) expresion -> expresion . MENIGQUE expresion
    (75) expresion -> expresion . POTENCIA expresion
    (76) expresion -> expresion . MOD expresion
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    MAS             shift and go to state 84
    MENOS           shift and go to state 85
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    IGUALQUE        shift and go to state 90
    NIGUALQUE       shift and go to state 91
    MAYQUE          shift and go to state 92
    MENQUE          shift and go to state 93
    MAYIGQUE        shift and go to state 94
    MENIGQUE        shift and go to state 95
    POTENCIA        shift and go to state 96
    MOD             shift and go to state 97
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instrucciones                  shift and go to state 219
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 210

    (37) for_instr -> FOR ID IN expresion instrucciones END . PTCOMA

    PTCOMA          shift and go to state 220


state 211

    (96) expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .

    MAS             reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MENOS           reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    POR             reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    DIVIDIDO        reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    OR              reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    AND             reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    IGUALQUE        reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    NIGUALQUE       reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MAYQUE          reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MENQUE          reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MAYIGQUE        reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MENIGQUE        reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    POTENCIA        reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MOD             reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    IMPRIMIR        reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    IMPRIMIRSALTO   reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    LOCAL           reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    GLOBAL          reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    ID              reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    MIENTRAS        reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    IF              reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    FUNC            reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    ESTRUCTURA      reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    RETORNO         reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    BREAK           reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    CONTINUE        reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    FOR             reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    PTCOMA          reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    PARDER          reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    COMA            reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    DOSPT           reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    CORDER          reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)
    PUNTOS          reduce using rule 96 (expresion -> PARSE PARIZQ tipo_var COMA expresion PARDER .)


state 212

    (39) if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    LOCAL           reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    ID              reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    IF              reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    FUNC            reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    ESTRUCTURA      reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    RETORNO         reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    BREAK           reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    FOR             reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    $end            reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    END             reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    ELSE            reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 39 (if_instr -> IF expresion instrucciones ELSE instrucciones END PTCOMA .)


state 213

    (42) elseIfList -> ELSEIF expresion instrucciones ELSE . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instrucciones                  shift and go to state 221
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 214

    (43) elseIfList -> ELSEIF expresion instrucciones elseIfList .

    END             reduce using rule 43 (elseIfList -> ELSEIF expresion instrucciones elseIfList .)


state 215

    (53) funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    END             shift and go to state 222
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instruccion                    shift and go to state 31
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 216

    (54) funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var . instrucciones END PTCOMA
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instrucciones                  shift and go to state 223
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 217

    (55) parametros -> parametros COMA ID tipo_var .

    PARDER          reduce using rule 55 (parametros -> parametros COMA ID tipo_var .)
    COMA            reduce using rule 55 (parametros -> parametros COMA ID tipo_var .)


state 218

    (45) attList -> attList PTCOMA ID DOSPT tipo_var . PTCOMA

    PTCOMA          shift and go to state 224


state 219

    (36) for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    END             shift and go to state 225
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instruccion                    shift and go to state 31
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 220

    (37) for_instr -> FOR ID IN expresion instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    LOCAL           reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    ID              reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    IF              reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    FUNC            reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    ESTRUCTURA      reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    RETORNO         reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    BREAK           reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    FOR             reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    $end            reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    END             reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    ELSE            reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 37 (for_instr -> FOR ID IN expresion instrucciones END PTCOMA .)


state 221

    (42) elseIfList -> ELSEIF expresion instrucciones ELSE instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    END             reduce using rule 42 (elseIfList -> ELSEIF expresion instrucciones ELSE instrucciones .)
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instruccion                    shift and go to state 31
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 222

    (53) funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END . PTCOMA

    PTCOMA          shift and go to state 226


state 223

    (54) funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones . END PTCOMA
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . definicion_instr
    (6) instruccion -> . asignacion_instr
    (7) instruccion -> . mientras_instr
    (8) instruccion -> . if_instr
    (9) instruccion -> . funcion_instr
    (10) instruccion -> . llamada_funcion_instr PTCOMA
    (11) instruccion -> . createStruct
    (12) instruccion -> . declareStructST PTCOMA
    (13) instruccion -> . assignAccessST PTCOMA
    (14) instruccion -> . retorno_inst
    (15) instruccion -> . break_inst
    (16) instruccion -> . continue_inst
    (17) instruccion -> . for_instr
    (18) imprimir_instr -> . IMPRIMIR PARIZQ expresion PARDER PTCOMA
    (19) imprimir_instr -> . IMPRIMIRSALTO PARIZQ expresion PARDER PTCOMA
    (20) imprimir_instr -> . IMPRIMIR PARIZQ l_exp PARDER PTCOMA
    (21) imprimir_instr -> . IMPRIMIRSALTO PARIZQ l_exp PARDER PTCOMA
    (26) definicion_instr -> . LOCAL asignacion_instr
    (27) definicion_instr -> . GLOBAL asignacion_instr
    (28) asignacion_instr -> . ID IGUAL expresion PTCOMA
    (29) asignacion_instr -> . ID IGUAL expresion DOSPT tipo_var PTCOMA
    (35) mientras_instr -> . MIENTRAS expresion instrucciones END PTCOMA
    (38) if_instr -> . IF expresion instrucciones END PTCOMA
    (39) if_instr -> . IF expresion instrucciones ELSE instrucciones END PTCOMA
    (40) if_instr -> . IF expresion instrucciones elseIfList END PTCOMA
    (53) funcion_instr -> . FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA
    (54) funcion_instr -> . FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA
    (57) llamada_funcion_instr -> . ID PARIZQ PARDER
    (58) llamada_funcion_instr -> . ID PARIZQ expList PARDER
    (44) createStruct -> . ESTRUCTURA ID attList END PTCOMA
    (49) declareStructST -> . ID DOSPT ID
    (50) assignAccessST -> . ID PUNTO ID IGUAL expresion
    (22) retorno_inst -> . RETORNO expresion PTCOMA
    (23) retorno_inst -> . RETORNO PTCOMA
    (24) break_inst -> . BREAK PTCOMA
    (25) continue_inst -> . CONTINUE PTCOMA
    (36) for_instr -> . FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA
    (37) for_instr -> . FOR ID IN expresion instrucciones END PTCOMA

    END             shift and go to state 227
    IMPRIMIR        shift and go to state 18
    IMPRIMIRSALTO   shift and go to state 19
    LOCAL           shift and go to state 20
    GLOBAL          shift and go to state 21
    ID              shift and go to state 22
    MIENTRAS        shift and go to state 23
    IF              shift and go to state 24
    FUNC            shift and go to state 25
    ESTRUCTURA      shift and go to state 26
    RETORNO         shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    FOR             shift and go to state 30

    instruccion                    shift and go to state 31
    imprimir_instr                 shift and go to state 4
    definicion_instr               shift and go to state 5
    asignacion_instr               shift and go to state 6
    mientras_instr                 shift and go to state 7
    if_instr                       shift and go to state 8
    funcion_instr                  shift and go to state 9
    llamada_funcion_instr          shift and go to state 10
    createStruct                   shift and go to state 11
    declareStructST                shift and go to state 12
    assignAccessST                 shift and go to state 13
    retorno_inst                   shift and go to state 14
    break_inst                     shift and go to state 15
    continue_inst                  shift and go to state 16
    for_instr                      shift and go to state 17

state 224

    (45) attList -> attList PTCOMA ID DOSPT tipo_var PTCOMA .

    END             reduce using rule 45 (attList -> attList PTCOMA ID DOSPT tipo_var PTCOMA .)
    PTCOMA          reduce using rule 45 (attList -> attList PTCOMA ID DOSPT tipo_var PTCOMA .)


state 225

    (36) for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END . PTCOMA

    PTCOMA          shift and go to state 228


state 226

    (53) funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    LOCAL           reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    ID              reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    IF              reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    FUNC            reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    ESTRUCTURA      reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    RETORNO         reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    BREAK           reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    FOR             reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    $end            reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    END             reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    ELSE            reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 53 (funcion_instr -> FUNC ID PARIZQ PARDER DOSPT tipo_var instrucciones END PTCOMA .)


state 227

    (54) funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END . PTCOMA

    PTCOMA          shift and go to state 229


state 228

    (36) for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    LOCAL           reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    ID              reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    IF              reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    FUNC            reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    ESTRUCTURA      reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    RETORNO         reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    BREAK           reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    FOR             reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    $end            reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    END             reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    ELSE            reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 36 (for_instr -> FOR ID IN expresion PUNTOS expresion instrucciones END PTCOMA .)


state 229

    (54) funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .

    IMPRIMIR        reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    IMPRIMIRSALTO   reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    LOCAL           reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    GLOBAL          reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    ID              reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    MIENTRAS        reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    IF              reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    FUNC            reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    ESTRUCTURA      reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    RETORNO         reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    BREAK           reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    CONTINUE        reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    FOR             reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    $end            reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    END             reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    ELSE            reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)
    ELSEIF          reduce using rule 54 (funcion_instr -> FUNC ID PARIZQ parametros PARDER DOSPT tipo_var instrucciones END PTCOMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for POTENCIA in state 54 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 73 resolved as shift
WARNING: shift/reduce conflict for PARDER in state 75 resolved as shift
